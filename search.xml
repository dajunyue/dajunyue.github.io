<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>逆向法巧学英语记录一</title>
      <link href="/2020/03/17/ni-xiang-fa-qiao-xue-ying-yu-ji-lu-yi/"/>
      <url>/2020/03/17/ni-xiang-fa-qiao-xue-ying-yu-ji-lu-yi/</url>
      
        <content type="html"><![CDATA[<p>首先我找到《VOA Special English Word Book》熟悉单词，然后使用的是<a href="https://learningenglish.voanews.com/z/1579这个网站，里面有入门级别的科技英语听力。" target="_blank" rel="noopener">https://learningenglish.voanews.com/z/1579这个网站，里面有入门级别的科技英语听力。</a></p><p>物质准备和教材</p><ul><li>手机（词典、语法）</li><li>记录本</li><li>两色圆珠笔</li><li>生词本（流水生词本、分类生词本）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>转载专栏栏——遇见</title>
      <link href="/2020/03/16/zhuan-zai-zhuan-lan-lan-yu-jian/"/>
      <url>/2020/03/16/zhuan-zai-zhuan-lan-lan-yu-jian/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/372605682/answer/1062436646" target="_blank" rel="noopener">假如没有考上 211 和 985，你会错过些什么？</a></p><p>不会错过什么。</p><p>　　这里我想举个自己的例子。</p><p>　　高三的某天，我对着一道非常简单的数学题思考了两个小时。我总是觉得，虽然这道题很简单，但我从来没有真的认识过它，我对它产生了和它的难度极不相称的好奇心。我反复地回溯自己的思维过程（元认知），一步步把我的思维过程写下来，终于明白了我的思维误区。我感到特别愉快，仿佛是那个走出洞穴被阳光照耀的囚犯。因为我意识到，会做这道题目只需要熟练的技巧，但从哲学上理解它并将其上升到理论高度是另一回事。从此以后，我将元认知这种习惯大量运用在做题中，我的数学成绩几乎一直保持着高分。</p><p>　　但是，发生这个过程需要什么？</p><p>　　首先，它需要不被打扰的、纯粹属于自己思考的两个小时。如果这两个小时我会被任何老师、同学或者为了迎接领导检查而打扫卫生的命令干扰，或者我被某个时间表命令、规划去进行这种思维活动，那也不可能产生这样深刻的认识。<strong>如果一个人的学习可以被安排的满满当当，那一定意味着该任务的认知复杂度很低。越是高创造力的任务，对宽松环境的要求就越高，因为人要在头脑中构建复杂的、漫长的逻辑链和思维体系，这需要大块的、没有压力的自由时间，而且不能强求（许多思想家的灵感就是在散步、睡眠、洗澡中取得的）。</strong>正如我在<a href="https://app.yinxiang.com/OutboundRedirect.action?dest=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F41365485%2Fanswer%2F932140362" target="_blank" rel="noopener">有哪些典型的「学生思维」？</a>中所说:</p><blockquote><p>　　中小学作息时间表是一种精确到分钟的计划表，它为每一个学生的时间提供了毋庸置疑的意义，在规定的时间单位里，每个人必须按照要求完成相关内容，休息和放松的时间被视为服务于上课的附属品（在中小学，拖堂、挤占自习课、体育课、美术课、音乐课的情况相当普遍），人们普遍认为，效率源于对时间进行更细密的划分。这也使得许多成绩优秀的学生即使走出校门很久，也特别难以忍受“荒废时间”，似乎“虚度时光”是特别严重的犯罪，而且在听到某个人高效完成了多少任务时，即使明知自己根本不需要那么做也会产生下意识的羞愧，所以人们痴迷于“一个月读20本书”、“3分钟了解XX”的神话，总要把每一分钟都纳入规划才能心安，以至于有人提出了“如果中国人人都不休息经济该多么发达”这样的蠢问题。然而当一个人越这样想时，他的拖延症反而会越强。因为那种从不拖延的“理想自我”本身就是虚假的，<strong>拖延的背后常常隐含着未能言说，渴望被发现的生命体验，人只有在无压力的自由时间里，才能让那些被阻断的体验浮现出来，从而更深的了解自己</strong>。因此，休息对人不仅是必要的，而且是具有本体意义的，人只有在自由时间里才是在“活着”的。何况，当一个人敢于为自己活着时，他才能理解让别人也为自己而活是多么重要，这时候他也才能具备真正的社会责任感。</p></blockquote><p>　　其次，它需要相当高的心理安全感，如果我时刻被排名低的恐惧包围着，我一定会把一切自由的时间都用来做一些无用功，比如反复地刷题以营造出我很努力的感觉。<strong>如果我时刻谨记老师所说的“要抓紧时间往下做”，那么我就不会对这样一道已经熟练的简单题目产生好奇，更不会将其上升到理论的高度。</strong>总之，我一定会做成果可见清晰的事情，而不是这种不知道能否成功、效果也难以预测的复杂思维活动。</p><p>　　第三，它需要一定的混乱。我在一个周围没有人注视我，只属于我自己的环境里思考，我可以任意摆放桌子上的纸张、书籍和笔，随意地在纸上涂涂画画，不用担心被任何人提醒这“不整齐”、“不规矩”。混乱、无用、自由散漫对于组织管理者来说也许是个麻烦，可对于创造者本身来说，却往往是灵感的来源。灌输式的培训只能教出低级的技能，而创造者必须确认自己在自己范围内拥有近乎<strong>独裁的自由，才能创作出好的作品。</strong></p><blockquote><p>　　福柯认为，通过对空间进行有计划的分割，可以使权力更加方便地对身体进行监视、改造，以服务于所规划的目标。中小学校园的教室往往沿着走廊一字排开，方便教师和巡视人员随时观察班内的纪律情况，部分学校连寝室门上也安了玻璃，且禁止学生阻挡。在教室内，高大的讲台居高临下地面对学生，教师可以非常方便地观察下面的一举一动，同时打断下面学生之间的联系。这些空间设计实际上使学生完全无法预测自己是否正在被监视，以及是否会被羞辱和惩罚，但又由于经常能觉察到自己想要开小差和不驯服的念头，因此出于恐惧，人自然会将外在的监视内化到心里，进行自我审查。久而久之，<strong>即使脱离了那个空间格局，只要人做出任何一点超越环境规范的事情并觉察到别人可能有一丝反感，就会唤起过去被羞辱的恐惧，并通过下意识地羞愧制止自己的行为。</strong>有人可能会说，只要考好成绩就能解决上述问题，但实际上没有几个学校会因为你成绩好就允许你违反纪律，更重要的是，你不可能永远保持好的成绩，这种解决方法其实是将自己陷入到更大的不确定性中。<br>　　空间格局不仅体现在大的建筑布局，也体现在对微观的身体活动的控制，权力关系有如毛细管渗透在校园内的一切领域，且常常与直指人心的道德评判挂钩。诸如桌椅要摆整齐，书要放在桌子的右上角，寝室要做到一二三条卫生标准等等，学校在解释这些规定时往往都带有一个道德的目的（培养学生与人相处的能力、自理能力、交往能力）。显然，没有做到这些规定的人不仅要接受明面的惩罚，还要接受群体对自己精神的窥探和监视——你是一个具有XX品质的人。在现实里，这些标准的执行是有非常大弹性的，它很大程度上取决于老师当时的心情，因此，学生服从的不是清晰透彻理性的律法，而是大人和权威们任性的、偶然的意志，<strong>这种利用“威不可测”所带来的恐惧使人进步的做法，实际上抹杀了人作为道德主体的自由选择权，也使遵守规则沦为一种奴性的服从。</strong>许多人始终无法忍受别人不喜欢自己所带来的焦虑，要么去讨好对方，要么彻底否定贬低对方，此类极端化行为的原因，几乎都可以追溯到中学阶段缺乏平等的人际关系，缺乏用于解释人与人差异的心理资源上。</p></blockquote><p>　　<strong>最重要的是，我要拥有我才是学习主体的意识。</strong>如果我认为进入重点高中、重点班级，拥有一个好的教师、集体氛围才是决定我成绩好坏的关键，那么当我实现了这一切后，我就不会有动力去做开创性的、需要一定承担责任和风险的探索性思维活动，因为既然外在因素是我人生的推动力，那它自然也应当为我的一切失败负责，我为什么要去冒险呢？假如我没有进入重点高中、重点班级，那么我就会把精力放在不断追求那些东西上面，或是<strong>不断地把自己的失败归因为没有获得那些“圣物”的照耀，陷入终生的“如果我当年考上了XX”的悔恨。</strong></p><p>　　同样的道理，如果我认为进入985或211，进入知名的大公司，能够在某个知名教授那里学习是决定我人生的最关键因素，那么我就没有勇气和他人不同，我会习惯性地走大多数人走的路，只会重复书上说过的话，因为这样是最安全的。</p><p>　　但是，安全与风险很多情况下是并存的。正如我在<a href="https://app.yinxiang.com/OutboundRedirect.action?dest=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F28667922%2Fanswer%2F893500039" target="_blank" rel="noopener">你对放弃高考准备去上海图书馆自修的男孩有怎样的建议？</a>这个回答中所说：<strong>当一个组织把你保护到最好，也就意味着它会扼制了你的潜力。</strong></p><blockquote><p>　　考入大学最大的意义在于作为敲门砖的文凭和人际关系，但这都是学习之外的事情。如果说上大学对于学习本身有什么益处的话，那就是大学可以通过排名、考试、奖项和毕业证等奖惩机制强制性地让人去上某些课，学某些知识，参加某些考试，大学还可以把同龄人组织到一个班级，一个寝室，通过互相监督、互相参考的方式让大家都不掉队不迷茫有事做，但这在我看来恰恰是弊端，<strong>当一个组织把你保护到最好，也就意味着它会扼制了你的潜力。</strong>它通过给予你一些虚妄的集体优越感（我是top2/7/10大学的人），让你觉得离开了它自己就什么都学不会。一个社会主流舆论对于自由选择、挣脱庇护的叛逆行为充满嘲讽，这无非意味着这个社会的中上流阶层精神还未走出幼年，只是“优秀的随波逐流者”罢了，他们的成功主要是靠无反思地依附和顺从体制，而非自主选择、自主规划取得的。</p></blockquote><p>　　所以，当一个人认为他的人生归根到底是可以被自己掌控时，他就不会对任何光荣的优秀的集体和组织感恩戴德，即使后者常常带来荣耀，他也能够看到它的不足和缺陷，因为他自信自己的精神配得上任何美好的东西，自信自己的理性能够进入一切事情，任何在精神上设定等级、壁垒、阶层的观念都是非人性的。</p><blockquote><p>　　保持不成熟状态是如此方便：如果有一本书代替我理解，一个精神导师指导我的良知，一个医生评判我的饮食等等，我就不需要做任何努力。只要金钱能够解决的，我就不需要思想；其他人很快就能替我做这些累人的工作。那些好心接过指导工作的守护者不久就发现，太多的人，不分性别，认为迈向成熟不仅困难重重而且相当危险。这些守护者起初为这些驯化了的动物所着迷，小心翼翼地防止其越雷池步。他们下一个策略就是展示危险，使其不敢尝试在没有帮助的情况下行走；危险实际上并不那么大，因为他们一定会在摔过几次跟头之后最终学会走路。但是，这样的例子具有恐吓性，通常会吓得他们不敢再尝试。<br>　　然而，让每一个个体找到脱离不成熟状态的路十分困难，不成熟状态已经成为他们的第二特征。他们甚至变得喜欢这种状态，随着时间的推移，真得再没有能力运用自己的理性，因为他从未被允许做出这种尝试。规章和程式这些合理使用或者说是误用他天资的机械工具，就是对他永久性不成熟状态的禁锢。倘若有人扔掉这些枷锁，他依然会不确定是否能够跃过甚至是最窄的壕沟，因为他不习惯这种自由运动。因此，只有少数人能够通过头脑训练成功地脱离这种不成熟状态，继续大胆前行。<br>　　相比之下，公众有更多的机会进行自我启蒙。倘若公众被赋予了自由，他们的自我启蒙的确几乎是不可避免的，因为总会有少数人独立思考，他们甚至存在于被指定为大众的守护者中间。这些守护者一旦扔掉不成熟状态的枷锁，就会传播尊重个人价值、尊重人人需有独立思考之责任的理念。这样做引人瞩目的一点是，如果之前被守护者锢入枷锁中的公众被唤醒，或许最终会迫使守护者自己留在枷锁中。宣传偏见是非常有害的，因为偏见最终会报复到最初宣扬它的人的身上。因此，公众只能慢慢获得启蒙。一场革命或许能够结束独裁暴政与强权压迫，但是它从不会带来真正的思想革命；取而代之的是新的偏见，如同它们所取代的旧观念一样，成为掌控缺乏思想自由的大众的枷锁。<br>　　<strong>对于这种启蒙而言，它所需要的只是自由，而这种自由是所有自由形式中最没有恶意的，即在所有事情上公开运用理性的自由。</strong><br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　<strong>——《什么是启蒙》</strong></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学英语之Anki最小化积累法</title>
      <link href="/2020/03/16/ni-xiang-fa-qiao-xue-ying-yu-zhi-anki-zui-xiao-hua-ji-lei-fa/"/>
      <url>/2020/03/16/ni-xiang-fa-qiao-xue-ying-yu-zhi-anki-zui-xiao-hua-ji-lei-fa/</url>
      
        <content type="html"><![CDATA[<p>时代已变，逆向法很好用，但要适应新时代。</p><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h3 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h3><p>【必备】</p><p>手机：Anki</p><p>纸笔：到处可见的A4纸和0.5毫米铅笔</p><p>【建议】</p><p>电脑端Anki</p><p>IOS端Anki</p><p>【操作】</p><p>麦克米伦7000</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>英语逆向学习法全书</title>
      <link href="/2020/03/14/ying-yu-ni-xiang-xue-xi-fa-quan-shu/"/>
      <url>/2020/03/14/ying-yu-ni-xiang-xue-xi-fa-quan-shu/</url>
      
        <content type="html"><![CDATA[<p>英语学习逆向法</p><p>钟道隆 著</p><p>第一章  我怎样学会英语<br>1.1哑巴英语的尴尬<br>　　我上中学时没有学过音标，基本上是跟着教师念，对不对不得， 而知。有时会闹出笑话，例如dining一room中的第一个i，不发 [i]，而发[ai]，但是教师读成[i]，我们也就跟着读错了，后来才纠 正过来。上大学以后改学俄语，大学毕业以后又自学过一些英语， 能阅读有关的专业书籍。但是从来没有学过“听”和“说”，基本上 是“哑巴英语”。</p><p>　　1979年45岁时第一次随团去法国和德国参观。当时我能阅 读自己熟悉的专业书刊，算是代表团中英语水平比较高的。但一到 外国，除了一般的问候语以外几乎都听不懂，说不了，所以根本听 不懂技术讲解。对于熟悉的专业书面材料，如果是用大写字母写成 的说明，一时还反应不过来，需要在脑子中翻译成小写才看得懂。 代表团团长还不时地鼓励我“胆子大一些”。其实哪里是什么胆子 大小的问题，听不懂，说不了，看不懂，哪里来的胆子？ 　　</p><p>　　在国外期间，我与每一个不会外语的人一样，口袋里装着一个 纸条，上写“我住在XXX旅馆，请把我送回去。”以防一旦走失时 使用。我当时是某设计院总工程师，高级工程师，看着这样的纸条， 心里真有一种说不出的被侮辱感，“我这个中国高级工程师和总工 程师只有这样的水平，与文盲差不多，外国人怎么会看得起我们？” 发愤之心油然而生，回国以后下决心发奋学习，努力提高英语口语能力。</p><p>1.2自学一年成翻译<br>　　学英语听和说的最好方法是生活在英语环境中，天天听英语， 说英语。但是我没有这样的条件。没有条件可以创造条件，在半导 体收录机如此普及的今天，听英语录音就是一个切实可行的办法。 我当时学习的劲头很大，先后学习过The Man Who Escape《逃 跑的人》、English for Today一Book Four：The Changing Tec- nology《今日英语——第四册：日新月异的科技》、《英语900句》等 书和录音带。学的时候对着书看，似乎没有什么不明白的地方。但 一年左右下来，花的功夫不少，收获却不大，英语水平（听、说和快 速阅读能力等）并没有什么明显的提高，好像碰到了一个很不容易 逾越的壁垒。在这种情况下，我很苦闷和仿惶：进一步学习提高吧， 好像困难重重，难以取得什么突破性的进展；但是放下不学吧，工 作中确实需要，而且我当时单身一人在沈阳，业余时间没有什么事 可做，所以还是想学英语。但是怎么学呢？请教一位专职英语翻译， 他说，“我们在外语学院专门学了好几年，也不是都能听懂，你已经 45岁了，恐怕困难更多。”听了他的这番话，使我认识到学习英语 的艰巨性，打消了急于求成的思想，做好了长期作战的准备。一天， 我突然回想起我听懂京戏唱词的过程：40年代未从南方到了北京 以后，觉得京戏很好听，可是听不懂，不知道哼哼呀呀唱的什么。60 年代初我与一位京戏迷住在一起，他有很多京戏唱片。我问他怎样 才能听懂京戏，他说京戏很程式化，只要一字一字地听懂几出就好 办了。此后只要一放唱片，他就一句一句地告诉我唱的是什么词。</p><p>　　就这样，我慢慢地听懂了几出戏，此后再去听别的果然也能听懂 了。我不是也可以用这种方法去学习英语吗？但是，从哪里起步呢？ 我的听力很差，语速稍快一点的根本听不懂，只能去听专门为初学 英语者设计的慢速英语。说干就干，当晚就开始一词一词、一句一 句听写慢速英语。这一天是1980年1月31日，是很值得我回忆 的，因为从此我就走上了踏踏实实地自学英语的成功之路，而且从 未中断过。在刚开始听写的时候，虽然我已经认得不少词，但由于 不会念，听到了也不知道是什么词，很难继续学下去。如何解决这 个问题？我果断地停止了听写录音带，改为跟学电台的“初级广播 英语”，从最基础的英语发音学起，足足学了五个月，把自己的基础 英语知识比较彻底地重新加固了一下。真是“磨刀不误砍柴工”，此 后再去听原来的录音就觉得不是很困难了。现在回想起来，这一步 是很值得的，如果没有这五个月的退却，就不可能有我今天的英语 水平。</p><p>　　听写慢速英语，经历了起步、巩固和提高三个阶段，用了一年 半左右的时间，英语水平有了一定的提高，可以完成技术讲解中的 口译任务。到此我并没有停步，而是继续听写各种各样题材的 Standard English，尤其是利用车祸后卧床不起的三个月时间进 行系统的听写，听力得到了明显的提高。</p><p>　　对于水平比较高的人来说，慢速英语实在是太容易了。正如有 的书的作者所说的“只要每天听上5分钟，就可以听懂”，或者认 为“只要会1500个最基本的英语单词就可以听懂”。其实并没有 这么简单。这就是所谓的“会者不难，难者不会”。我刚开始听写时， 不但一条新闻听不到底，连一句话也听不到底。不知道一句话里有 多少个词，每个词都是什么音，由什么字母拼写而成。所以只得一 边听一边把听懂了的词写出来，听写不出来就先空着，用红铅笔标 出来。这样，10分钟的国际新闻，花十几个小时都不一定能听写出 来。</p><p>　　有的人认为我之所以能坚持下来，是因为对英语有特殊的兴 趣，感到学习英语是一种享受。现在我对英语确实有特别浓厚的兴 趣，深深地感到学习英语是一种享受。但在刚开始学习的时候却完 全相反，感到学习英语是一种沉重的负担。当时的苦闷是难以形容 的——一个人坐在室内，面对收录机，一连几个小时，翻来覆去地 进带倒带，十几遍也不一定能听得懂一个词一句话，实在是枯燥极 了！有时真想把收录机砸了，不听了！但一想到“水滴石穿”、“只要 功夫深，铁柱磨成针”和“楔而不舍，金石可楼”等，又重新鼓起学习 劲头，坚持了下来。现在回想起来，如果当时知难而退，半途而废的 话，是不可能取得成功的。</p><p>　　着时间的推移，我的英语水平也逐步提高了。我在自学英语 过程中经常向一位翻译请教。刚一开始，有了听不懂的，只要打电 话把听不懂的词的前后词告诉他，他就能立即告诉我中间应该是 什么词。一听果然不错，我心中实在佩服极了，觉得“人家大学英 语本科毕业的就是不一样，就是行”。心中暗暗地想，要是我能达到 他这样的水平该有多好。过了一段时间，大约十个月后，我再听不 懂，他电话里就回答不了了，必须拿录音带去听才行，但仍然是听 上一两遍就立即能告诉我应该是什么。后来我再继续听Standard English，有了问题去问时，他就不是立即能回答了，要与我一起 讨论，一起猜了。又如在我完成了起步阶段的学习任务以后正好到 北京参加一次技术交流，来的人就是原来我们去国外访问时给我 们讲解的人，但是这一次我基本上能听懂他们的讲解。休息时我问 他们，是不是因为到了中国，才故意把讲话的速度放慢了？他们笑 着回答说：“我们一直是用同一个语速讲的，只不过是你的听力提 高了，觉得我们讲得慢了。”从这些经历中我看到了自己的进步。</p><p>　　由于英语水平的提高，技术讲座中翻译译得对不对我也能作 出判断了。有时翻译与我的理解不一致，在场的外籍华人一般情况 下都说我的理解对（当然这里起主要作用的是我懂专业，其实专 业翻译们的英语水平比我高多了）。这种情况重复多了，中国电子 设备系统工程公司总经理1982年初访问德国前提出让我当翻 译。这是我万万没有想到的，我回答说干不了。但他坚持说我干得 了，并给了我很多鼓励。于是我进行了详细的准备，拟定了一些情 景对话。如：一到海关，可能问什么，怎么回答，参观时可能会有什 么问题，怎么翻译等等，并且把准备好的稿子对着录音机念，再放 出来给自己听，看像不像。尽管进行了这样准备，一到国外，实际对 话时完全不是那么一回事，不是听不懂就是说不了，困难极了。当 时我手里随时拿着一个本子，有听不懂的，说不了的就立即记下 来，晚上回到旅馆，再累也要查词典，看会话手册，一定要把白天不 明白的地方搞懂了以后才休息。这件事情对我是一个转折，大大地 增加了我的自信心，确信自己是能学会英语的。能承担口译任务以 后我仍然一点也不放松自学，每天仍坚持学习英语，以做到“曲不 离口”、“常学常新”。有时别人间我：“你已经会说会听了，就行了， 为什么还花这么多时间学英语？”我只有回答说：“我喜欢英语”。这 也是真的，比方说春节的时候，家里别的人看春节电视节目一直到 半夜一两点，我就一直学习英语到半夜一两点。</p><p>　　与学其他知识一样，自学英语必须要有一丝不苟和精益求精 的学习精神，碰到问题要打破砂锅问到底，不达目的决不罢休，只 要搞不懂就一直要挂在心上，一有机会就要学要问。对于学到的东 西决不要满足于一知半解，而要深入钻研，把边边角角的有关知识 都搞清楚，只有这样才会如同小学生学语文一样，每天都能学到新 的词，掌握的英语知识才会越来越多，水平才会越来越高。下面举 几个典型的例子。</p><p>　　一次听到了Khmer Rouge，其中Rouge一词听不懂。两年后 一次听一篇有关美国妇女化妆的文章，其中提到rouge（口红），这 才恍然大悟，原来是“红色高棉”，存在两年左右的问题终于有了 答案。</p><p>　　Condition一词与医学有关的解释一般只作“条件和状态”讲， 但在形容人有心脏病时用heart condition，觉得解释成“心脏条件 和状态”都不太通顺。后来从一本新出版的Longman词典中，才<br>知道这个词可以直接作“病”解。</p><p>　　听有关菲律宾反对党领袖阿基诺被刺的消息时，不断地听到 tar mac一词，根据发音找不着，后来请教一美国工程师，才知道是 “柏油碎石路”，是从tar macadam一词简化而来的。 又如一次录下</p><p>The peace talks between lran and lraq wentinto square one这样一句话，根据上下文推测出是两伊和谈没有 取得什么进展的意思，但是手头的词典上没有square one这个词 组，无法确切得知是否听写对了，因此见人就问。后来拿着录音给 一个从加拿大回来的博士听，他肯定了我听写的是对的。我并没有 到此为止，到处找词典，最后终于在The Penguin Dictionary of English ldioms上找到了如下有关back to square one的解释：</p><p>Back to square one一back to the very beginning of some task or enterprise as a result of a setback. The allusion is to the game of Ludo when a player is sent to square one if he lands on the wrong square.</p><p>这样，对于这个词的来历就知道了。知道了就有用，China Daily l990年7月7日有一个标题是这样写的：</p><p>Back to square one on talks over Northern lreland</p><p>　　又如一次从慢速英语有关经济消息的节目中听写出deriva- tives一词，查词典，其解释为“衍生的，派生的；导数”，找不到与经 济有关的解释，不知道指的是什么。直到后来英国巴林银行的职员 利森案发后，各种新闻媒介上有关derivatives的报导增多，才知外汇或 汇率以及股票或股价指数等现货市场衍生出来的金融商品，主要 有期货futures、期权option trading和掉期swap种类型。</p><p>　　我比较注意总结学习经验，每隔一段时间要回忆一下有什么 经验教训和体会。我采用的学习方法没有有形的课本，一开始只有 声音，必须“听、写、说、背、想”五法并举，才能搞清楚录音说的是什 么，等到全部录音都听写出来了，才有一个有形的课本，与通常的 从有形的课本人手的“正向”方法不同，是“逆向”进行的，故名逆向 法。采用逆向法自学英语有很多优点。把经验和体会写出来就是 已经出版发行的《慢速英语入门》、《科技英语听力自学要诀》、《英 语学习逆向法》、《听力过关技巧》以及《英语新闻广播常用词语选 编》等五本书。</p><p>　　从此以后，我经常给别人讲如何学习英语，尤其是1990年以 来，经常辅导各个层次的人学习英语，对他们学习碰到的各种问题 有了进一步的了解，对逆向法优点的体会也就更深刻了。</p><p>1.3 我是在国内学会的</p><p>　　有的人认为我学会英语是因为经常出国。其实我是学会了英 语才出国的，不是出国以后才学会英语的。当然，在国外，有很好的 学习英语的客观条件和学好英语的可能性。但把可能性转换成现 实性，充分利用有利条件，还是要通过自己的努力。不少人一次一 次地出国，但就是没有学会英语。我第二次出国就当翻译了。其实 就我本人学到英语知识的多少来说，有时在国内每天学的英语知 识比在国外还多。因为在国外，有不少事务性的工作要做，尤其是 作为翻译出去，事务性工作就更多，没有更多的时间坐下来学习英 语。而在国内，一天下来学上五六个小时，可以学习不少英语知识。 一位同事以前认为我是通过出国才学会英语的，后来他和我一起 去荷兰，看到我在国外也是每天坚持听录音，才说：“原来你是这样 学会英语的。”</p><p>　　有的人只看到我现在的英语水平比较高这个结果，不了解这 个结果是通过怎样的艰苦努力才达到的。于是很容易认为我聪明， 记忆力特别好，所以学会了英语。其实记忆力不是天生的，而是后 天锻炼得到的一种能力。关于我是怎样通过刻苦努力才学会英语 的，我可以举出三个人的话来说明这一点。一位是我在沈阳工作时 的领导，看到我废寝忘食日复一日地苦学英语，对我说：“像你这样 学，是要感动上帝的”。另一位是中国电子设备系统工程公司的一 位工作人员，她每天上班路过我办公室时总是看到我在听写，很有 感触他说：“我没有见过一个像你这样用功学英语的人”。最后一位 就是我的妻子，看见我一有空就学英语，录音机哇啦哇啦地响个不 停，说：“你怎么这么笨，学了这么长的时间还学不会？”其实别人 说我聪明不是一件很光彩的事吗？为什么我不顺着说下去：“是 呀！对我来说学习英语是一件很容易的事，有空的时候听听录音 带，写一写，不知不觉就学会了”，从而使别人更认为自己确实是够 聪明的呢？因为事实不是那么一回事。有一位看了我《慢速英语人 门》初槁的人对我说：“你不应该把自学英语的实际困难如实地写 出来，而应该把它说得容易一些，这样读者才有信心来学”。我没有 采纳他的意见，因为知识的问题是一个科学的问题，来不得半点虚 假。我要如实地把自学的困难说够，以便使读者有充分的思想准 备。</p><p>　　而且实践证明，对困难估计得多一些比估计得少一些有利。对 困难估计得多一些，就会脚踏实地，不会怠于求成。对困难估计不 足就会企图在短期内速成，结果半途而废。为了学会英语，我下的 功夫是很大的。下面举几个具体的例子：坚持每天听写A4的纸 20页，不达目的绝不休止，晚上开会晚了也要补上。从1980年1 月31日到1983年2月我调到北京为止，三年内写了一柜子的听 写记录，用去了圆珠笔芯一把（当时我把用完了的笔芯插在笔筒 里，要看看用了多少就能学会英语），听坏电子管录音机9部，半 导体收录机3部，单放机4部，翻坏词典两本（因为我不断地在上 面写和画）。所以我经常对别人说：“词词皆辛苦”。这是我发自内 心的话，并不是什么夸大之词。</p><p>1.4刚起步时水平并不高<br>　　有人认为我起步听写时的英语水平已经很高了，所以学会了。 其实并不是这样，1980年1月31日我听写的第一条新闻记录稿 如下（括弧内为听不懂的词）：</p><p>Iran’s foreign minister has condemned Canada for helping six American （diplomats ） escape from lran. He said the action violated international law and may lead to （worse） （treatment）for the fifty American （hostages） remaining in Tehran. The foreign minister warned that Canada would have to pay for its action. The six American （diplomats )（fled ） United States，embassy in Tehran when lranian （militants） （seized） the building on December 4th． The six （diplomats） hid in Canadian embassy for twelve weeks and left lran a few days ago by using Canadian passports， They returned to the United States on Wednesday. In Washington， the state department （called again on） Iran to release the remaining American hostages in Tehran. It said they must be freed before any effort can be made to （improve ） the（relations ） between the United States and lran， The hostages have been held for eighty一eight days.</p><p>一共只有10来行的记录中，属于生词就有：</p><p>condemn、diplomat、violate、treatment、 hostage、 fled、em- bassy、militant、seize等九个。</p><p>写出来认得但是听不出来的还有：</p><p>worse、call on、improve、relation等四处。</p><p>　　由此可见我刚起步时的英语水平是不高的，恐怕现在大部分 中学和大学毕业的人都要比我当时的水平高多了。</p><p>1.5见缝插针<br>　　学习英语要花大量的时间，到哪里去找这么多的时间呢？鲁迅 曾经说过：“时间就像海绵里的水，只要愿挤，总是有的”，用我们通 常的口头语来说就是要“见缝插针”。下面简单介绍一下在各个不 同情况下我是如何“见缝插针”，挤时间学习英语的。在沈阳工作时 我是单身一人，没有家务负担，比较有利于学习。刚开始的起步阶 段，必需“大剂量”地学，用很多时间。所以一般我都提前一个多小 时起床，早饭前学两个小时左右，晚上再学三四个小时，这样每天 至少可以学五六个小时。星期日照常提前起床，从五点半学到八点 半吃第一顿饭，学三个小时。饭后洗澡，九点半开始，一直学到下午 四点半吃第二顿饭为止（北方单位节假日一般只吃两顿饭），晚饭 后活动一个多小时到七点左右，然后再学到十一点，这样总计可以 学习十几小时；其他节假日放几天假就学几天。比方说春节，就一 连学上四天或五天。每个人的具体情况和想要达到的英语水平不 同，并不一定非得每天学这么长时间不可。不过学习的收获与你付 出的劳动成正比。尤其是在起步阶段，每天起码要学三个小时以 上，以期尽快地登上一个台阶。在北京工作期间，我不住在工作单 位，每天从家到办公室，单程需乘70分钟左右的公共汽车，来去 约需三小时，业务工作又比在沈阳时忙多了，怎么办？我很快就“自 适应”了，找到了学习英语的时间。首先是早晨五点二十分起床后， 不论是洗漱、做早饭还是吃早饭，都听录音，上班路上还是听录音， 提前一小时到办公室以后，立即查听不明白的词，并把听明白的内 容输入电脑。这样从起床到上班的两个半小时内，一直没有离开过 英语，起码可以顶一个小时吧！下班回来路上还是听录音，吃了晚 饭以后从八点到十点半再学两个半小时，这样一天可以保证能学 三个小时以上。星期天与节假日与在沈阳单身时一样，学十几个小 时。</p><p>　　1990年单身在南京工作，又有了学习英语的大好条件，在近四 年时间里，把大部分业余时间用在自学和辅导别人学习英语上，既 提高了英语水平，又积累了一定的教学经验。 1994年初退休以后， 学习英语的时间更多了，每天听（录）两个小时的英语广播，有听不 懂的地方就逐词逐句地抠，不但提高了英语水平和开阔了眼界，也 为退休生活增加了不少乐趣。</p><p>　　“见缝插针”，就是要把一般人看不起限的无所事事的导碎时 间都利用起来。例如等车、开会或等待某人到来前的几分钟十几分 钟、排队购物等。根据记忆心理学的原理，对于外语等以机械记忆 为主的内容，及时地利用零碎时间进行复习，效果是很好的。</p><p>　　“见缝插针”还要能“自适应（adaptive）”，也就是要有使自己 适合客观环境的能力。随着学习的深入和水平的提高，英语学习也 就会慢慢地成为自己生活中不可缺少的一项内容，就会感到学习 英语是一种乐趣和享受，就会把学习英语的事时时挂在心上，一天 不学就好像缺少点什么。有了这种心懦，就再也不会强调客观条件 了，碰到再不利的客观条件，也不怒天尤人，而会积极地去适应它， 利用它，使之成为找到新学习途径的催化剂，登上新水平的转折 点。例如我1985年不幸遭遇严重车祸，右腿膜骨骨折，石膏一直 打到大腿根，动弹不得，一天到晚在床上躺着，长达三个月左右。面 对这种情况，是急燥埋怨呢？还是安心疗养并利用卧床不起的时间 学习英语充实自己呢？我选择了后者。开始时只听不写，过了几天， 觉得收获不大，要写又坐不起来。怎么办？我试着在床尾系一背包 带，拉着它就能坐起来，垫上一本厚词典就可以写了。这样每天就 能听写十几个小时，把每天两个多小时的英语广播全部听懂并写 了出来。有听不懂的，就打电话请教翻译。结果英语水平又大大地 提高了一步。痊愈后与外国人会谈时他们都惊奇地问我是不是在 这三个月期间去外语学院进修过。车祸对我来说确实是一场灾难， 但却又成了我学习英语的大好时机，所以我把这三个月的听写记 录命名为“灾难的结果(The Outcome of a Disaster)”。痊愈后乘 公共汽车时再不敢戴着耳机听录音学英语了，几天下来，又觉得每 天在路上的三个来小时白白地过去太可惜了，一定要想办法把它 利用起来，不久我又找到了新的学习英语的途径。公共汽车上其他 乘客用小收音机听汉语新闻广播，我就试着把汉语的新闻逆译回 英语去，碰到译不出来的词句，到家或办公室以后立即查汉英词 典。这样做上一段时间，不但时间得到了有效的利用，而且还感到 是一种有其独特效果的英语学习方法。</p><p>　　出差往往是很多人中断自学的理由，对于我来说却又是自学 英语的大好时机。首先是充分利用往返路上大量的乘车时间。出 发之前，我就准备好足够的电池和录音带，供路上听，碰到听不懂 的地方，车上不便于查词典，就记下磁带的大致位置，到目的地以 后再听再查。如果是去开会的话，只要自己不是会议组织者，就一 定比在单位时还要空，只要不沉溺于打扑克等一类活动，就一定会 有更多的时间学习英语。</p><p>　　我们不要低估利用业余时间和节假日学习产生的效果，积少 成多，一天按两个小时计算，一年下来不就是六七百小时吗，不就 相当于中学的全部英语教学时数的总和吗？几年下来，不就相当于 上了大学了吗？</p><p>　　“见缝插针”的另一种重要途径就是把英语学习渗透到日常生 活中去，不拘一格，处处学，事事学。只要有了学习英语的强烈愿望 和浓厚兴起，工作和日常生活的各个方面都可以成为英语学习的 第二课堂。通过这种方式学会的英语与一些特定的环境相联系，因 而记得快，记得牢，效果特别好。以下是我英语学习第二课堂的一 些实例。</p><p>（1）工作中需要看参考资料时，只要有可能，我就强迫自己看 英语的，不看汉语的，以不断地提高自己的英语熟练程度。</p><p>（2）练习用英语写日记。为了学习英语，我从1981年开始练 习用英语写日记，尽管写出来的日记如同小学生的日记一样，全是 流水帐，但从学习英语的角度看还是有收获的。在记的过程中一定 会碰到不少自己不会的英语单词和表达方式，通过查汉英词典或 请教别人得到解决，从而可以学会很多英语知识。</p><p>（3）看China Daily是一条学习英语的很好途径，尤其是可以 了解新的动态和学会一些新出现的英语单词。国际形势在不断地 发展，科学技术日新月异，新的英语单词层出不穷，看老的词典和 书都不能学到这些新的英语知识，而在china Daily上却都有及 时报导。</p><p>（4）向专职翻译学习。除了有问题向他们请教外，参加技术交： 流时我很用心把他们的翻译与我自己的默译进行对比，看看他们 是怎样翻译的，并立即记在本子上。因为我没有系统地学过英语口 语，说出来的话不是有错就是照着书本上背的，很不口语化。而翻 译则不同，他们的用语规范，口语化，注意听他们翻译，可以学到很 多口语表达方式。</p><p>同样，与外国人进行技术交流时，不论自己是否充当翻译，只 要有了听不懂的地方，就应请对方重复或讲解，以求能学到更多的 英语，千万不要不懂装懂。</p><p>（5）通过看电视学习英语。例如看新闻联播节目的国际新闻时 经常可以在电视画面上见到一些英语单词和标语口号，要很好地 注意学习，不明白立即查词典，一次看不清记不住，重播时再看再 记；再没有把握，看English Service时再看再记，这样一定可以学 到很多英语单词。</p><p>（6）走在路上看到各种英语广告和标语，购物时带来的英语说 明书等都要认真地看，看不懂就查词典。</p><p>（7）即使辅导别人学英语，也可以从中学到不少英语知识。例 如我辅导儿子学习初中英语，也学到了不少东西。此外还可以从初 学者学习中碰到的难点和提出的问题中受到很多启发，我书中不 少内容就是这样积累起来的。例如“听写结果对吗”一节就是一位 同事向我提出来的：“没有人指导，光靠自己一个人听写，不会听歪 吗？”我觉得他的问题提得好，就不断地思考并写出了专门的一节。</p><p>　　只要坚持不懈地这样去学，英语水平一定会有很大的提高。有 时可能会使别人感到惊讶：为什么自学竟能学到这个程度！例如 一次与外国人进行技术谈判后他们起草了一个会议纪要给我看， 我看后发现了一些拼写和语法上的差错，他们感到不可理解：为 什么钟先生的英语水平这么高！我回答说我的英语水平并不高，只 不过是学习过程中坚持一丝不苟，精益求精罢了。随即我举了下面 的例子：我在北京陪一个外国人游览长城，他非常熟悉长城的情 况，长城的兴建和整修过程，多长多宽等等，说来头头是道，而作为 中国人的我却不能准确他说出来。这种事看起来很奇怪，其实很正 常。因为我从小就知道长城，没有把它当回事，而外国人在去游览 之前，详细阅读了有关长城的各种小册子，所以就了如指掌。学习 英语也是这样，没有机会进外语学校学习的人也是可以学会的。如 果在学习过程中坚持一丝不苟，精益求精，甚至还有可能精通某一 点，这就是“入门既不难，深造也是办得到的，只要善于学习，善于 用心罢了（毛泽东：《中国革命战争的战略问题》）”的道理。</p><p>1.6乐在英语中<br>　　有人在了解了我的自学过程以后认为这样自学大苦了，对身 体不好。其实不少人在玩上是肯下苦功夫的，有时真到了废寝忘食 的地步。我自己也是一样，在下决心自学英语以前，晚上业余时间 经常打扑克和下棋，一玩就是好几个小时，过后躺在床上脑子安静 不下来，久久不能人睡，节假日有时甚至玩通宵。现在回想起来，不 知道虚度了多少宝贵的大好时光。说到对身体的伤害，由于睡眠不 足，第二天上班时头脑昏昏沉沉。玩的时候有的人抽烟一支接着一 支，室内烟雾迷漫，即使对于不抽烟的人来说也不知道被动地吸入 了多少烟，对身体的伤害是可想而知的。这样的业余生活又是多么 的空虚和无聊！而利用业余时间进行自学，能使自己不断地学到新 的知识，激发起更强的求知欲，催人上进，因而是很有意义的。用听 写的方法学习英语，由于注意力高度集中，但却又不需要绞尽脑汁 地像解数学难题那样地去冥思苦索，其效果很像书法与钓鱼，对身 体还有一定的好处。有时一天紧张工作过后，脑子昏昏沉沉，躺在 床上很长时间不能入睡。但是如果临睡前能听上一段时间的英语 录音后再休息，则可以很快入睡。此外，生活和工作中不免要碰到 一些不愉快或苦恼的事，心中闷闷不乐或忿忿不平，想摆脱也摆脱 不了。此时也可以用听写英语录音的办法去把自己的注意力集中 在英语上，从而摆脱苦恼的事。所有这些，都是有利于身体健康的。</p><p>　　我们从现实生活中可以看到一些没有奋斗目标，一天到晚无所事 事的人，过一天算一天，觉得日子过得很慢，甚至厌倦生活。相反， 如果一个人有明确的奋斗目标，每时每刻都感到有干不完的事在 等着，就会感到生活很充实，而且每干一件事情都能看到自己的劳 动成果，都能享受到胜利的喜悦，对自己和未来一定会充满信心。 人的一生很像体育竞赛，创造出新的记录只是一瞬间的事，但在这 一瞬间的后面都积蓄着长时间的艰苦努力。</p><p>　　有的人认为我这样一天到晚苦学苦钻英语，生活也大单调和 太枯燥无味了。学习英语，尤其是自学，刚开始的时候确实是很单 调和枯燥无味的，是一件“苦差事”和“负担”，很难说是一种乐趣和 享受。但只要踏踏实实一步一步地坚持下去，付出一分努力，必然 会有一分收获，英语水平就会有一分的提高。多一分英语水平，就 会多一分用途，多一分用途就会多一分喜悦。从基本上听不懂开 始，不断进步——通过听写可以基本听懂、只听不写也能听懂、一 边干活一边听也能懂、脑子里从英语到汉语的翻译过程渐渐少了、 能直接从英语听懂了、可以听懂各种特写节目了、可以听懂Standard English了、可以与外国人自由交谈了、可以承当口译任务了 等等，每前进一步都有一层新的喜悦。如果说在起步阶段苦苦地听 写录音时是你为英语服务，是负担和苦恼的话，那么当你掌握了英 语并在工作和生活中应用英语时就是英语为你服务，是一种乐趣 和享受了，它为你打开了一个新的了解世界的窗口，心里一定会有 一种说不出的喜悦，过去的辛劳都没有白费，都有了报偿。</p><p>　　在改革开放的今天，英语的用途是与熟练程度成正比的。比方 说到了能如同看汉语资料一样地看英语资料的时候，你就能及时 地、准确地了解国外的动态；到了能听能说的时候，你所得到的信 息绝不是需要假口假耳于人才能与外国人交流思想的时候所能比 拟的。下面以笔者在某设备引进过程中对遥测方案的改进为例来 说明这一点。这个设备是某公司制造的，它的遥测系统只能监视 1000公里左右，而我们要求能监视2000公里左右。为此，我们要 求该公司专门研制一套新的遥测系统，研制费用为五万美元左右， 并据此正式签订了合同。所有参加谈判的人都同意这样做，好像除 此没有别的办法。但在合同生效后的一次技术会谈中，我兼任翻 译，该公司的人员在讲解遥测系统时，无意中提到每一部机器上有 一个每秒闪一次的信号。我问这个信号有什么用，他回答说，这个 信号是本站告警用的，与遥测系统无关。但我心中产生了利用这个 信号的念头，并抓住不放，提出用这个一秒一中断的信号去控制遥 测信号，从而使原来只能监视1000公里左右的系统扩展成能监 视2000公里。对方的技术人员一开始认为他们的设备已经在世 界上安装了几万公里了，没有听说过可以这样做的。他们拿来了一 大堆资料并找来了研究所所长和我讨论，最后被我说服，从合同中 去掉了这笔研制费，一下子就为国家节省了五万多美元。从抓住对 方说的机器上有一秒一中断的一个信号到双方一致同意从合同中 取消这个研制项目，前后不到两个小时。在这个过程中，我的英语 水平起了决定性的作用。就技术本身而言，我提出来以后中方不少 人马上就明白了。但是他们英语水平低，听不懂也说不了，无法得 知有这个信号，更谈不上去利用它了。类似的问题通过不懂技术的 翻译也是很难发现和解决的，因为对方是在无意中提到这个信号 的，它确实与要讨论的遥测系统无关，一般翻译不一定抓得住。即 使抓住了翻给懂技术的人听，技术人员再提出利用它的可能性与 对方探讨的话，双方要讨论的就是一个没有现成先例的带有一定 创新程度的问题了，对于不懂技术的专职翻译来说，很难准确地表 达，几个来回以后，对方一回答说不可能，也就只能作罢了。现在， 按照我意见修改的设备已经很顺利地投入使用了。每当我忆及此 事，心中总有一种满足感：“往日的辛劳并没有白费，我再也不是口 袋里装纸条的中国高级工程师了”。所以每当有人间我：“你这样长 年累月苦苦地学英语，值得吗？”，我总是引用这个例子回答说： “仅就一次引进工作能为国家节省这么多外汇，我花再长的时间去学 外语都是值得的，何况外语的用途还远远不止这一点呢！”</p><p>1.7收获英语外</p><p>　　学会了英语，收获当然首先体现在英语本身的用途上。掌握了 英语，就是掌握了走向世界和通向高科技的最有用的工具，仿佛使 自己多了一双眼睛和一副耳朵，可以直接接受国外的新技术和新 知识，视野和业务能力会达到一个新的境界。但是收获还表现在英 语外，例如：</p><p>（1）极大地提高了自信心。我45岁时开始学习英语口语，困 难很多，摆在我面前有两种可能性：不是我打败困难，学会英语， 就是困难打败我，放弃英语。当听到了各种“年纪大了，学不会”的 议论时，当时我的信心并不是很大的，是抱着试试看的态度去学 的。由于我承认困难，不求速成，扎扎实实地学，终于学会了。英语 水平进步之快，有时连我自己都感到难以相信。一开始时我只企求 能听懂英语技术讲解，根本没有能说和当翻译的奢望，但是后来居 然达到了。这就极大地提高了我的自信心，树立起“我并不老，新东 西完全可以学会”的信心。有了这样的信心，才能在52岁以后学 会并熟练掌握电脑，57岁成功地研究了记忆，总结写出《好记性的 诀窍》、《巧用电脑打字机》、《巧用电脑写作》和《巧学巧用五笔字 型》等书。反过来，如果当时下的功夫不够，没有学会英语，其后果 将是不可设想的：首先是没有学会英语，掌握不了通向世界和高科 技的工具，因而也就不可能跟上飞速发展的改革开放形势。更可怕 的会从此产生“老了，记忆力减退了，新的内容学不会了”等消极思 想。一旦此种悲观的思想在自己脑子里占了主导地位，就会停止学 习新的知识，就不可能有以后学电脑、研究记忆和写作方面的成 功。人们经常说“一步领先，步步领先”，“一步落后，步步落后”，“成 功与不成功之间往往只差一步”等等，是有一定道理的。</p><p>（2）在总结出英语学习逆向法与出版有关这种方法的书籍过 程中，极大地提高了自己总结归纳的能力，写作与表达的能力。</p><p>（3）掌握了英语以后，可以指导别人学习。十几年来，每当看到 有人在我辅导下，英语水平迅速提高时，总感到由衷的高兴。应该 说这是另一种收获，另一番享受。</p><p>第二章 一定要学会英语<br>　　很多人苦苦的三番五次学英语，但是始终没有达到预期目的。 形成这种局面的原因是多方面的，但是从学习者本身找原因，无非 是决心不大、信心不足和方法不当。</p><p>2.1a 英语的用途[1]</p><p>　　学习英语决心的大小与对英语用途的认识有关。如果认为“不 出国用什么英语”、“中文资料都看不过来，哪里还有时间看英语资 料”和“周围的人大都不会英语，自己不会无所谓”等等，就不可能 重视英语学习，学生有了这种思想，就会勉强应付，以通过考试作 为学习目标，考试结束，英语学习也随之结束；在职人员有了这种 思想，虽然在形势影响下也可能学习英语，但碰到一点困难，就会 停止或放弃。如果认识到英语是我们了解世界和让世界了解中国 必不可少的工具，就会下决心一定要学会英语。</p><p>1．对外交流需要英语</p><p>　　随着世界经济的发展，国际问交流越来越频繁，中国人出国和 外国人来中国正逐步成为平常事。随着中国经济与世界经济的接 轨，这种交往还会急剧增加。国际交往中使用得最多的是英语，飞 速发展的国际交往与比较低的外语水平之间的矛盾日益突出。正 是在这种形势的推动下，人们正在以极大的热情学习英语。</p><p>　　例如随着改革开放的深入发展，来华旅游的外国人越来越多， 他们需要与普通的中国人进行接触与交流。正如有的来华旅游者 反映的“中国地大物博，风景秀丽，是旅游者最有话与本地人说的 一个国家，可是又是最找不到人（普通老百姓）说话的一个国家。” 他们的这个说法难道不是从另一个方面说明英语是很有用的吗？ 各行各业的普通老百姓从实践中已经认识到这一点，他们学习英 语的积极性空前高涨，旅馆服务员在学，出租汽车司机在学，个体 商贩也在学。</p><p>　　随着我国经济的发展，普通老百姓出国旅游必将越来越多，届 时人们对于英语重要性的认识还会上升到一个新的高度。</p><p>2．不出国也需要英话</p><p>　　说到对外开放和对外交流，人们往往容易与出国联系起来。出 国需要英语是不言而喻的。需要说清的是在改革开放的今天，在国 内也同样需要英语。如果只是从出国需要英语去动员别人学习英 语，效果不一定好，因为在目前条件下，毕竟不是大多数人都有出 国的机会的。下面是一位曾经出过国的大学老师动员同学重视英 语学习时的对话：</p><p>老师：“你们要好好学习英语，以后出国时有用。”</p><p>同学：“我们出国的可能性很小，学不学无所谓。”</p><p>老师：“即使是百分之一的可能性，你也要努力学，万一这个百 分之一落在你的头上时你就有准备了。</p><p>　　这位老师对于英语重要性的认识是基于他出国时的体验而发 的，并且认为即使只有百分之一的可能性也要做好准备。这样的动 员似乎是很积极的，但是同学们听了他的话，学习英语的劲头并没 有提高，因为老师的论据仍然是建筑在一出国才需要学习英语”的 基础上的。</p><p>　　随着近年来世界范围的信息高速公路的高速发展，世界进入 了信息社会和网络世界（1997年世界经济论坛会议语），地球显得 越来越小，国内和国外的界限变得不大清楚了。从一定意义上讲， 可以说国内就是国外。例如随着Internet网上多媒体（文字、声音 和图像）的World Wide Web（即www）的出现，各种虚拟（virtu al）事物层出不穷。只要有一台电脑和相应的软件，加入网上的虚 拟大学（virtual university），用不着出国就可以上国外的大学并获 得学位；在网上进行虚拟旅游（virtual tourism），足不出户就可以 周游世界。由于电脑空间（cyberspace）里信息极其丰富和详细，在 电脑上进行虚拟旅游后对于世界名胜古迹的了解和印象可能比实 地到过的人还要深刻和全面，真是“秀才不出门，全知天下事，立知 天下事”。</p><p>　　但是所有这一切都离不开英语，因为网上百之九十以上的信 息是英语。Internet网上各种信息名目繁多，五花八门，网点配置 错综复杂，犹如一个信息迷宫。面对电脑键盘，用什么指令进入这 个迷宫，在不断变化的屏幕英语显示面前，怎样一步一步进行下 去，都要在动态搜索过程中实时做出判断。很显然，要做到这一点， 没有比较高的英语水平是不行的。英语水平不高的人进入1nte卜 net网，在纷繁的英语屏幕提示面前，边查词典边分析语法，刚开 始时也许还能勉强进行几步，用不了多长时间就会胡乱击键，搜索 到那儿算那儿，在资料的大海里随波逐流，听天由命。其结果不是 找到需要的信息，而是淹没在信息的汪洋大海之中，他们对于In。 ternet的热情也就随之减退。此外还有一个费用问题。1nternet网 的资料检索是联机在线进行的，占用一分钟要交一分钟的费用（即 使所检索的资料免费，占用的通信线路的费用总是要交的）。所以 只有具有较高的英语水平，面对屏幕上的英语提示，一看就懂，才 能在最短的时间，花最少的费用就能到达合适的网点，找到的合适 资料，尽情享受高科技带给我们的乐趣。</p><p>3．不搞高科技也需要英语</p><p>　　不少人认为只有在国内搞高科技的人才需要查阅国外的英语 资料，从事一般科技工作的人就不一定需要了。其实这是一个极大 的误解。</p><p>　　一般说来，我们中国不仅仅在尖端科技方面落后于外国，在一 般科技方面也远远落后于外国。任何从事非尖端科技工作的人要 想在自己的专业方面有长进，也必须懂得英语，以便及时了解国外 的动态，吸取其先进经验。就拿各个专业科研工作必然要碰到的技 仁体制和应用标准来说吧，由于长期落后，我1［J4＼叨能在丰富试验 和实践的基础上逐项确定体制和标准，而往往是实行“拿来主义”， 把国外行之有效的体制和标准翻译过来，根据已有的经验稍加修 改就在国内推行了。国外制定这些体制和标准是有一个过程的，每 冲体制、每项标准，甚至每一个技术术语的背后都有丰富生动的背 录材料。我们在“拿来”这些体制、标准和术语时，往往是60年代、 70年代和80年代的没有吃透，90年代的又来了，真是“拿不胜 拿＼哪里还来得及把与这些体制、标准和术语有关的丰富生动的 背景材料也一并介绍到中国来呢？所以要想真正搞清楚每一种体 韧、标准和术语的来龙去脉，只有去看那些没有翻译成中文的外文 背景材料，舍此没有其他途径。在实行这些从国外引进的体制、标 准过程中，一定会碰到各种各样的问题。此时又需要参考英语资 料，看看外国人在实施这些体制与标准过程中有没有碰到类似的 问题，如何解决等等。</p><p>　　国外制定各种体制和标准的人也是和我们一样的普通人，工 作中也会有疏忽和差错；随着科技的发展，体制与标准也需要随之 更新。所以我们在实行各种“拿来”的体制与标准的时候，尤其是在 碰到各种问题对其准确性发生怀疑时，除了积极地在实践中进行 探索外，最好是详细阅读与之有关的各种外国资料，看看是不是 “拿来”的某种体制或标准本来就有误。笔者在长期的实际工作中 多次碰到过此种问题，无一不是在详细地阅读了英语资料以后，对 “拿来”的体制或标准加以改造，使之适合中国情况以后才得到圆 满解决的。对外开放以后，有机会询问那些体制和标准的制定者并 告之我们对其进行改造的情况，他们也都承认原体制或标准有误， 改得对，改得好；对他们也是启发。所有这一切，离开英语是根本办 不到的。</p><p>2.1b 英语的用途[2]</p><p>4．不从事科研工作也需要英语</p><p>　　在说明了国内从事一般性科技工作需要英语的问题以后，有 的人又会况只有从事科研工作的人需要英语，从事一般性工作，（例 如施工和维护等等）不一定需要英语，这也是一个很大的误解。</p><p>　　正如前面所说的，国内一般工程技术的体制、标准和术语等 等，都是从国外“拿来”的。一般情况下，我们中国人在施工和维护 中所碰到的问题，尤其是技术难题，外国人大都碰到过，解决过，一 般情况下都会有文章发表。不少从来不看外文资料的人有一种误 解，认为外文资料只与科研有关，与施工和维护有关的外文资料是 找不到的。其实不然。笔者从事一般的通信工程设计和施工近三 十年，所用的技术比国外同期的要落后10年至20年。每当工作 中碰到难题，都能在国外的书刊中找到相应的答案。问题在于这些 问题的答案散落在浩翰的外文文献里，要想在需要的时候找到它 们，要靠平时的积累。也就是说，平时没有碰到难题时就要注意阅 读与所从事的技术有关的书刊。只有这样，碰到难题才知道到什么 书刊里去找。</p><p>　　国内的科技界和翻译界，把注意力集中在尖端科技上，国外有 点进展，就千方百计地找到资料并译成中文，使得不懂外文的人有 可能通过阅读中文资料获得一些国外进展的信息。可是有关一般 性科技问题的英语书刊的情况就不同，对它们的历史情况和近期 进展感兴趣的人不多，没有人去收集并把它们翻译成中文。这种局 面对于那些从事一般性技术工作而不懂英语的人来说是一个不 幸，在他们前进道路上留下了一大堆未知数和空白，给他们深入理 解和掌握某一项技术造成了很大困难。他们只能望“洋”兴叹，可望 不可及。但是对于掌握了英语的人来说，这种情况却可能是一个发 挥自己聪明才智的大好机遇。例如在看了有关某个体制和某项标 准的外文资料以后，搞通了它们的来龙去脉，你就可能比别人懂得 多，而且很可能是国内为数不多的真正搞懂的人中的一个。别人解 决不了的问题你能解决，别人不明白的问题你能说明白，别人预见 不到的问题你能预见到（其实可能是从外文书刊上看来的），如此 等等。你可能会被那些从来不看外文书刊的同行视为能力和智力 过人。如能在搞通的同时结合我国的具体情况加以改造，可能还有 所创造。</p><p>　　从事一般性技术工作的人一定要树立起这样的信心：在一般 技术性工作中英语的用途也很广。因为落后的中国工业界，往往参 考某项国外设备进行研制，把某设备做出来以后还来不及总结和 提高就需要转去搞别的项目的研制了，来不及替施工和维护人员 预备有关某一个产品或某一项技术的比较完备甚至是起码的材 料。谁要想搞清楚某一个问题，或者对于某一个中文资料的内容有 怀疑，需要澄清，或者发现了某些规定和做法（往往是参考国外的 做法而制定的）不对或不完善，需要加以纠正、完善或提高时，几乎 无例外地都需要求助于外文资料。有时甚至于需要从他们最原始 的文章看起，逐年看过来，才有可能搞清楚某个问题的来龙去脉， 纠正某个错误概念或错误标准等等。从这个意义上讲，是不是可以 认为在非尖端科技领域里发挥英语作用的余地比尖端技术领域更 大一些呢？笔者在长达二十多年的通信工程设计和施工中坚持结 合工作中的问题学习和应用英语，深深体会到，对于从事一般性技 术工作的人来说，如果想做一个明白人，而不是人云亦云，亦步亦 趋，以讹传讹的人，就需要参考英语书刊；如果想在自己普通的技 术工作中有所前进和创造的话，也需要参考英语资料。结合工作经 常阅读英语资料，就比不阅读英语资料的人多了一双眼睛，多一副 耳朵，就能“秀才不出门，全知天下事”，就能把外国人的实践结果 借鉴过来，因此就能比不阅读英语资料的人聪明一点，就能事半功 倍；如果拒绝或不能阅读英语资料，对于一些问题的理解就比较肤 浅，可能会花大量的功夫去解决别人已经解决过、并有文章发表的 问题，结果事倍功半，而且可能走弯路。</p><p>　　也许有的人会说不是也可以通过阅读中文的资料达到以上目 的吗？科技人员通过看汉语的资料了解国际动态有三个不足。一 是不及时。目前国际的科技发展很快，等到翻译成汉语时已经不是 最新动态了。二是不能很准确地表达出来。因为既然是最新动态， 一般都是一些新的概念和进展，懂技术的人去看也要动一番脑筋 才能明白，有的东西（尤其是一些新出现的技术可能没有现成的汉 语译名）不懂技术的翻译是不可能准确地表达出来的（对此我们不 要苛求他们，因为他们不是搞技术的，而且今天翻这个，明天翻那 个，五花八门，不可能门门都懂，都翻得准确）。三是你所需要的内 容可能根本没有人去翻译。因为科技发展到今天，门类实在太多 了，各种文献犹如汪洋大海，只能翻译出一些大多数人感兴趣的处 在科技发展前沿的东西，你所从事的工作所需要的外文资料可能 就没有人去收集，更谈不上译成汉语了。</p><p>　　有的人说“中文的资料都看不过来，那里还有时间去看英语资 料＼这种看法是很片面的。有这种看法的人大都是因为英语水平 比较低，始终停留在痛苦的“学习”阶段，没有进步到愉快的“应用” 阶段，从未尝到过懂得英语的甜头，所以才说英语没有什么用。如 果说有的人确实通过阅读中文翻译资料而有所启发和收获的话， 要记住：这些中文资料必然是通过一些负责任的、既懂英语又懂专 业的人翻译出来或写出来的。作为一个具有大学以上学历的人来 说，为什么你不应该成为这样的人，去为那些没有机会学习英语 （大学文化程度以下）的人准备一些准确的材料呢？要知道，隔行如 隔山，不懂专业的翻译是很难把英语科技文章翻译得很准确的。为 了帮助他们把文章翻译准确，你也必须具有相当的英语水平，而不 是一个拿着词典才能看书的人所能胜任的，所以说，帮助不懂技术 的翻译把需要翻译的英语资料准确地译成汉语是每一个具有高等 教育学历的人的一项不可推卸的责任。</p><p>　　也许有的人会说“我不会英语工作不是也搞得很好吗？”是的， 不少不懂得英语的人本行工作干得很出色。但可以肯定他说，如果 能用英语的话，一定会搞得更出色。掌握了英语，就等于比不懂英 语的人多一副耳朵，多一双眼睛，可以大大地扩大自己的视野，极 大地提高自己的工作能力。我们经常讲要追赶世界先进水平，但是 世界先进水平是什么？我们自己处在什么水平上，相当于发达国家 什么年代的水平等等问题，都与能不能直接（不是假手于人的间 接）获取国外的科技信息有关。有的人根本不知道世界水平是什 么，自己所搞的科研相当于国外什么年代的水平，就妄自宣称处于 世界先进水平。他们这样做，如果不是无知，就是有意欺骗。有很 多东西，别人早就搞过了，并且有根详细的文章发表，如果能找来 看，一定能大大地加快科研和解决问题的速度。由此可以看出，如 果能结合自己的业务工作学习和使用英语，不但英语水平能够提 高，业务工作也一定会搞得比别人出色。“机遇偏爱有准备的头 脑＼一旦有了涉外业务（出国或与外国人进行交流等等），就很有 可能会落到你的肩上。而且一定会在从事涉外业务的过程中，深深 感到平时所付出的艰苦努力都是值得的。学习英语，应该有“宁肯 学了没有用，也不要到了用的时候后悔没有学”的思想，应该“时刻 积极地准备着”，而不要“时刻消极地等待着”。</p><p>7．英语的其他用途</p><p>　　英语的用途绝不局限于上述几个方面，它的应用范围广泛得 很。例如可以作为自己的专业，教英语。由于改革开放形势的需要， 社会对于英语人才的需求量与日俱增，学会英语以后即使不去做 英语教师，起码也可以辅导别人学习英语。随着社会的发展，对于 下一代人的英语水平的要求也会越来越高。不少大学毕业的父母， 可以辅导孩子学习各门功课，就是辅导不了英语。这种情况是时代 造成的，但是不能成为永生的遗憾。应该抓紧时间学习，即使是与 儿女一起学习也无妨。</p><p>8．不会无所谓与会就有所谓</p><p>　　不少人看到周围大多数人的英语水平与自己差不多，显不出 自己的英语水平低下，该晋级晋级，因而认为“会不会英语无所 谓”。这种看法是不全面的，其实正是因为周围的大多数人不会英 语、如果自己有一定的英语水平，就一定会有用武之地。而且劳者 多能，在用英语的过程中水平还会不断提高，令那些认为“会不会 英语无所谓”的人感叹不已，自己也会越来越感到“会英语有所 谓”。</p><p>2.2a一定要学会英语[1]</p><p>　　在认识到英语的重要性并下决心学习英语以后，但又缺乏信心，认 为“自己智商低”、“英语环境差”和“毅力不强”，难以学会英 语：，尤其是在初次学习失败以后就更认为英语实在太难学了。其实 这些顾虑都是不必要的，只要努力，方法得当，是一定能学会英语 的）</p><p>1．智商低不是理由</p><p>　　读者在阅读了以上笔者与其他人学会英语的过程以后，一定 会得出“别人能学会，我也能学会”的结论。是的，你能学会。因为 智力正常人的脑子有无穷的潜力。</p><p>　　学习英语主要靠记忆，记忆的载体是脑神经细胞。传统的神经 解剖学认为人脑大约有140亿个神经细胞，但新的研究表明，大 脑约有10000亿个神经细胞，其中至少有1000亿个神经细胞是 互相发生连接关系的。不论取哪个数，都表明脑子的潜在记忆能力 是很大很大的。可是人一生不论如何用脑子，也最多开发几亿个 （或十几亿个）脑神经细胞，其他130亿个（或990亿个）神经细 胞，则是与生同来，与死同去。正因为这样，不少科学家认为人脑的 结构和功能是迄今为止宇宙中已知物体中最复杂的，它本身就好 像是一个小宇宙，可以不断地开发，永无止境。美国麻省理工学院 的一位教授说：“倘若你一生好学，那么你脑子一生中储藏的各种 知识、将相当于美国国家图书馆藏书的50倍。”也就是说，人的脑 子里可以容纳5亿多本书的知识。虽然目前已经能够从亚分子水 平上对脑子的作用机理进行研究，在过去10年内对于脑子的研 究成果比过去几千年还要多。但是脑子的许多功能问题仍然是不 解之谜。例如美国新墨西哥州有一位叫梅茨的小男孩，三岁以前很 正常，快四时患一种奇怪的脑炎症，每隔三分钟发作一次，不得 不进行左半脑的切除手术，切去了一半的大脑皮层，五年多以来， 他和正常的孩子一样上学，各方面的表现都很正常。按照传统的见 解，左脑是分工管音乐、诗歌和数学的，他的左半脑已经完全切除 了，似乎他在音乐和数学方面的能力应该比较差。但是实际上他在 这两个方面都很正常，他喜欢上钢琴课，数学成绩优良（详见Na tional Geographic VOL. 187,NO. 6 JUNE 1995Quiet Miracles of the Brain一文）。所有这一切都为左右半脑分工的传统见解所 无法解释，看来左右半脑之间存在着某种我们所不了解的信息传 输方式，人的脑子具有极大的可塑性，后天的刺激（学习）可以改变 脑子神经细胞之间的连接关系，可以使某一部分脑细胞得到充分 的发展。</p><p>　　由此可见，脑子有无穷的潜力，不要轻易地把没有学会英语简 单地归结为“智商低”。每当听到有人把自己英语学习成绩不理想 归结为“智商不高”时，笔者经常用“智商不高的人才适合学英语” 的话语去鼓励他们。如果说学习数理化需要严密的推理能力和不 断地问为什么，掌握其精神实质和会灵活运用的话，对于大部分以 英语为工具（即不以英语为专业）的人来说，学英语时只要知道是 什么就可以了，并没有更多的推理和逻辑过程，只要把书本上的内 容都学会了（即使是机械地记住也无妨），就可以基本上达到目的。</p><p>　　世界上万物都有差别，所以应该承认人脑先天有好坏之分。如 何鉴别脑子先天的好坏是学术界争论不休的课题。恐怕大多数人 都同意以下看法：脑子先天条件特别差和特别好的人只是少数，大 多数人处于中等水平，即智力正常。作为一种积极进取的思维方 法，我们不妨认为自己脑子的先天条件处于“中等水平”，不如“上 等水平的人”，并以此时时鞭策自己：“先天不如别人，后天还不赶 快努力”。并由此下足决心，如果先大智力水平属“上导”的人字一 小时，你就学两小时，付出比他们多得多的努力，以弥补自己先天 的不足。力争多开发一些，做到在现实的智力水平方面赶上他们。 只要抱这样的积极态度，你就一定会有所成就，说不定还有可能超 过那些先天处于“上等水平”的人呢！更何况说不定你是先天条件 处于“上等水平的人”，如果你能加倍努力，岂不是更能取得非凡的 成绩吗？</p><p>　　再说，笔者这里所说的“学会英语”，并不要求读者成为英语大 师，能用英语流利地表达自己的思想（或写作、或演说），而仅仅要 求学会已经写在书上或已经录在录音带上的内容。水平高的人已 经把需要学的内容都准备好了，你只要照着学，模仿着说，难道还 学不会吗？笔者经常用这样的话语鼓励那些缺乏自信心的人：“难 道你就笨到连别人已经写好的内容都学不会的地步了吗？”</p><p>2．毅力差不是理由</p><p>　　有的人把英语学习成绩的好坏归结为毅力的强弱。这种看法 是不全面的，甚至可以说是因果倒置的。因为毅力不足天生的，而 是在不断克服困难的过程中锻炼出来的。所以每当有人认为自己 毅力不强，对学习英语缺乏信心时，我总是鼓励他们把“毅力不强 学不会英语”的看法换成“毅力不强就学英语”，即把学英语作为培 并和磨练毅力的一个好机会，做到英语水平和毅力双丰收。对此作 者有深切的体会，在刚起步听写英语录音带时，一分钟的录音带要 花一个小时左右才能听懂，困难很多，进步不大，不时冒出打退堂 鼓的念头。为了及时提醒自己，专门制作一个写有“坚持就是胜 利”字样的牌子，作为座右铭，放在桌子上。每当感到花的功夫不 小，英语水平提高不大，想放弃不学的时候，只要一看到它，就会重 新鼓起学习的热情和信心。用逆向法学习英语时间久了的人都有 这样的体会：学习时间长了，对于所用的纸、笔、收录机、词典等等 “有很深的感情。只要一看到这些东西就想学，手指头一接触收 录机的键，精神就会振作起来。在这种情况下，学习已经成为自己 的一种乐趣和追求，欲罢不能，哪里还需要毅力去支撑呢？</p><p>　　毅力不足的最明显例子就是学习中的冷热病。需要用英语（与 外国人进行技术交流、职称评定中的英语考试等）的情况碰多了， 你或许会想，要是自己的英语水平比较高，能“听”、“说”英语该有 多好。由此也可能激发起学习英语的很高热情，一时间下的气力很 大，每天学上好几个小时。学上一段时间，碰到一些困难，或者与国 外的技术交流活动也可能已经告一段落，客观上对英语“听”、“说” 的要求不像早先那么急了，或者技术职称已经获得，学习的劲头可 能也随之下降了。只有等到下一次再与国外进行技术交流或又受 到别的外界刺激时，才又萌发出加紧学习英语的念头，再一次重复 这个过程。这就是我们经常可以见到的“用时很着急，过后又放 松”的学习英语的怪圈。在对外日益开放的今天，我们要有“平时要 为用时着想，宁肯学了用不上（从广义上讲，不可能用不上），也不 应该用时后悔平时没有学”的指导思想。只要抓紧时间学习，持之 以恒，什么时候开始学习都是来得及的。即使人到中年，也可以学 会英语口语。</p><p>　　于任何事情，没有明确的目标和一定的压力，都不可能干好， 学习英语也不例外。有了明确的目标，才有明确的前进方向，才能 感到自己的不足，防止骄做自满和停步不前。随着与明确的目标之 间差距的日益缩小，会感到自己的进步，从而鼓起更大的学习热 情。</p><p>　　目标分为两类。一类是英语水平方面，例如要在一年之内，达 到能听懂慢速英语新闻广播的程度；另一类是以某一个人为自己 努力追赶的目标，时时以他为榜样。由于后一类目标很具体，可操 作性很强，对于自己的激励作用很大。</p><p>　　目标订出来以后，就要自己强迫自己执行，自己对自己施加压 力。整个自学任务是通过一天天的努力去完成的，没有碰到不可克 服的困难，一定要完成每天的学习任务。因故没有学，作为对于自 己的“警告”，事后要加倍补上。不少自学者的实践表明，只要有一 夭因为有一点“特殊情况”而放松对自己的要求，没有完成自己规 定的学习任务，就会在思想上打开一个缺口，成为以后效法的“榜 样。”，最后导致半途而废。</p><p>　　俗话说：“有志者立长志，无志者常立志”。我们应该做一个“立 长志”的有志者，而不要做一个“常立志”的无志者。</p><p>　　作为以上讨论的一个补充，下面介绍一个发人深醒的实例）笔 者曾经碰到过一位屡攻英语不下的科技干部，每当说起为什么自 己英语学习成绩不理想时，总是以“毅力差”和“智商低”作为理由， 而且久而久之，他也真这么认为了，并不只是在嘴上说说而已。可 是他在打扑克上所表现出来的毅力和智商是超人的。到了节假日， 可以通宵达旦地打牌。用他自己的话来说、就是“只要一坐到桌旁， 也不知道从哪里来的劲头，几个小时，十几个小时，不知不觉地就 过去了，一点倦意都没有／这是何等强的毅力呀！一般人能做到 吗？！可是为什么学习的毅力就很差呢？难道毅力也是分类的吗？ 他在打牌上表现出来的智力也是超群的，再新的扑克牌，玩一把以 后就能知道大小鬼在谁手里，实在令人不解。原来是他在牌上做记 号的结果。新牌第一次启用时，他认不得。在第一把出牌的过程中， 趁别人不注意之际，他把这两张的背面稍稍弄脏一点点，第二次再 发牌时他就知道大小鬼在谁手里了。由此可见，他在打牌上是多么 地动脑筋呀！所以一个人只要对所从事的事情有浓厚的兴趣，就会 毅力大增，乐此不疲，就会激发出极大的聪明才智。不但可以做出 一般的成绩，而且有可能超过一般人的水平。不过最好把自己的聪 明才智用在学习和工作上，而不要用在消磨时日的打牌或打麻将 上。</p><p>2.2b 一定要学会英语[2]</p><p>3．只怪努力不够，方法不当</p><p>　　有的人很想学英语，但往往过分强调困难，埋怨主客观条件不 好，而不是从自己主观努力上找原因。各人所处的主客观条件是不 同的，难道你就那么倒霉，各种不利于学习英语的主客观条件都被 你赶上了？别人就那么走运，各种有利于学习英语的主客观条件都 被他们赶上了？不可能的。</p><p>　　只要认识正确，采取积极进取的态度，主观努力，不但有利条 件可以充分发挥，不利条件也可以转化为有利条件。笔者辅导过一 位在基层单位工作的大学毕业生。在校时她的英语水平很一般，基 层单位学习英语的客观条件也不如毕业后考上研究生的那些同班 同学。但是在认识到英语的重要性以后，从主观努力入手，抓紧时 间苦学苦钻，英语水平提高很快。一年后笔者请她来与在读研究生 交流学习英语的体会，在座的研究生们都感到她的英语水平比一 年前在校时提高多了。</p><p>　　信息化和网络化的社会与现代化的传播媒介和视听设备把地 地道道的英语带到了每一个角落，为学习英语创造了前所未有的 有利环境。从一定意义上讲，“国内就是国外”，“外籍教员”无天在 你身旁，就看你利用不利用。</p><p>所以应该树立起“不怪天，不怪地，只怪学习方法不当，努力不 够”的思想。</p><p>4．机不可失，时不再来</p><p>　　无论是对于在校学生和在职人员来说，如果想学习英语，就要 抓紧时间，争分夺秒地学，因为机不可失，时不再来。 在抓紧时间的问题上有一个正确对待“昨天”、“今天”和“明 天”的问题。</p><p>　　有的人在萌发出学英语的念头以后，总是后悔自己“昨天”为 什么没有抓紧时间学，从而感慨万分，说什么如果“昨天”要是学 了的话，“今天”的英语水平就很高了，可以很顺利地阅读和“听”、 “说”英语了。但是“今天”怎么办呢？往往认为“今天”的事情大多 了（或功课大多，或本职工作大忙，或家务负担大重等等），抽不出 时间来学，因而也就没有从“今天”学起的决心和紧迫感，盼望“明 天”出现了学习英语的大好时机以后再学。应该承认，不论是在职 自学者还是在校的学生，当前的工作和学习任务一般都不轻松，家 务劳动也不少。但“明天”是不是一定就会比“今天”轻松些呢？不 一定。说不定“明天”比“今天”还要忙。“机不可失，时不再来”， 一晃就是一年。正如你“今天”后悔为什么“昨天”没有抓紧时间学一 样，“明天”你也会后悔的。与其不断地后悔，不如“千里之行，始于 足下”，立即动手，“今天”就学（这里所说的“今天”不是泛指目前 的一段时间，而是指你萌发出要学习英语的那一天），不要等到有 了什么“黄道吉日”的“明天”再说。一年365天，一天24小时，对 谁都是平等的，对于善于利用时间的人来说，工作再忙、家务劳动 再多，总还是有空隙的。抓住这些空隙，见缝插针学英语，不后悔 “昨天”，不虚度“今天”，不坐等“明天”，是我们在对待时间问 题上应有的态度。</p><p>　　制定并实现学习计划是有效利用时间的一个重要方面，有了 学习英语的紧迫感并开始学习以后，需要制定长期、中期和短期目 标和实施计划。长期目标和实施计划可以订得粗一些，中期与短期 目标和实施计划要订得比较具体。尤其是短期的目标和实施计划， 必须是切实可行的，不能订得太笼统。长期目标是准备用三五年的 时间达到能听能说的水平，中期计划则是一年内达到基本上能听 懂慢速英语广播，短期目标和实施计划则是每天（或某几天节假日 内）学多少个小时、听写多少页等等。</p><p>　　在确定长期、中期目标和实施计划时，要审时度势，宁肯把目 标订得低一些，切忌好高骛远，把期望值订得太高，以免到头来不 能实现而挫伤学习积极性和信心。但是在制定具体实施计划（例如 每天学多长时间、听写多少页等等）时，则应尽可能提出高要求，并 强迫自己实施。没有经验的情况下所订的计划可能不一定符合实 际情况，注意在实施过程中及时反馈和修正，把订得高了的目标降 下来，低了目标提上来。一般人容易犯的毛病是把长期和中期计划 订得很高，而短期目标和实施计划却订很不具体。很显然）这样的 目标和计划是很难实现的。</p><p>　　有了目标和实施计划，学习就有方向，就能调动起积极性，忙 的时候不会顾此失彼，闲的时候不会无所事事。</p><p>5．不断自我激励</p><p>　　我们每个人生活在具体的环境中，而不是生活在空想的“乌托 邦”里。当你下决心学习英语时，不一定有人能及时地鼓励你，说不 定还不时地能听到各种会挫伤你学习积极性的风言风语。这样就 产生了一个如何不断自我激励，增强信心和毅力，使学习过程成为 越学劲头越大的良性循环的问题。从经验看，时时与以下各种参考 点对照，是不断进行“自我激励”，自我增强信心和毅力的好办法：</p><p>（1）以自己的学习记录为参考点。每一个阶段的学习记录（练 习本、生字本等等）是自己在自学的道路上艰苦跋涉的足迹，应该 很好地保存，有空时可以拿出来看看。这样做不但可以“温故知 新”，而且是一个很好的衡量英语水平有无提高的参考点。随着英 语水平的提高，一些原来不懂的懂了，不认得的生词认得了，就可 以及时看到自己的进步，自己激励自己，从而鼓起更高的学习热 情，使整个学习过程成为一个越学劲头越大的良性循环。</p><p>（2）以某一篇比较难的录音带为参考点，定期听，看看能听懂 多少。随着时间的推移，水平的提高，听懂的内容会越来越多。也 可以长期阅读某一本英语书，每阅读一遍，在不懂的地方作上记 号，下一次再阅读的时候看看上一次不会的这一次会了多少。长期 坚持这样做，可以随时看到自己的进步。</p><p>（3）以各种应用英语的场合为参考点。随着时间的推移，一定 会碰到各种各样应用英语的场合，例如中外技术交流等。所有这些 都是很好的衡量自己英语水平有无提高的参考点。曾有一位复习 了基础英语几个月的大学毕业生在听了一次外国人的技术讲座以 后兴奋地告诉我：“不知为什么，这次听懂了不少。”我告诉他：“由 于你踏踏实实学了两、三个月，把原来晃晃悠悠的英语知识加固了 一下，因而听懂了不少。”从此他的学习劲头就更大了。</p><p>（4）以周围不自学的人为参考点。自学英语的时候，一般人总 是嫌进步慢，但是如果与周围由于种种原因而不学的人相比，你就 会看到自己的进步。</p><p>2.3 他们怎样学会英语</p><p>　　为了使读者提高一定要学会英语的信心）下面再介绍一些通 过艰苦努力，在英语学习上取得成功的集体和个人。这些都是笔者 亲身经历的真人真事，对于读者可能会有些启发。</p><p>1.百分之百的CET通过率</p><p>　　由于种种原因，1990年作者所在学校的CET4通过率只有 50％左右。不少同学视CET.4考试为畏途，认为“学英语付出的努 力最大、最大、最大，而收获却最小、最小、最小”，认为通过CET.4 的人的英语水平就很高了。有的人消极地把这种落后局面归结为 主客观条件不好，诸如：没有外籍教师；学生主要来自农村，英语基 础差，中学的英语没有学好，大学阶段不可能返回去补中学的课， 通不过没有办法；师资力量薄弱等等。</p><p>　　随着对于英语重要性认识的提高，学校下决心尽快改变这种 落后局面。教、学、管三个方面齐努力，尤其是充分调动教员与学生 的积极性，很快就获得了突破。1991年通过率上升到80％， 1992 年再上升到90％， 1993年则达到100％。在通过率提高的同时， 同学们学习英语的心态也发生了变化，由厌倦学英语到喜欢学英 语，认为“只要肯下功夫，英语是各问功课中最好学的＼通过 GET4是学习的基本要求，要想提高英语水平，还必须继续学习。 由于不少本科生以优异的成绩通过了CET6，从本校应届生 中招收硕士生时，曾以通过，CET6为必要条件，极大地提高了入</p><p>“功夫不负有心人”，一年左右下来，听力和阅读水平都有明显的提 高，成了学习班中的佼佼者.</p><p>2．自学成才的英语副教授</p><p>　　每一个在英语学习上取得成功的人都是一步一步学会的，都 有一个刻苦努力的过程。如何刻苦，如何努力，只有他们自己知道。 有的人看别人，只看他们当前英语水平高这个结果，而不问这个结 果是如何通过艰苦努力才达到的，因而往往会把他们的成就归结 为某种“天赋”。例如作者所在学校有一位越南语教员，为了适应新 的形势，70年代未40多岁时开始自学英语，边学边走上讲台教英 语，很快就成了出色的英语副教授，听和说的能力极佳。一些只看 到他顺利地成为英语副教授而不知道他付出了多少汗水的人就认 为“他有语言天赋，一学就学会了”。事实完全不是这样。他不是 “一学就学会的”，而是付出了一般人没有付出过的辛苦才学会的。 他把一切可以利用的时间都用来学英语。例如为了提高“听”、 “说”能力，把书房里录音机输出并接到家里的所有房间，不论走到 哪里，干什么，都能听到英语录音，都能模仿着“说”。就是通过这样 非凡的努力，他的“听”、“说”能力才得以提高，才成为出色的英语 副教授。</p><p>3．从不及格到全校第一</p><p>　　作者所在学校有一位从河北省来的大学生。一年级时，由于 “上了大学，松一口气”，加之对英语的重要性认识不足，上英语课 时精神不集中，英语成绩不好。因为成绩不大好，教员就要经常提 问他。为了避开教员的目光，常常坐在最后一排，课后也不复习，结 果期末考试不及格。但是他并不着急，认为“不及格”是必然的。因 为他听别人说过，“北方人适合学俄梧，不适合学英语”；自己来自 普通中学，英语基础没有打好；自己父母是农民，从小没有英语环 境等等。总之，一句话，只从客观因素上找学不好的原因。后来他 认识到英语非常重要，是90年代知识分子必备的一门知识。从此 他一反过去的作法，上课时精神高度集中，主动坐在第一排，课后 抓紧复习。一年下来，他在全国CET4级通考中成绩优秀，获全校 第一名。他的照片醒目地张贴在教学大楼的走廊墙壁上，成为全校 同学学习的榜样。每当请他讲体会时，他总是说“功夫不负有心 人”，鼓励别人下功夫。我们可以设想一下，如果他当初的一些消极 想法得不到克服，主观能动性调动不起来，很可能就此放弃英语学 习，根本谈不上在客观条件没有改变（他还是北方人、还是来自普 通中学、来自农民家庭、教学条件和教学法没有变等）的情况下取 得如此好的成绩。由此可见，对于每一个具体的人来说，如果英语 没有学好，应该积极地从主观上找原因。</p><p>　　一与这位同学的情况相类似的是一位来自吉林的同学。“中学阶 段的英语是混过来的，从来没有认真学过”（本人语），但依仗着数 理成绩尚好通过了大学入学考试，入学后英语摸底测验只得30 来分，很多基本的英语知识都不会。要想在学好大学英语的同时把 中学的英语知识补上，难度比较大，他缺乏信心，产生了退学的念 头。所幸他的班主任是一位对于英语重要性有充分认识的本科毕 业生，，他耐心地做这位同学的思想工作，帮助他树立起信心，同时 帮助他补习中学英语。就这样，通过一年多的努力，顺利地在规定 的时间里通过了CET4考试。从此，他对英语学习产生了兴趣，抓 紧时间自学，力争通过CET-6考试。</p><ol start="4"><li>62岁老人的听力提高比年轻大学生快</li></ol><p>　　一位50年代留苏人员，60多岁了，过去从来没有正规地学习 过英语，只是工作之余断断续续地学习过一些，也能阅读与自己专 业有关的书面资料，但是语音知识比较差，听力不行。 1995年他与 其他近年来毕业的大学本科生和硕士生一起，用逆向法学习英语 时，不因为自己年高而放松要求，而是脚踏实地，严格按照逆向法 的要求听写录音带，一个词一个词、一句话一句话地抠。并且把这 个学习态度应用到阅读和文章翻译上，对于文章中的每一句话，一 个词，都力求搞懂，而不是想当然或靠专业知识的支撑进行猜测。</p><p>5．其他例子</p><p>（1）一位20多岁的大学毕业生在工作中深感英语的重要，想 进一步学习，但是缺乏信心。后来他把自己的情况与作者的情况进 行了对比，对笔者说：“你45岁时下决心进一步学习英语，用了一 年多一点的时间达到了目的。就假定我的智力水平不如你高，比你 笨，难道就笨到用20多年也学不会的程度吗？显然是不会的。所 以只要我现在下决心学， 20年以后，不也就达到你现在的水平了 吗？这样一想，信心就来了”。从此他脚踏实地用逆向法苦学苦钻， 对照录音带，逐词逐句校正发音，一年后不但阅读能力得到了提 高，“听”和“说”的能力也提高了。只要学校里举行英语演说活动， 他必登台，而且可以发表即席讲话。</p><p>（2）河南省一位学电子工程的大学生，通过了CET。4以后，采 用逆向法逐词逐句地抠了一年左右的慢速英语广播，在1992年 举行的全省非英语专业学生演说竞赛中名列前茅，评委中的外籍 教师以为他受过专门的口语训练，随后又在河南省英语工作者演 说大奖赛中获奖（注意：他当时还是学生，并不是英语工作者）。其 实他所在的学校从来没有外籍教师，平时也没有机会与外国人对 话，他完全是对照着录音带，逐词逐句地模仿播音员的语调，一遍 一遍地“说”，口语能力才得以提高的。</p><p>3.1a.英语学习收效不大的原因[1]<br>1.什麽时候补都来得及</p><p>　　不少人的英语学习成绩差是“一步跟不上，步步跟不上”形成 的。初中一年级刚接触英语时，一般人都怀有很大的好奇心，喜欢 学英语，但是很快就会分化。有的学生学得好，他们越学越喜欢英 语；有的学生学得不好，他们对英语的好奇心很快就会消失，慢慢 地会害怕上英语课，而且是每前进一课，对英语的害怕程度就增一分。</p><p>　　形成这种分化的原因很多，其中很主要的一个原因是在初中 一年级第一学期时是不是重视语音知识的学习和课文的朗读背 诵，能不能做到学一课会一课。如果能，英语成绩一般都比较好，一 个学期一个学期地学下去，水平不断提高，越学越喜欢英语，整个 学习成为一个良性循环过程。如果不重视语音知识的学习和课文 朗读，没有做到学一课会一课，英语成绩就不会好。</p><p>　　如果说上初中第一课时大家都在一个起跑线的话，随着一课 一课地向前推进，距离就慢慢地（一个词一个词地，一课一课地）拉 开了。第一个学期英语成绩好坏的分化不是很明显的，但是两个学 期，三个学期以后就明显分化了。基本没有掌握语音的学生，在初 中阶段也许考试还能及格，但是学习中很被动，学习完全是为了应 付考试，对于英语的好奇心很快被厌恶情绪所取代。</p><p>　　大家都从字母开始学，用的是同一课本，由同一老师教，为什 么会产生这种分化呢？有的人认为是家庭英语环境决定的，家里有 人会英语，孩子的英语就学得好，否则很困难。其实在录音机和教 学磁带如此普及的今天（起码对于大部分城市里的学生是这样）， 不是每一个学生都可以听到标准的英语声音吗？不是有很多来自 农村的学生英语学得很好吗？看来关键在于学习语音这一步是否 迈得好。如果第一步迈得不好，跟不上，而又不能及时补上的话，则 可能会陷入步步跟不上的局面。</p><p>　　有的学生基础不扎实的这种状态一直延续到上高中，上大学， 他们在英语学习上的被动程度和苦恼程度也随着学历的提高而提 高。在整个英语学习过程中，他们根本感受不到通过英语学习掌握 异图文化的乐趣，他们感受到的永远是不堪忍受的英语学习负担 和昔恼，一旦发展到了这个地步，则不但在英语学习上很难再取得 进步，而且可能影响整个学习。由于英语是主课，是开学考试中得 务和失分的关键所在，英语学习成绩不好的学生必然要把大量时 间花在英语上，从而也就影响了其他课程的成绩。英语学得好的人 在考试中靠英语得分，而学得不好的贝（丢分。对于他们来说，如何 提高英语学习成绩成了整个学习的主要矛盾。</p><p>　　不少中学生和大学生认识到了自己的基础英语不扎实，想补， 却又认为来不及了。其实只要下决心，什么时候补都来得及。只要 踏踏实实地把基础英语知识补上了，很快可以取得英语学习的主 动权）重新培养起对于英语的好奇心和兴趣。</p><p>　　不要脱离当前的课程去补习英语基础知识，而要结合当前的 课程去补，做到上一课会一课，能正确地逐词逐句地朗读课文，反 复朗读，直到能背出来为止。只要这样去做，不但可以跟上学习进 度，而且可以很快取得英语学习的主动权，重新建立起对英语的浓 厚兴趣，使随后的学习过程成为一个越学越爱学的良性循环。</p><p>　　基础英语知识不扎实的中学生和大学生，如能利用假期时间 系统地补一补初中英语则效果更好。笔者曾以初中三年级英语课 本为教材，帮助高中生和大学生在假期补习英语，要求他们模仿录 音带上的声音，反复朗读有故事情节的课文，直到能脱口而出地背 出为止。每天学习两个来小时，一两个月下来，一般都可以背会十 来篇课文。一旦能脱口而出地背出十来篇课文，他们就有中等程度 的水平了，新学期再上英语课时，就不会那么被动和苦恼了。他们 在随后的学习中仍然坚持学一课背一课，慢慢地成为同学中的饺 伎者，在升学考试或CET-4和CET-6考试中获得优良的成绩。</p><p>应该从现实出发，树立起“什么时候补都来得及”的思想。</p><p>3.1b 英语学习收效不大的原因[2]</p><p>2.急于求成</p><p>　　从主观愿望来说，谁不希望尽快地学会英语？但是学习英语有 它自己的规律，与学习其他知识一样，只有脚踏实地，艰苦努力，一 步一个脚印地学才能学会，绝不是几个月突击所能奏效的。不少人 对此认识不足，往往在基础知识不扎实的情况下急于求成。结果事 与愿违，欲速不达，一次一次地学不会，形成了英语学习中的顽症 和夹生饭，每学习一次英语，就增加一次失败的记录，对于学习英 语的畏难情绪又增加一分。笔者在教学过程中发现，急于求成是很 多在职人员英语学习收效不大的诸原因中最重要的一个，由于急于求成，会造成种种弊端：</p><p>（1）由于急于求成，必然好高骛远，往往不重视扎扎实实地补 习基础知识。有的人虽然也模模糊糊地认识到基础英语知识的重 要性，但是在补习时往往靖蜒点水，走走过场，心里想的是学高级 英语，看懂英语原版电影等。</p><p>（2）由于急于求成，学习进度自觉不自觉地会快起来，结果必 然是雨过湿地皮，基础不扎实。</p><p>（3）急于求成必然欲速不达，必然导致频繁地改换学习方法和 途径。例如想学口语的人听说《英语900句》不错，就学《英语900 句》，学第一课，觉得好懂，都会（其实并不一定很熟，不一定会背）；学第二课，觉得也好懂，也会等等；这样一直可以对付学到第八、第九课，再往下学，就觉得有点困了，不学了。正在犹豫观望的时 候，听别人说《跟我学FOLLOW Me》比《英语900句》好，于是就放下 《英语900句》，改学《跟我学FOLLOW ME》，但又不是扎扎实实地 follow到底，不久就产生厌倦情绪，想更换教材。听别人说《走遍美 国family ALBUM.S.A.》有录像带，生动有趣，比《跟我学FOLLOW Me》好，就改学《走遍美国Family Album U.S．A.》。也许一 开始还有点新鲜感，看图听音，模模糊糊地似乎能听懂一些（主要 是根据录像内容推测，并不直接听懂对话），由于《走遍美国Family Album U·S．A.》的内容本身要比《跟我学FOLLOW ME》和《英语 900句 》难多了，所以学不了几课又会感到厌倦，又会改学《新概念 英语New Concept》、或别的什么教材。不少人书架上英语书籍；和很 多，但就是没有一本是真正从头到尾学到底的。单位组织英语学 习由于种种原因，往往也是虎头蛇尾，一开始人很多，最后不了了 之，花不少钱买来的录音带或录像带，几年过去了，可能只有第一 盘有人听过或看过，第二盘三盘录音带外面的玻璃纸可能都没 有撕开。很多在职学习英语的人经常探讨哪本书好？其实各种英 语课本都是可用的，只要一课一课地按要求学到底，就一定能学会 英语。</p><p>3.1c 英语学习收效不大的原因[3]<br>3.得不到指导和鼓励 对于大多数在职学习的人来说，学习中碰到的难点往往没有 人指点，碰到困难没有人鼓励。学习中有没有老师指点的效果是大 不一样的。老师是学过来的人，他们知道什么是关键，应该搞深搞 透，什么是枝节性的问题，不一定花过多的功夫，所以在老师的指 导下学习进步快。</p><p>　　而自学则不同，有的人虽然有恒心，能坚持学下去，但往往由 于学习中没有人指点，抓不住重点，在关键的问题上花的功夫不 够，在一些枝节性的问题上却又钻牛角尖，例如有的初学者，基本 的英语语音知识都没有掌握，却在那里研究美国英语和英国英语 的区别。</p><p>　　由于没有人指点，碰到困难就会一筹莫展，找不到解决的办 法。此时的心情很像进入一个不知道前方是不是有出口的山洞，走 呀走呀，看不到一点光明，很容易丧失信心，从原入口处退出。</p><p>　　他人的及时鼓励对于一个人能否坚持到底是很重要的。实践 证明，自学英语时越是快要取得突破性进展的时候，越是会感到困 难巨重，不少人正是在快要成功的前夕停了下来，致使前功尽弃。</p><p>针对以上原阻，应该使用具有以下特点的英语学习方法：</p><p>　　能全面暴露基础英语知识的不足，从而使学习者自觉地 防止好高骛远，下决心扎扎实实地从基础英语知识学起。 ——能使学习进度想快也快不起来，彻底解决急于求成问题。 ——能使学习者及时看到自己的进步，自我鼓励，越学劲头越 大，兴趣越高，能使整个英语学习过程变成一个良性循环。</p><p>　　“条条道路通罗马”，能解决这些问题的英语学习方法很多，本 书所要讲的逆向法就是其中的一种。笔者在创造和总结这个方法 的过程中有成功的经验，也有走弯路的教训。所有这些，书中都有 详尽的介绍。读者在学习过程中如能细心体会和应用，结合自己的 情况，按照书中介绍的方法和步骤去做，一定可以取得比笔者更好 的成绩。</p><p>第三章  英语学习逆向法<br>3.2a 什么是逆向法[1]<br>　　在写作和讲课过程中，这种学习方法曾被称为“钟氏法”、“自 然法”、“听写法”和“逆向法”等。学习英语犹如“逆水行舟，不进则退”取其中的“逆”字，最后定名为“逆向法”。具体说来，“逆向”有以下,几个方面的含义。</p><p>1．逆急于求成 前面已经提到，不少人由于“急于求成”而屡学屡败。不少人认 识了英语用途和他们英语水平之间的差距，很自然地就会产生 急于求成的想法和做法。其实学习英语和学习其他知识一样，是一 个由不会到会，由知之不多到知之较多的循序渐进的过程，不是突 击、下就能奏效的。</p><p>　　不少人的实践表明，学习英语的进度快起来容易慢下来难。所 以在下决心学习英语以后，主要应该防止急于求成。</p><p>　　在急于求成思想催促下，必然频繁地改变学习途径和学习教 材，结果每改换一次，就多一次累学英语不会的记录，越学越没有 信心。不少人几年来（甚至十几年来）试用过各种各样方法，企图在 很短的时间内（比方说半年或一年）速成，结果事与愿违，“想几个 月速成，结果三年五年（甚至十年八年）不成”。</p><p>　　逆向法主张树立长期刻苦努力学习的思想（比方说准备用两 三年时间学会英语），同时特别强调在具体实施上要争分夺秒，一 个词一个词，一句话一句地学。而只要这样去做了，结果可能是另 一的“事与愿违”，“准备花两三年学会英语，结果一年就会”。</p><p>2．逆凭空的强化和提高</p><p>基础英语知识是强化和提高的基础，脱离基础英语知识去强 毡和提高的效果都不理想。逆向法强调先扎扎实实地学好基础英 语后再提高和强化。</p><p>3．逆苦恼</p><p>　　不少学习英语的人，尤其是在累攻英语不下而形成夹生饭的 情况下，会形成一种矛盾的心态。一方面认识到在今天信息世界的 环境下掌握英语的重要性，有强烈的学习英语的要求，但是又望而 生畏，觉得英语学习实在可望不可及，学习中被动应付，感受到的 主要是苦恼，靠毅力支撑着，绝对谈不上有什么乐趣。真是欲罢不 能，学又学不会，其矛盾心情难以言表。</p><p>　　用逆向法听写录音，什么地方听不懂，写不出等等，都是具体 的，一个一个明摆着。经过努力，听懂了，写对了，所取得的进步也 是具体的，一个一个明明白白地记载在纸上。面对这样的“成绩 单”，心中感受到的再也不是苦恼了，而是不断取得成绩的喜悦。而 付出的努力越多，喜悦之情就越高，尤其是在通过反复推敲，解决 了一个长时间困扰自己的问题时，真是“欣喜若狂”，越学劲头越 大。在局外人看来需要很强的毅力才能进行下去的自学英语，在学 习者看来则是一个必然的良性循环过程，学习英语成了一种兴起， 一种享受，哪里还需要什么毅力去支撑呢！</p><p>　　用逆向法听写，录音带中那些听不懂和写不出的地方，不但不 是使自己泄气的“障碍物”，反而会成为吸引自己继续学下去的强 力“磁铁”。在扫除一个“障碍物”以后，一定有扫除下一个“障碍 物”的强烈愿望。如此不断前进，往往不知不觉就学到了深夜一两 点，一点倦意也没有</p><p>3.2b什么是逆向法[2]<br>4．具体方法上的逆向</p><p>（1）没有现成的有形书本，也没有老师一课一课地进行讲解， 而是以录音带上无形的声音为学习内容，以录音机和各种词典为 老师，“听、写、说、背、想”五法并举，由自己写出一个课本来。</p><p>（2）通常在职人员学习英语时，往往只学与自己所从事的专业 有关的英语书刊。而逆向法则要求逆着自己熟悉的专业，有意识地 去听写与自己专业关系不大或无关的英语录音。例如搞理工的技 术人员去听写医学方面和文科方面的英语录音。</p><p>　　听写自己熟悉的专业英语时，会自觉不自觉地靠推理去搞懂 英语的意思。也就是说，主要依靠对内容本身的连解，英语本身则 不一定真正搞懂了。例如听一段有关雷达工作原理的英语录音，说 从一个蝙蝠嘴里发出声波，碰到障碍物后产生回波被蝙蝠的耳朵 接收，雷达也是用这种原理工作等等。对于一个已经懂得雷达原理 的人来说，只要听懂几个关键词，也就懂得了整段录音的意思，而 且是真正懂了。但是不是每句话，每个词都听懂了呢？不一定，而 且很可能差得很远。这样的学习方法不但学不到真正的英语，而且 远瞩容易产生一种虚假的满足感，认为自己的英语水平不错。</p><p>　　学习过程中应用自己脑子中已有知识进行推理是人们认识事 物的正常思维现象，在听写英语录音过程中很难完全避免。但是对 于英语程度不高的初学者来说，为了真正提高自己的英语，尽量不 瞩专业知识推测去搞懂英语的意思，而要主动地多听写与自己 ”无关的英语录音，而且要一词不漏的全部听写出来。在一定的 阶段上这样做可以大大提高根据发音从词典里找生词和直接从英 语本身去理解文章内容的本领，其效果比听与自己专业有关的英 勇录音要好得多。这种情况很像戏曲演员的反串，唱花脸的演员要 特意去学唱其对立面青衣，以锻炼全面的表演能力。在这方面，我 们要向专职的翻译人员学习。他们翻译的内容五花八门，今天这个 专业，明天那个专业，根本没有可能搞懂所有要翻译的专业内容， 有时甚至仓促上阵。但是由于他们的英语基本功扎实，只要临时把 有关夕一些专业名词“突击”一下就能随机应变地进行翻译。</p><p>　　由于听力水平低，不少人员对于听与自己专业联系不紧密或 玩直接联系的英语材料存在着不同程度的惧怕心理，听到一、两个 不动的专有名词，心里就慌了。其实只要基础英语知识扎实，听与 自己专业联系不紧密或无直接联系的英语材料不会有大大的难 度：其中的专有名词就是那么一些，听上几回也就记住了。有的内 容比较难懂，即使英语都听写出来了，文法也明白，但就是搞不懂 其内容含义人碰到这种情况，就不一定强求非要搞懂不可。“隔行 如隔山”，即使我们阅读汉语材料也有这种情况，一个搞电子通信 工程技术的人去看有机化学或医学方面的书刊，可能有很生僻的 汉字你不认得，或者所有的汉字都认得，但就是搞不懂文章所谈论 的内容是什么意思。</p><p>　　学习与自己专业无关的英语内容非常有助于扩大英语的知识 面和词汇量。对于非英语工作者来说，虽然不能要求他们达到专业 翻译人员的英语水平，但也要注意不要使自己的英语知识面大窄 了。无论是阅读还是口头与国外进行技术交流，涉及到的英语绝不 会局限在一个仅仅与自己专业有关的很窄的范围内，往往要用到 一些别的类别的词汇或者一个词的其他的释义。日常生活交谈，涉 及的知识面和词汇量就更广更多了。在与外国人进行日常会话过 程中，你一定会体会到“词到用时方恨少”。只有在平时的长期听 写过程中不局限于只学习与自己专业有关的英语知识，而是广开 “听路”，兼收并蓄地去学各行各业的英语单词，一个词一个词去学 去记，才有可能在会话时下意识的从嘴里说出所要说的话来。</p><p>　　在“逆向”听写过程中，可能会发生这样的情况：由于听力水平 的提高和语音知识的增多，听到一个很生僻的词，根据发音很快就 能从词典里找到所需要的词，但可能不像起步的初期那样花那么 大的功夫。与花的功夫成正比，来得快和来得容易的单词不容易在 脑子里留下深刻的印象，过不了多久就可能忘记。在这种情况下自 己可能会感到没有什么收获，怀疑是否自己的英语水平退步了。其 实这是正常现象，在听写的整个过程中，刚起步时，碰到的生词最 多，而且不是一下子就能在词典里找到，花的力气很多，因而学到 的生伺也就记得很牢。随着英语水平的提高，碰到的生词少了，即 使有也能比较炔的从词典找到，但记得却不大牢。总之，能够根据 发音很快从词典里找到生僻的词是自己英语水平提高了的一种体 “” 现，也是要锻炼的一种能力。</p><p>（3）搞理工的人要听写文科方面的录音，搞文科的人要听写理 工方面的录音。在学习英语过程中还要防止狭窄的实用观点，学习 的时候不要老是问与自己的专业结合得紧不紧，学了有没有用。 如果不紧，就认为学了用处不大，就不想学。其实正是那些与自己 的专业结合得不紧的英语课文对于提高水平才更有作用。这就是 “逆向”学习的好处。而且在实际使用中也不可能把所用的英语限 们在一个很小的范围内。</p><p>（4）英语水平提高到一定程度以后练习从汉语译文译回英语。 在英勇水平提高到一定程度以后，可以练习着把一些慢速英语的 汉语译文“逆向”译回英语去。当你“顺向”听写这些的英语录音时， 可能觉得文章写得很通俗易懂，所有的单词和语法也都明白，没有 什么深奥的。但当你练习着从汉语“逆向”译回英语时，除非你已经 把课文背下来了，否则一定会有不知从何下手的感觉。或苦思苦想 找不到合适的词和合适的语法而译不出来。或虽然译出来了，但自 己也很不满意等。然后再与原文对照，看看它是用的什么词和语 法，自己在什么地方卡住了译不出来，译得不好等。通过这样的，“逆 向学习”和对比，一定会有很大的收获，同时也会感到慢速英语还 是很有学头的，一些看起来很普通的常用词还是很有表达能力的， 关键问题是能否熟练地掌握和运用它们。</p><p>3.3a逆向法的具体做法<br>　　逆向法是一种“以迂为直”的学习方法。也许刚开始逆向学习 财，由于困难比较多，短期的实时收效可能不如“正向学习”来得 “立竿见影”，但它可以收到“正向学习”所达不到的效果。 逆向学习的具体做法——“听、写、说、背、想”<br>英语水平不高的初学者听英语录音，没有文字材料做依托，困 难很多，需要经过“听、写、说、背、想”五个步骤，逐词逐条才能真 正听懂，具体做法如下：</p><p>1．“听”与“写”</p><p>　　先把某一条录音内容从头到尾听几遍，听不懂也要硬着头皮 听。先听懂其大意，分出段落和句子，然后再以一句话为单位反复 地听。搞清楚一个句子由几个词组成，每个词在句子中起什么作 用，主、谓、宾语都是哪些词等。每听一遍就把听懂的词一个一个 按照顺序写在纸上，排列成句子，听不懂的词就先空着。对于英语 听力比较低的人来说，刚起步时听不懂的地方实在大多了，有时恐 怕连自己也说不清到底有多少处听不懂。在这种情况下，只有把听 懂了的词写出来，才能搞清楚到底有多少处听不懂。</p><p>　　对于碰到的生词，一定要听到能模仿录音正确地念出来，准确 地抓住各个音节的发音为止。因为只有准确地把各个音节的发音 抓住了，读出来了，才有可能根据语法和语音知识试拼出一些词， 到词典里查找。由于正确答案往往需要反复多次才能找到，所以听 写时要“写一行，空两行”，留下充分的反复修改的余地。为了纠正 不正确的拼写，“写”的时候稍有疑问就要查词典，并用色笔标出生<br>词和错误的拼写。</p><p>　　对于听写不出来的词，不要就“词”论“词”，一听写不出就立即 把录音机停下来，不再往下听写。应该继续听写下去，把听写不出 的词放到文章的整体内容上去理解。常常有这样的情况，孤立地去 抠一个词，百思不得其解，但若与整句话，整条消息联系起来去理 解，思路就宽了，往往也就知道是什么词类和怎么拼写了。</p><p>　　有时同一个生词在录音中多处出现，一处听不清或听不懂，可 以先放一放，看看能不能从别处得到启发。因为可能别处的录音很 清楚，或者与别的词搭配在一起被你听懂了。听写过程中，对于没 有确切把握的词，也要先“写”出来，再在以后的不断听写过程中去 校验和纠正。同一新闻在不同的时间由不同的播音员播出时，由于 各人的语调有区别，有助于听懂一些疑难词的发音。</p><p>　　“听”与“写”两个步骤不是截然分开的，对于英语水平不高的 初学者来说，一段录音的听写不是一次就能完成的，而是要经过多 次的“听”与“写”互相促进，互相启发，交替前进才能最后完成。</p><p>　　从学习英语的角度出发，初学者在起步阶段必须一边听一边 写。，如果光听不写，可能会有以下两种情况。一是漏掉了一些听不 但的词，失去了学习和提高的机会；二是有了听不懂的词时，如果 只听不写，往往听的遍数再多也可能还是听不懂，但是如果把听懂 的部分写在纸上，前后内容联系在一起，经过思考以后再去听，可 能又会听懂一些别的内容，如此不断反复，直到全部听懂。</p><p>　　由于严重杂音干扰而无法从语音人手推断的词，可以根据语 法进行补充，就假定自己是这条新闻的作者，在听不清的地方应该 用什麽词。或许填上去的词不正确，但总比空着好，而且随着听录 行时间的增长和英语水平的提高，自己也有可能发现并改正。</p><p>2．“说”与“背”</p><p>　　整扁文章听写出来以后，就要学“说”。方法是：听一句播讲人 的话，自己学说一句。学“说”时尽量使用能不断重复一段录音内 容的电子录音机，根据自己的水平确定学“说”的时间长度，尽量 “说”完整的一句。</p><p>　　学“说”过程可以分两步走：第一步是“比读”，即把自己学“说” 的语音录下来，与录音带上标准的语音对比，看看什么地方学得不 像，如此不断重复，直到能模仿说出大体上正确的语音为止；第二 念与录音带上的声音同步“说”。</p><p>　　学会“说”以后，就要“背”了。把一段录音的听写记录翻来覆去 地高声朗读，达到基本会背诵的程度。“背”对于提高听力有很大的 作用：例如慢速英语新闻广播有一定的格式和句型，：‘背”上一段时 间的消息以后，就会熟悉它的风格和常用的句型，就比较容易听懂 新的内容、有时甚至可以超过播讲人的声音，听了一句话中前面的 几个词后能提前说出后面的一些词，或听了上一句话后能提前说 出下一句来。到了这个地步，听写时的紧张心情就减轻了，或者基 本上消除了。心情一放松，水平就能发挥出来，应该听懂的也就能 听懂了。</p><p>3．“想”</p><p>　　 如果前面“听、写、说、背”四个学习环节突出了“苦干”精神的 话，那么“想”这个环节就主要是讲怎样在“苦干”的基础上“巧干” 了，就是要求在整个学习过程中做一个“有心人”，善于开动脑筋。 “想”的内容有以下三个方面：</p><p>　　首先是想一想学习的进度是否合适，学到的知识是否扎实，本 书提出的学习要求达到了没有。前面已经提到，由于学习进度是自 己掌握的，不知不党的会加快学习进度。由于没有客观考核，即使 学得不深不透也还自以为学得不错。所以在整个学习过程中，尤其 是在打基础阶段、要经常告诫自己“慢些，慢些，再惧些”，时时检查 学到的知识是否扎实。如果不扎实则坚决重新学。</p><p>　　其次是总结和归纳学习方法方面的经验和教训。和学任何别 的知识一样，只有经常总结和归纳的人才能学得快学得好。每个人 所处的环境不同，学习过程中不同阶段碰到的困难不同，因此取得 的经验和教训也不同，应该及时地进行归纳和总结。自己总结和归 纳出来的经验和教训，适合自己的情况，用来指导自己学习，效果 特别好，可以收到事半功倍的效果。进一步说，自己总结和归纳出 来的经验和教训可能对别的人也有参考价值。孤立地去看，每一个 具体的经验和教训都是很小的，不系统的，没有多大价值。但是积 累多了，量变引起质变，可能会成为系统的、有价值的、有一定新意 的一种方法。</p><p>　　最后是总结和归纳学到的英语知识，使之系统化，记忆深刻 化。例如每学到一个单词或一些文法知识，要好好地想一想，过上 一段时间还要很好地归纳整理一下。归纳和总结的一项主要内容 是分析自己在听写过程中所出现的各种各样差错。实践证明，通过 分析自己的差错进行学习，效果特别好。例如有的内容听写不出 来，有的听写错了，有的听懂了但写得不对等，就要分析原因和找 到避免的方法。就拿单词来说吧，如果听写中自己不会的单词，多 次试拼出来的词在词典里都没有，或虽然词典里有，但不是所要的 答案，最后通过别的途径找到了真正的答案，就要很好地总结一下 为什么自己多次试拼出来的词都不对，是不是没有准确地抓住播 讲人的发音，还是自己的语音知识不高，或是碰到什麽特殊的发 音。每学到一个新的单词，都应该在拼写、发音和释义等三个方 面与自己已经掌握的单词进行对比，找出异同点，以形成“联系记 忆。发音和拼写上有特点的词要倍加注意，看看能否找到记忆的 窍门。对于语法也是一样，如果理解不了或理解错了，就要找语法 书来看，搞清楚正确的理解应该是什麽，自己为什麽理解不了，或 者自己的理解错在哪里等等。</p><p>3.4 逆向法的优点<br>3.4 逆向法的优点</p><p>逆向法“听、写、说、背、想”五法并举，使脑子的潜能得以充分 地发挥，具有许多优点：</p><p>（1）能迫使学习者注意力高度集中，充分调动其主观能动性和 学习积极性。通常的正向学习从现成的书本出发，由老师一课一课 他讲，学习者被动地接受现成的知识。因为老师讲的大部分内容书 大部有，很容易使要求不高的人产生与老师的讲授“不同步”的现 仅。例如老师在讲前面的，学生却翻看到后面去了。也很可能老师 在苦口婆心他讲解，而学生却不注意听，在想别的等等。即使表面 上注意听老师讲解，但仍可能是仅仅被动地跟着老师的思路，而没 有积极地开动自己的脑筋，充分发挥出主观能动性和积极性。听别 人讲解时很容易产生“似懂非懂”。讲的人是懂的，讲起来头头是 道，听的人似乎都懂，但实际上却不一定真正掌握了。从“似乎听懂 懂、到真正懂之间还有一段不小的距离。</p><p>　　用逆向法学习，没有现成的书面课本，而以录音带为学习内 容，以录音机和各种词典为自己的第一老师，学习者的思维完全受 “老师”（录音机放出来的声音和查阅各种词典）的制约，与之同步。 录音机不停地转动，放出来的声音连续不断，迫使听者的注意力高 度集中，稍有疏忽就得重来。对于难以集中起自己注意力的人来 说，确实是一种好方法。</p><p>　　用听写的方法由学习者通过自己的艰苦努力，一个词一个词 地写出一个课本来。由于学习者本身是课本的主动“创造者”，因而 会有很强的参与意识，能充分调动学习者的主观能动性和学习积 极性。</p><p>　　正因为充分调动了学习者的主观能动性和学习积极性，在局 外人看来似乎是枯燥无味的听写英语录音，却有很强的趣味性和 吸引力。不少用逆向法学习的人都反映，只要一坐下来听写，三四 个小时不知不觉地就过去了。</p><p>　　不少人用正向法学习英语时，听教员讲的，或看书上写的，似 乎都懂都会，实际上却不一定真正掌握了。可是自己却又不能意识 到这一点，等到发现时可能已经进展了好凡课了，补不上了，只好 放下不学了。</p><p>　　采用逆向法学习就没有这个问题，一般说来能独立地正确听 写出来的内容就是真正掌握了，从我学习和辅导别人学习过程中 积累的经验看，还没有碰到过一个能独立地正确听写出来全部课 文而不懂英语内容的情况（至于是否能完全懂得文章本身内容则 是另外一回事，因为有的文章内容比较难懂，即使英语全部听写出 来了，也不一定懂得其内容）。</p><p>（2）融各种英语知识的学习和能力的锻炼于一体。逆向法的 “听、写、说、背、想”五法并举，是比通常的正向学习要难得多的一 种学习方式。它把发音、语调和语感、单词的意义和拼写、句型、文 法等等知识的学习和运用融于一体。在反复听的过程中，不知不觉 地掌握了单词的发音、重音和朗读的语调；在不断地猜测和查字典 ·69· 过程中，不知不觉地学到了很多发音规则并牢牢地记住了猜出来 的词；比较简单的课文，等到基本正确地写出来的时候就已经会背 了；对于各种常用的句型也很熟悉了；长期听写，对于英语的语法 确构也就习以为常了：能用英语的思维方式直接接受英语了等等。</p><p>　　发音、语调和语感是不少英语学习者的一个难点和弱点。一般 说来，只有自己的发音基本正确了才能听得懂播讲人的话。常常有 “这样的情况：有某个词听不懂，最后通过各种办法找到了这个词， 却原来是一个认识的词，因为自己原来的发音错了或重音读得不 对才听不懂的。在听写过程中学“说”的阶段，播讲人说一句，自己 要学一句。虽然不一定能学到维妙维肖的地步，但总会八九不离 十，达到发音基本正确，别人基本上可以听得懂的程度。这样坚持 学上一段时间，会不知不觉地掌握一些英语语音、重音、语调以及 同化、连读、省音和弱读等知识。</p><p>　　学习英语语音、重音、语调以及同化、连读、省音和弱读等等最 初效的方法是听由英美人朗读的录音带，然后反复模仿。十几年以 前，录音机很不普及，无法做到这一点，因而不得不依靠音标和升 降符号等辅助手段。现在，录音机已经普及，客观条件已经改变了， 但是不少人仍然沿用老方法，学习一个多音节单词时，在记住 它拼写的同时，还必需记住每个音节中的元音怎么发音，单词的重 音在哪个音节上等内容。这样的学习方法不但大大增加了记忆量， 而且在应用时（例如朗读书面文章），对于见到的多音节单词，往往 还要判断一下每个元音发什么音、整个词的重音在哪里等等，不能 立即读出。而且经常口不从心，脑子里想发某一个音，但是嘴里读 出来的却是另外一个音。差错较多，不是元音的发音不对就是重音 的位置不对。而通过“听”标准的录音带学习的人，一个英语单词的 语音知识是作为一个完整的声音形象记在脑子里的，应用时能准 确的脱口而出”，但不一定能立即说出每个音节中的元音怎么发 音和单词的重音在哪个音节上。更何况有些语音现象很难用书面符 号准确地表达出来，只能靠听和模仿地道的录音才能学会。</p><p>　　对于初次碰到的英语单词，由于“先人为主”的关系，一上来就 要把它读对，否则事后费很大的劲也不一定能纠正过来。</p><p>（3）学到的英语知识印象深，记得快记得牢。不少人学习英语 过程中感到最头痛的一个问题是记不住生词。研究记忆的科学家 们指出，记英语单词，不能完全靠机械的死记死背，而是要靠“听、 说、写、背、想”五法并举，耳、嘴、手、脑同步动作。这样做，视觉、听 觉和口腔肌肉以及手部肌肉运动等在脑子里产生的印象就会很 深。最近的脑科学研究表明，人们在听、写（写的同时也有“看”的过 程）、想、说时用的是脑子的不同部位（详见Scientific American， September l992）。所以逆向法“听、说、写、背、想”并举，耳、嘴、手、 脑齐开动，是全面利用脑子的潜力，而不是单打一，所以其效果必 然很好。</p><p>　　播讲人的声音和自己复诵的声音，能使人精神集中，排除外界 的各种影响。特别是当脑子发胀，不大清醒时，声音的效果尤其明 显。</p><p>　　在听写过程中不断地用手书写英语单词，可以形成“运动记 忆”。书写的次数多了，会“习惯成自然”，需要时手就能“下意识 的”把想要的词“信手拈来”，好像没有经过大脑一样。</p><p>　　综上所述，采用“听、写、说、背、想”五法并举的学习方法，手、 耳、眼、嘴四者同时把信息送到脑子里去，学到的英语知识是作为 一个整体存在的，而不是零碎的、孤立的。所以有的读者形象地把 自己用“正向法”学到的英语知识比作分立元件电子线路，不但体 积大、费电（学习花的时间多），而且故障多（学到的知识不完整，不 准确）；而用逆向法学到的知识则好像是集成电路，不但体积小、省 电（学习花的时间少），而且故障少（学到的知识完整，准确）。学习 中遇到的问题都是经过自己不断地推敲才解决的，所以印象深，记 得牢 。</p><p>　　自我解决问题以后为什么记得牢？道理很简单，就好像我们到 了一个陌生的地方，要认路一样。如果是别人带着去的，或是坐汽 车去的，即使去了几回、十几回，到头来也还不一定能独立地知道 怎么去。反之如果是自己一边问着一边找着去的话，恐怕去一次就 能牢牢地记住。这个优点对于中年人来说尤其重要。因为他们的 理解力强，如果是拿着书本进行正向学习的话，往往是一看就懂， 一过就忘。而采用逆向法学习，没有现成的书本可以看，一边听写 一边理解和记忆，听写出来了，也就真正搞懂了和记住了。</p><p>（4）大大提高英语的熟练程度。听写时，自认为听懂了的词和 句子都要写出来，句子结构要符合语法，每个单词的拼写要准确无 误，没有把握就勤查语法书籍和词典，以纠正不准确的语法知识和 拼词拼写。 不断的“听、写、说、背、想”各种单词和句型，不但可以把原来“晃晃悠悠”的英语知识固定下来，把“滥竿充数，，的剔除出去，而且可以在脑子中形成音形一体化的英语形象，只要听到一个词的 发音，脑海中会立即浮现出这个词的形象，反之也是一样，只要看 到一个词的形象，耳边似乎会立即响起这个词的声音。到了这种程 度，说明你的英语熟练程度已经大大的提高了。</p><p>　　“熟能生巧”。熟练到了一定程度，对英语就会有特殊的“敏感 性”和“明察秋毫”的能力。阅读一篇英语文章，一遍看过去，就可以 抓住大意和关键词。如果是看手稿，可以很快把不合适的地方和各 种差错挑出来。熟练到一定程度，还会形成对英语单词的“整体识 别”能力，即能从某一个英语单词在句中所处的位置、词中的某几 个字母、词的长短等上去识别一个英语单词的含义，而不是每看到 一个英语单词，先逐个字母的默念一遍，然后再去思索是什么意 思。这种内行和外行之间识别事物能力上的质的差别是普遍存在 的，并不是学习英语所特有的。例如一般的人听嘀、嘀、哒、哒” 莫尔斯电码感到毫无规律，但是报务员听起来却是一串串有意义 的数字或字母，水平高的报务员甚至还能从“嘀、嘀、哒、哒”的细微 差别（即报务员所谓的“手法”）中识别出对方是谁。又如看一张电 视机的原理图，上面密密麻麻地布满了各种各样的元件，在外行人 看来，不知哪个接着哪个，但对于有方框图和电视信号流程概念的 内行人看来，是完全有规律的。</p><p>　 　听写搞多了，习惯成自然。即使有的时候只听不写，但脑子里 仍然会自动地显现一行一行的词和句子来。这种思维能力是任何 人都有的，只是程度不同而已。人们都有这样的体会，对于自己很 熟悉（必须是很熟悉，而不是一般的熟悉）的事情，只要一回想，各 种情景历历在目。学理工的人思考各种问题，物体的形状和相互关 系位置就画在自己的脑子里。棋手下棋，熟到一定程度棋盘就在脑 子里，能清楚地回忆出来一场比赛的每一步棋，两个人可以躺在床 上下盲棋，如此等等。</p><p>（5）一定程度上也可锻炼“说”英语的能力。虽然听录音是单方 向的，但是由于在听写的基础上增加了一个“说”的环节，一定程度 上也可使“说，’英语的能力得到锻炼。起码可以做到如俗活所说的 “舌头不发硬”。坚持不断地“听、说、背”英语，熟练到了一定的程 度，在与外国人对话时，不知不觉会从自己的嘴里说出一些语句 来。真是“熟读唐诗三百首，不会吟诗也会吟”，而且符合英语语法。 由于日常会话所用的词汇与科技慢速英语所用的词汇有很大的不 同，这里所介绍的“说”并不能代替口语的训练，想学日常英语会话 的人仍然必须去学英语会话读本。</p><p>　　作者在不同层次的人中间大力推行逆向法，只要肯放下高学 历（尤其是本科生和研究生）的包袱，坚持用这种方法学到底的人， 都获得了成功。逆向法强调基础知识的极端重要性和从听力人手 学习英语的做法，对于中学生和大学生的英语学习也是适用的。例 如每学习一课，都坚持做到能听懂该课的录音（听），能默写出该课 的课文（写），能朗读和背诵该课的课文（说和背），能把该课的各种 渊归纳整理出来（想）。只要坚持这样做，把课本上的内容学好 了英语综合能力一定会得到全面的提高。不但会看，而且能听能 说，成为同类学生中的佼佼者，比那些不重视课本学习，热中于课 外提高和强化的人的英语水平要高得多。</p><p>3.5 灵活运用逆向法[1]<br>　　以上介绍了如何“逆向”学习英语的方法及其优点，其他各种 书刊上也介绍了不少学习英语的方法。所有这些学习方法，都是作 者们的经验之谈，都有一定道理。应该怎样对待这些方法呢，</p><p>1．在苦学的基础上巧学</p><p>　　可以说各种行之有效的学习方法都是讲怎样在苦学的基础上 巧学的。以上详细TAHBT逆向法的具体做法和优点，这种方法更是 突出了“苦学”的作用，强调要有“悬梁刺股”和“韦编三绝”的学习 精神，翻来覆去地学，不这目的绝不休止。学习英语与学别的事情 一样，要想有所成就，必须付出艰苦的劳动。对于学习中的困难，与 其设想得少一些，不如把困难设想得多一些。对于达到一定的学习 目的所需的时间，与其设想得短一些，不如设想得长一些。以免碰 到困难或短期看不到明显的进步而灰心丧气，为此本书对学习英 语过程中可能遇到的各种各样的困难及克服的办法做了详细的说 明，以使读者有充分的思想准备。</p><p>　　再有效的学习方法和先进的电子教学设备都代替不了你自己 的努力。先进的工具和有效的方法也只对肯下功夫的人才能充分 发浑出效能。正如俗话所说：“师傅领进门，修行在个人”。因此不 要老是在方法上“兜圈子”，企图找到一种不费很大力气就能提高 英语听力的方法。可以肯定他说，找不到这样的方法。</p><p>　　其次是在学习别人介绍的各种方法时，必须结合自己的情况 灵恬运用，不要生搬硬套。把别人介绍的各种方法变成自己的东西 要有一个过程。看几遍书上介绍的学习方法，似乎是理解了，其 实不一定。因为“感觉到了的东西，我们不能立刻理解它，只有理解 了的东西才能更深刻地感觉它（毛泽东：《实践论》）”，只有在自己 的不断实践中才能一步一步领会各种方法的要领。最后是在学习 别人介绍的各种方法同时不要过分迷信这些方法，被这些方法限 制住自己的主观能动性和创造性。只要在学习各种方法的同时结 合自己的情况，用心思索，不断总结，就一定不但能学到这些方法 的精神实质，而且还能总结出自己所特有的学习方法来，正是这些 自己所特有的学习方法才是最有效的。</p><p>3.5b 灵活运用逆向法[2]<br>2．学生如何运用逆向法</p><p>　　本书绝大部分章节以在职人员如何学习慢速英语为讲解对 象，但是作为一种学习英语的方法，也适用于在校的大中学生学习 英语。学生运用逆向法时，要紧紧围绕当前的课程，以所学课程的 录音带为听写教材，“听、写、说、背、想”五法并举，脚踏实地，每学 一课，都能正确的朗读课文，能听懂该课的录音，主要的课文还应 能熟练地背诵出来。笔者曾碰到过普通中学英语成绩中上的初二 学生，在用逆向法学习英语以后，对英语的兴趣急增，英语水平提 高很快，到初三下学期就能听懂慢速英语广播，高中一年级就通过 了CET－4考试。</p><p>　　在校大中学生切忌好高骛远，不要在英语水平很一般的情况 下丢下当前课程去学什么课外的英语教材。</p><p>3.5c 灵活运用逆向法[3]<br>3．用逆向法学习口语效果好</p><p>　　很多人学习口语时一边听录音带一边看书，似乎没有什么不 懂的，但是却并没有真正掌握。例如一位毕业后已经工作的硕士， 曾几度想提高口语能力都没有如愿。后来严格按照逆向法的要求 学习《英语900句》，一句一句地听写了200余句，水平提高很快， 不但在博士生入学考试时听力得分高，入学后也常常因为口语表 达得好而得到外籍教师的称赞。他深有体会地对笔者讲：“以前不 知学过多少句，但是由于学得不扎实，到了用的时候说不出，勉强 说出来，也是Chinglish,扎扎实实地学了200多句以后，就基本上 能表达自己的思想了，逆向法从基本功入手的效果就是好！”</p><p>　　把常用的同语和句型背得滚瓜烂熟，就可以与外国人进行一 般的交谈，反之，即使学了许多复杂的词语和句型，到时候还是说 不出，即使说出来，用的可能还是一些比较难的词。例如有的人学 口语时学过表达某一件事情很容易做时，可以用It is a piece of cake、no sweat、It is a snap、snap、It is easy和It is not difficult等六种方式。由于前四种方式很生动，很口语化，是地地道道的英语口语，所以他们的兴趣和注意力完全集中在前四种方式上，而不注意熟练地掌握最容易的后两种。结果到了真正要用的时候，涌现在 脑子里的是piece、cake、sweat、snap等比较不常用词，自己的注意 力也集中到回忆这几个句型上，稍有遗忘或不熟练，即不能脱口而 出。其实对于一般人来说，能熟练地用It is easy和It is not diffi- cult也足以表达自己的思想了。</p><p>　　基础英语不熟练的人在与外国人交谈时，事先反复思考，把自 己想说的话从汉语译成英语，等到认为有把握了，才张口说。可是 在说的时候，由于种种原因，说到一半可能“卡壳”，事后可能又会 把。‘卡壳，，的原因归纳为“词汇量不够”。其实只要熟练地掌握了中学英语（或本书所介绍的慢速英语），达到“熟”和“化”的地步，想说什么就能召之即来，与外国人进行一般性的交谈应该是不成问题 的。例如一次一位研究生在展览会上想问于现场讲解的外国人，他 们公司在中国有没有办事处一类的机构。思考后想用Is there any representative in China？的句子去问。可是临到要说的时候，说不 出representative一词的准确发音，外商听不懂。其实如agent、a- gency、 office、 branch、 department、 division等词都可以用来表达这个意思，可是这些词在脑子里还没有熟到召之即来和脱口而出 的地步，一着急就一个也想不起来了。</p><p>第四章  逆向法学习慢速英语三阶段<br>4.1 为什么要学special English<br>　　已经学过英语，但是英语基础知识不扎实的人，想在英语能力 上有一个质的飞跃和提高，应该从哪里入手呢？最好是从基础英语 入手，一步一步”学下去。这样做也许刚开始感到收获不大，进展缓 慢，但坚持下去可以收到明显的实效，总体效果是很好的。</p><p>　　这个过程很像学游泳。不少没有经过正规训练的人会“狗刨” 式”，从“会”和“不会”的角度来看，会“狗刨”就应该认为是会游泳了，淹不死了。但是“狗刨”是很落后的，游上几十米就精疲力尽，很难游长距离，所以实用价值不大。要想有突破，能游长距离，必须学 会标准的姿势，例如“蛙泳”等。是不是可以在“狗刨”式的基础上学 “蛙泳”呢？不行，必须彻底放弃“狗刨”式，从头学起，一个动作一个动作地学，先学蹬腿，后学手脚配合，再学抬头换气等等。坚持这样 学，开始时成效是比较慢的，但总的来看还是快，一学会就能游上 百米，练习上一段时间就是上千米。但是如果自以为会了“狗刨”式 就等于会游泳了，因而不肯虚心从头学起的话，到头来可能还不如 那些原来一点也不会的人游得好呢！</p><p>　　这种情况也很像盖了一栋质量不好的楼房，从表面上看要什 么有什么，但几乎什么都不好用，地面不平，门关不严，窗户漏风， 上下水不通，暖气不热等等。这样的房子并不是不能住人，而是住 着不舒服。出现这种情况，有两种办法，一是推倒重盖，严格按图纸 要求施工，尤其要把基础搞好。另一种就是什么不行修什么，对于 急需的人来说也不失为一种方法。但房子中各个要素是互相联系 的，如暖气不行，只修暖气本身还解决不了问题，它与上下水，门窗 的密封好坏都有密切关系，因此总会有修不胜修的感觉。如果再在 这个不牢固的基础上去加高楼层，后果就更不好了。</p><p>　　有的人在基础英语知识不扎实的情况下三番五次地“强化”、 “提高”，就很类似以上两种情况。不少人非常重视英语学习，从初 中算起，光是课堂上的英语学习时数就高达1100小时以上，加上 自学花的时间就更多了。但是如果基本的英语知识学得不扎实，仍 然不可能达到顺利地阅读英语书刊和“听”、“说”英语的目的。可是 不少人往往对于自己基础英语知识不扎实的问题缺乏清醒的认 识。走向工作岗位以后，三番五次地进各种各样的英语速成学习 班，进行强化和提高，囫囵吞枣地学了不少高深的英语知识。由于 基础不牢固，学到的这些高深英语知识也往往没有在自己的头脑 中生根，过不了多久可能也就忘记了。这样的事情重复多了，就会 使人丧失信心，似乎英语是很难提高的，形成英语学习上的夹生饭 现象。</p><p>　　认真地一步一步地循序渐进地学习基础英语知识，就是克服 这种夹生饭现象的一个有效的方法。学习英语也是“伤其十指不如 断其一指”，不要搞击溃战，而应该槁歼灭战，学一点就真正掌握一 点。这样做，看起来似乎是慢，其实是快。采用逆向法听写英语录 音带，一个词一个词，一个语法知识一个语法知识地进行过滤和加 固，就是一剂治疗英语学习中的顽症和夹生饭的良方。</p><p>　　选用什么样的录音带作教材好呢？首先是不能大难了，要可望 可及。有的人主张一上来就听语速很快的Standard English，认为 慢速英语水平太低。也许这也是一种途径，但从笔者自学和辅导 别人学习的经验看，效果不一定好。因为刚开始听写的时候存在一 个信心问题，要使初学者能看到自学的成绩。听难度比较大的 Standard English一下子不容易听懂，看不到自学的成绩。同时也 不要听大容易的内容，要选一些·经过努力可以听写出来的录音带 作为教材，只有这样才会有提高。正如同打乒乓球、下棋一样，只有 与比自己水平高的人去下、去打，水平才能迅速提高，老是与水平 比自己低的人去下、去打的话，水平提高不会很明显。</p><p>　　符合这种要求的磁带很多，其中以专为母语不是英语的初学 者设计的慢速英语（或相当的教材）最为合适。</p><p>4.2SpeciaI English的特点<br>　　近年来不少人为了提高“听”、“说”英语的能力，跟学过不少英 语电化教学节目。为了增强“实战气氛”，这些节目中常常穿插一些 英美等国人日常生活中的对话片断。尽管他们平时确实就是用这 种正常速度讲的，但对于我们初学英语的中国人来说，连珠炮似 的，讲得实在太快了，听不懂。有时即使拿着他们对话的脚本，也不 一定能跟得上，这种情况碰得多了，就会使人望而生畏，感到听外 国人讲英语是“高不可攀，可望不可及”的，动摇了学习的决心和信 心，回而不少人不能坚持到底。</p><p>　　类似的问题不光是我们中国人有，别的国家的人也有。二次世 界大战以后，对英语感兴趣的人日益增多，但是他们的英语水平一 般又都不太高，难以听懂正常语速的普通英语。为了适应非英语国 家的入学习英语的需要，美国的VOA电台从1959年10月19日 开始，开播了一个名为SpeciaI English的节目。英国BBC广播电 台从1989年：月开始也开播了SpeciaI English节目。有的电台 为了适应初学者的听力水平，广播英语教学课程时，也有用类似于 SpeciaI English的语速播送课文内容的。</p><p>　　VOA的SpeciaI English节目一般历时半小时，依次为10分 钟的News，接着为5分钟的Environment Report （Monday）、A griculture Report （ Tuesday ）、Science Report （ Wednsday and Thursday ）、Development Report （ Friday ）、People in the News （Saturday）、Words and Their Stories （Sunday），最后是15分钟的 This ls America （Monday ）、Science in The News （Tuesday）、Ex ploration （ Wednsday ）、The Making of a Nation （ Thursday ）、</p><p>American Mosaic （Friday） ‘ American Story （Saturday）、People in America （Sunday）等。</p><p>上述各种节目中，以News为最难，因为它覆盖范围广，政治、 经济、军事、文化和科技等等，用词量比其他节目多，理解时需要各 种背景知识。但是如果连续听，听懂前一天的内容后很利于听懂以 后同一事件的消息。</p><p>　　SpeciaI Englis匕有译为“特别英语”的，也有译为慢速英语 的，本书采用慢速英语的译法。因为正是“慢速”二字比较准确地反 映了它的特点，它“特别”就特别在“慢速”上，因而是一种比较容易 学习的英语。如果只说“特别”，初学者猛一听可能还以为是特别难 的英语呢！而且近年来VOA已渐渐地用Slow一speed English（慢 速英语）取代SpeciaI English，认为它的主要特点是“clear1y， slowly and understandably， one word at a time”。</p><p>与正常语速的普通的英语相比，慢速英语有用词浅显，播送速 度缓慢，句子结构简明扼要等特点。</p><p>　　用词浅显：据’VOA的Voice杂志称，英语约有单词150000 个左右。VOA的Standard English用的词汇量约为90000个。考 虑到初学者的英语水平，SpeciaI English大体上只用1500个词左 右（详见中国对外翻译出版公司出版的VOA彬eciaI En功sh Wordbook一书），约为英语总词汇量1／100。</p><p>　　播送速度缓慢：SpeciaI English的播送速度为每分钟不超过 90个单词，而“standard English”的播送速度为每分钟约135个 单词。</p><p>　　句子结构简明扼要：SpeciaI English节目特别注意简化句子 的文法结构，一个句子只表达一个意思，每个句子的书写长度一 般不超过两行。</p><p>　　上述三个特点中最关键的是“慢速”。它准确地抓住了初学者 的难点，即使反应比较谩的中年人也能跟得上。虽然英美人正常讲 话时从来不用慢速英语，但作为学习的一种途径来说，攻慢速度实 在是关键的一着。它犹如体育训练中的“分解动作”和军队队列操 练中的“拔漫步”给初学者留有充分体会和回味的时间，非常适合 母语不是英语的初学者的要求。</p><p>　　至于慢速英语的用词范围是否限制在VOA SpeciaL English word一书所列出的1500个词的范围内并不是一个很关键 的问题，实际上也很难完全做到这一点。为了叙述五花人门的事 物，必然会碰到一些这1500个单词无法表达的事物。试设想一下 人身体上各种各样的器官名称有多少，各种各样的疾病又有多少， 1500个词是肯定不够用的，尤其在报导科技消息时就更是这样。 例如在一则报导Voyager一II Spacecraft（旅行者二号飞船）的消 息就有Neptune（海王星）、Jupiter（木星）、Saturn（土星）、Uranus： （天王星）、Venus（金星）、Mars（火星）和Hallev、comet （哈雷替 星）等七个专用名词。至于现代科技发展迅速，新词更是层出不穷， 不少有关最新科技动态的科技消息中用了不少专业性很强的词， 有的还相当生僻，一般英汉词典里查不着，或者甚至是刚流行开来 的新词，还没有来得及收入国外刚出版的词典。</p><p>4.3 SpeciaI English值得学</p><p>　　也许有的人一听“慢速”二饲，就认为一定是一种水平很低的 英语。再看看别人已经听写出来的记录，都是一些很平常的词，因 而可能不肯下功夫去学，去钻研。其实这些最常用的词是英语的基 础。学习数理化课程，非常强调循序渐进，比方说学数学，只有学了 代数才能学解析几何，学了解析几何才能学微积分。试设想如果一 个人没有学过解析几何就去学微积分的话，恐怕是听不懂的，而且 连问题都提不出来。英语的情况则有些不同，低、中、高英语知识之 间的衔接没有数理化那样明显和严格，一个英语水平很低的人偶 尔可以学会几句非常地道的英语，可以用一个英语生僻单词问倒 英语水平比自己高的人。但是无论如何，英语的基础知识是很重要 的。俗话说得好：“万丈高楼平地起”，只有把基础英语学好了，才 有可能学习高深一些的英语知识。对于提高听力来说，听慢速英语 是打基础，慢速英语学好了，听力可以得到相当的提高，一般情况 下基本上可以听懂外国人的技术讲解。慢速英语用的都是一些最 基本的词汇。即使在一般的英语中，这些最基本的词汇的使用频度 也是很高的。美国语言专家Thorndike教授在Teacher，了Word Bo毗一书中以统计的数字说明了不同词汇量的用量百分比如下：</p><p>　　词数 百分比（％） 词数 百分比（％） 100 58．83 3500 98．30 500 82．05 4000 98．73 1000 89．61 4500 99．OO 1500 93．24 5000 99．20 2000 95，38 5500 99．33 2500 96．76 6000 99．46 3000 97．66</p><p>　　从以上数据可以看出，基础英语词汇量的使用频度很高，熟练 地掌握这些基本的英语词汇是学习英语的出发点。</p><p>　　清朝文学家郑板桥在谈到学习方法时提倡对于基本的知识千 万不要“眼中了了，心下匆匆，方寸无多……一眼即过”，而要认真 学习，深入钻研。而只要这样去做，那就一定会达到“愈探愈出，愈 研愈入，愈往而不知其所穷”的境地。我在学习和钻研慢速英语的 过程中就是这样去做的，也确有“愈探愈出，愈研愈入，愈往而不知 其所穷”的体会，觉得慢速英语是值得学的。</p><p>　　学习慢速英语的另一个重要收获是提高灵活运用词语的能 力。由于慢速英语节目的编写者们有很高的英语水平，他们常常用 一些普通的词表达复杂的事物，例如：</p><p>　　提到“手榴弹”时，不用grenade，而用small bomb； 提到“地雷”时，不用mine，而用buried bomb；</p><p>　　提到“扫雷艇”时不用sweeper，而用It is a kind of war ship that destroys floating bombs等等。学习中要注意体会这方面的 内容，以提高自己灵活运用普通词表达复杂事物的能力。从一定意 义上讲，只有英语水平很高的人才能用好和用活最普通的词。例如 初中英语中The Monkey and Crocodi1e、The Fisherman and the Genius，课文所用词汇量只有二三百个，故事情节绘声绘色，只有 英语水平很高的人才写得出来。</p><p>　　本书以慢速英语广播录音带为听力教材和解说对象，以轻松 自如地如同听汉语广播一样听懂慢速英语作为精通的标准。对于 非英语专业的人来说，这个标准并不低，必须脚踏实地逐词逐句地 抠一段时间才能达到。实践表明，对慢速英语精通到这个程度，就 能顺利通过CET-6等的听力考试，就能听懂本专业技术交流中的 英语讲解，可以承当部分口译任务。</p><p>4.4 学习SpeciaI English的三个阶段<br>　　初学者从一开始听不太懂到最后能轻松自如地听懂慢速英 语，大体上要经历“边听边写”的起步阶段、“只听不写”的巩固阶段 和即收即听即懂慢速英语广播的扩大听写范围、进一步提高听力 的深化阶段。</p><p>　　阶段区分的定性标准主要是听力水平的高低。表现在辨音能 力、熟练程度（是否听到就能反应、能否习惯成自然地“脱口而出”、 对词义的理解是否比较广）、思维方式是否符合英语习惯（能不能 直接用英语去思维和理解，听的时候脑子中有没有逐词逐句从英 语到汉语的翻译过程）、听写时心情紧张不紧张（碰到听不懂的词 能不能甩掉，影响不影响后面的收听）、掌握词汇量的多少等几个 方面。</p><p>阶段区分的定量标准主要是听写一分钟录音所花的时间和碰 到生词的情况。</p><p>1．起步阶段</p><p>　　不少中学或大学毕业的人掌握了数千英语单词，能阅读，但听 不懂，说不了，基本是“哑巴英语”。他们刚开始听慢速英语广播录 音时，由于辨音能力差，很多听不懂的词写出来看却是自己认得和 会拼写的，只是由于发音不正确或不适应同化、连读、省音和弱读 等而听不懂，误以为是生词。由于听力差，听的时候必须全神贯注， 因而心情紧张，碰到一个不懂的词脑子就惜了，往后就再也听不懂 了，所以只有采用逐词逐句“边听边写”的方法才有可能搞懂部分 内容，多次反复才能全部搞懂。</p><p>　　这一个阶段的最主要特征是脑子里没有准确的语音形象，辨 音能力差，听了下句忘了上句，思维方式不符合英语习惯，不能直 接用英语去思维和理解录音带的内容，听的时候脑子中明显的有 一个逐词逐句从英语到汉语的翻译过程。</p><p>　　在这一阶段上，思想上要非常明确，听录音带的目的是为了学 习英语，而不是为了获取什么新的信息。所以最好是听写现成的录 音带，而不要自己动手录制慢速英语广播，因为短波广播的信号不 太稳定，录制起来比较费事，更不要好高骛远地去听实时的慢速英 语广播。只有到这个阶段的后期，为了检查自己的水平，可以试着 听听实时的慢速英语广播，并录下来听写。</p><p>　　在起步阶段的初期，由于听力差，十分钟录音内容里约有 30～40个次生词，其中的20～30个次是“写出来认得，听起来不 懂”的“生词”，真正的生词只有十来个次。此时听写出一分钟录音 内容需要花60～100分钟。</p><p>　　随着听力水平的提高，到了起步阶段后期，十分钟录音内容里 约有3～4个次生词（已经掌握了大部分常用的人名和地名等专 有名词），基本上没有“写出来认得，听起来不懂”的生词了，此时听 写出一分钟录音内容只需要5分钟左右。</p><p>　　同样是播送慢速英语，不同播音员的风格不一样，有的连读多 而快比较难听懂，而有的很少连读，比较容易听懂。在这个阶段的 后期，要有意识地去听不同播音员的录音，而不要只听自己喜欢的 某些播音员的录音。</p><p>完成了这个阶段的学习任务，对于慢速英语来说，已经可以达 到“会”的程度。</p><p>2，巩固阶段</p><p>　　在起步阶段的后期，随着辨音能力提高，听力逐渐提高，思维 方式逐步符合英语习惯，有时候能直接用英语去理解录音的内容； 忻的时候脑子里逐词逐句从英语到汉语的翻译过程逐步减少；听 写时，心情也不那麽紧张了。可以“分心”干点别的事了；碰到个别听 不懂的词，能甩掉，不影响后面的收听。这样，慢慢地、自然而然地 扩边听边写”的起步阶段过渡到“只听不写棚巩固阶段。巩固阶 段的任务是使思维方式进一步符合英语习惯，尽量直接用英语去 理解所听的内容。</p><p>　　在巩固阶段的初期，已经基本上没有“写出来认得，听起来不 懂”的“生词”了，听写出一分钟录音内容只需要5分钟左右，偶尔 碰到生词，也能根据语音在词典里找到。随着“只听不写”的反复练 习，渐渐地摆脱了对于书面文字的依赖，到一分钟录音内容只需要 两分钟左右就可以听懂（不是一词不漏地写在纸上）时，就可以转 入深化阶段了。</p><p>完成了这个阶段的学习任务，对于慢速英语来说，水平可以达 到“熟”的程度了。</p><p>3．深化阶段</p><p>　　深化阶段的学习目标有两个：一是扩大英语词汇量，为此要尽 量听写一些与自己的专业没有直接联系的英语科技消息以及文史 哲方面的文章；二是要达到能如同听汉语广播一样，轻松的。地听 懂实时谩速英语广播，井为过渡到听写标准语速的英语做好准备。</p><p>完成了这个阶段的学习任务，对于慢速英语来说，水平可以达 到“化”的程度了。</p><p>　　各个阶段是互相穿插和渗透的，不是截然分开的。只要自己觉 得水平提高了，能转入下一个阶段就可以转，转过去以后试＝段时 间，如果有困难就再返回前个阶段去补课。即使已经到了深化阶 段，有时碰到很生疏的词，还是必须采用起步阶段的“边听边写”的 办法才能听懂。</p><p>第五章 起步阶段的具体实施<br>5.1具备扎实的初中英语知识才能起步<br>　　语速缓慢、用词浅显、文法简明的慢速英语对初学者英语水平 的要求不是很高的。如果确实具备了初中英语知识，就可以 起步听“慢速英语听力教材”。</p><p>　　怎样才算具备扎实的初中英语知识呢？可以从词汇量、语音和 语法知识和听力等四个方面去衡量：</p><p>　　* 能听、能写、能读“初中英语词汇”iz00个左右单词中的 80％以上，即约1000个最基本的常用词</p><p>　　* 熟悉英语的基本语音规则，一般情况下能根据发音从词 典里找到词，根据词典上标的音标能读出来</p><p>　　* 懂得英语的基本语法</p><p>　　* 听得懂初中英语课文的录音</p><p>　　从听写慢速英语录音带的要求出发；以上四个方面都是很重要的， 缺一不可。</p><p>　　无论是阅读还是听写，都要以一定数量的单词作基础，否则前 进中碰的“拦路虎”大多，迈不开步子。阅读英语书刊时虽然掌握 快慢的主动权在自己手里，但是如果懂得的词汇量太少，每看一句 活都会有好几个生词出来干扰，要去查词典。英语一词多义，取哪 个释义比较切题，一个回合还确定不下来，还需要与前后左右的词 连贯起来考虑才能最后确定。这样，眼睛的注意力在书本和词典之 间往来穿梭，非常容易疲劳。由于都是首次碰至“的生词，在词的 “形、音、意”等三个方面都不熟悉，没有很强的忆力，往往是 查了后面的忘了前面的，不得已只得把每个生词的汉语释义注在 单词的旁边，词里行问密密麻麻地注满了汉字。这样做，不但阅读 速度极为缓慢，非常烦人，而且心情极度紧张，几页文章看下来，早 已头昏脑胀，精疲力尽。对于阅读来说，尽管是这样缓慢地“爬行”， 但总还是可以进行下去。</p><p>　　生词对听写的干扰作用要比对阅读的干扰作用大得多。从实 践的经验看，对于刚起步的初学者来说，只要听到一个生词，就会 把全部注意力集中到生词上。如果一句话里有两个听不懂的词，就 会感到几乎满篇都不懂，心情非常紧张，一些本来会的词也可能被 干扰得不会了，无法听写下去。因此至少能默写和正确地读出初中 英语1200个单词中的80％以上，即1000个左右使用频度非常 高的最基本的常用词的要求是必须要达到的。再说基本的语音和 语法知识是寓于一定的词汇量之中的，不可能想象一个只掌握了 很少基本词汇的人能具有基本语音和语法知识。 语音知识对于通过用逆向法学习英语的重要性是显而易见 的。因为在没有书面文字可供参考的情况下，你所学的是一本无形 的“语言课本”，碰到听不懂的词只能根据播讲人的发音拼写出一 个词到词典里去找。而且你所用的词典也是“无声的”，如果没有基 本的语音知识，一来不知道到哪里去找，二来可能所要我的词就在 眼皮底下你也不一定能认出来。非英语工作者学习英语语音，当然 是越正确越好，但正如我们大部分非北方语系的人说的普通话不 一定非常标准一样，英语的语音也不一定能学得很标准，很多音发 不好，有偏差，但也要八九不离十，以达到“外国人说的你听得懂， 你说的外国人能听得懂”的目的。</p><p>　　 基本语法知识对于听懂慢速英语广播的重要性也是不言而喻 的。由于英语中同音异意和近音异意的词非常多，在没有现成听写 记录可供参考，完全由自己独立听写的情况下，没有一定的语法知 识做后盾，即使你掌握了所有的同音词和近音词，还是没有办法确 定取舍，把录音正确地听写出来。退一步说，即使你能正确地听写 出全部内容，出现在你面前的仍然好像是一本没有标点符号的古 典J、说。从哪个词到哪个词是一句，要靠自己根据句子的主谓宾和 主从句等有关语法知识去断。只有把句子断正耐了，才有可能理 解。如果连句子都断不了，怎么可能搞懂意思呢？句子断对了以后， 还有一个语法问题，语法知识不足往往会闹出很多笑话来。</p><p>　　慢速英语广播的内容teto中英语深，，az又没有现成的课文 可以对照，起步去听之前必须要具备嘶得懂初中英语课文录音” 的听力水平。</p><p>　　如果你确实扎实地掌握了初中英语，就大胆地起步听慢速英 语吧！有的人虽然只有初中英语水平，但学得很卞、实，起步后能听 懂不少，写出来看都是一些很普通的常用词。由于他”甫点自卑， 又看不起初中英语水平，力盯之心中对夕）国人讲的英语有一种莫名 其妙的神秘感，明明自己听写得是对的，但仍然有怀疑：难道慢速 英语就这么容易听吗？是的，如果基础英语知识才、实，慢速英语就 是这么容易。只要你确实有手、实的初中英语基础，就可以起步听写 慢速英语，而且能听懂不少。</p><p>　　高中平语的词汇量是1900个左右，与初中的1200个加在一 起，英语词汇的总数可达3100个左右。如果你已经高中毕业，即 使按照记住60％计算，掌握的词汇量也起码有is00个左右，起 步听慢速英语磁带更不应该有什么问题了。</p><p>　　到底自己是否真正掌握了扎实的中学英语知识了呢？不要只 凭“自我感觉良好”，而应该请一个英语水平比较高的人当老师，从 语音、词汇量、语法和听力等四个方面逐一地进行检查。检查的方 法如下：放一篇中学英语课文的录音，看看自己能不能在不看课文 的情况下听得懂；把课文一词一句地朗读和讲解给英语水平高的 人听，看看自己的基本语音、词汇和语法知识是否扎实，差距在哪 里等等。</p><p>　　如果你目前还没有扎实地掌握中学英语知识，那就不要急于 去听慢速英语。勉强起步，也许一开始劲头很大，但几乎满篇都听 不懂，用不了多久就可能泄气，很难坚持到底。结果事倍功半，花的 功夫不少，收获却不大，还不如把初中英语的基本知识补上后再起 步的效果来得好。怎么补？用什么课本呢？不少初学者的实践经 验表明，用本书介绍的逆向法（即只听写初中英语录音带，不看课 本），一课一课扎扎实实地听写初中英语的录音带的效果最好。</p><p>5.2物质准备<br>　　“工欲善其事，必先利其器”。学习工具是十分重要的，有了好 的学习工具，可以提高学习效率，增强学习兴趣和信心。以下几件 学习工具有助于提高学习成效，必须在起步前准备好。</p><p>1．电子录音机</p><p>　　本书介绍的逆向法，以听写录音带为主要学习途径，除了“想” 这个环节与录音机没有关系外，其他的“听、写、说、背”四个环节都 与录音机紧密地联系在一起。在起步阶段，由于英语听力很低，经 常有听不懂的地方，录音机要反复地进带或倒带，由此引起一系列 问题：</p><p>　　磁头磨损大。尤其是进带倒带时放音键不回弹的录音机 更是这样，按每天使用两小时计算，一年左右磁头就磨坏了。</p><p>　　费时费事。SpeciaI English一个词一般只历时0．7秒左 右，standard English一个词一般只历时0．5秒左右，但为了反复 听这0．5～0．7秒的录音，进带、倒带、放音等却需要四十秒钟左 右，时间的利用率很低。</p><p>　　分散注意力。在辨音和猜词的同时还要分心去进带倒带， 影响水平的发挥。进带倒带时磨擦产生的嘶嘶声有很大的干扰作 用，听着使人心烦，引不起学习的兴趣。如果是戴着耳机听，这种嘶 嘶声简直是不能忍受的。而且在按键时稍有不慎，错按下“录音 键”的话，还会抹掉一小段录音。机电式录音机体积比较大，使用场 合受限制，不能充分利用零碎的时间。</p><p>　　为了解决这些问题，作者根据教学实践中积累起来的经验，和 他人合作，设计了专利产品电子录音机（详见上海外语大学忡卜语 电化教学》1992年3月的《英语学习的利器一一电子式语言学习 机N。与普通机电式的录音机相比，它们具有以下优点：</p><p>　　操作简单，只要把含“疑难词”的一段录音转录到电子录 音机中，就可以反复播放任意多遍，省去了进带倒带等操作。这样 不但节省了时间，提高了学习效率，还有利于水平的发挥。水平发 挥出来了，听写时的心情就比较轻松，学习的兴趣也会随之提高。 根据不少初学者试用情况看，与用普通录音机听写的效果相比，用 电子录音机时的学习效率提高五倍左右，水平可以多发挥20％ 左右，一些原先用机电式录音听写不出来的词改用电子录音机后 能听写出来了。</p><p>　　电子录音机中语音的记录和重放部分是永不磨损的固态 电路，没有任何运动的机械部件，因而经久耐用、寿命长。</p><p>　　由于电子录音机体积小，耗电少，便于携带，从而大大扩 大了学习的场合，便于利用零碎的时间。</p><p>　　没有亲自采用逆向法进行过听写的人很容易认为10秒、20 秒大短了，采用逆向法进行过听写的人则认为记录时间3～5秒 为最佳。因为即使是慢速英语，10秒钟也可以说出近15个词，差 不多有一句半话了，20秒钟可以说出近30个词，差不多有三句话 了，足够听写上几分钟甚至几十分钟了。能够起步进行听写的人， 应该有一定的英语水平，对于10秒内的15个英语单词，最多只 能有个把听不懂需要反复听，不可能有好几个听不懂，因而希望 “听不懂”的词越快出现越好。如果有好几个词听不懂，就说明还不 具备基础英语知识，暂时还不能听写。</p><p>为了使读者有一个数量的概念，下面列出一段时间为20秒 钟的慢速英语广播内容：</p><p>Albania ：United States,Defence Secretary William Perry says American troops may remain in the former Yugoslav repub lic of Macedonia after NATO peace forces leave Bosnia一Herze- govina in December。 Mr. Perry spoke in Tirana after meeting with officials from Bulgaria ，Italy ， Macedonia ，Turkey and AL- bania。</p><p>实践表明，初学慢速英语的大学生听写这样长的录音，觉得太 长，反应不过来。</p><p>　　为了适合不同英语水平和逆向法各个环节上学习的需要，电 子录音机可以设计成各种不同的型号。例如可以设计成记录时间 为10秒左右的“跟读器”，记录时间为20秒左右的“比读器”和记 录时间为几分钟的“背书器”等等，它们的使用场合如下：</p><p>　　记录时间为10秒的“跟读器”，适合英语水平比较高的 人听英语广播时即席记录问题时使用。英语水平比较高的人听写 英语广播时，只是偶尔碰到个别听不懂的词。但是哪个词听不懂， 只有在听的过程中才能得知。这个时候再去启动录音机把问题记 录下来已经来不及了。所以要想记录下可能出现的个别问题，必须 把全部广播内容用机电式录音机录下来才行。</p><p>　　普通机电式录音机以磁带为记录媒体，录音时间长度都在30 分钟以上，按下“录音”键后一直录音，按下“停止”键后才停止录 音。目前电子录音机的录音时间很短（几秒到几分钟），如果也采用 这种录音方式的话，加电后很快就录满了，但录上的内容中不一定 有听不懂的词，等到有了听不懂的问题再去启动又来不及了。</p><p>　　采用“先进先出”的动态更新的录音方式可以解决这个问题。 采用这种录音方式·，录音开始以后，一直不停地录，但在任何一瞬 间内，录音机里只保存从那一瞬间起往回倒数一定时间长度（例如 10秒）的内容。停止录音后，保存在录音机里的只是停止前一段时 间长度的内容。</p><p>　　记录时间为20秒的“比读器”适合英语水平不高的初学 者使用。它的功能键有三档，第一档所用的存储器的记录时间为 10秒，第二档所用的存储器的记录时间也为10秒、第三档没有独 立的存储器，而是把前两个存储器串联起来，总的记录时间为20 秒。</p><p>　　“比读器”的使用方法主要有两种。一种是作“跟读器”使用，当 功能键位于第一、第二档时，就相当于两个记录时间为10秒的 “跟读器”；功能键位于第三档时，就相当于一个记录时间为20秒 的“跟读器”。另一种就是作“比读器”，供初学者进行语音练习用。 首先将功能键置于第一档10秒处，记录下标准的语音，放音检查 无误后将功能键置于第二档10秒处，记录下自己学说的声音，然 后将功能键置于第三档20秒处，把第一档10秒处的标准语音与 第二档10秒处自己学说的声音串起来听。在前10秒钟内听到的 是标准的语音，在后10秒钟内听到的是自己学说的声音。听了几 遍以后，发现自己什么地方学说得不像，再将功能键置于第二档 ：O秒处，重新记录自己学说的声音，然后将功能键置于第三档与 标准语音串起来听，看学得像不像。这样，一直学说到自己满意为 止。</p><p>　　背诵课文时常常需要另外一个人拿着课文对照检查，有 Tid录时间为几分钟的“背书器”以后就可以进行自我校验了。首 先置于“录音”位置，记录下自己背诵的声音，然后置于“放音”位 置，把自己背诵的声音放出来与课文对照。此夕），“背书器”也可以 作“跟读器”使用。</p><p>　　不论是“跟读器”、“比读器”还是“背书器，把需要记忆的单词 输入以后能不断地重复播出，很适合于用来帮助记忆单词。例如可 以在早晨起床后把需要记忆的单词的拼写、读音和释义记录进去， 在洗漱、做饭和用餐的时</p><p>5.3 从听录音带入手<br>1．先听录音带，后听收音机</p><p>　　不少人在下决心学习慢速英语以后，就急不可待的想自己去 收听或录制实时的慢速英语广播。从本书后面的论述可以得知，要 实时听懂慢速英语广播需要有相当高的听力水平。从笔者的教学 实践呷看，绝大部分大学生都达不到这个水平。勉强去听，只能 断断续续地听到一些简单的单词，学习的兴趣很炔就会降低。比较 现实的方法是按照逆向法的要求，踏踏实实听录音带的内容。为此 本书附有三盘Special Engligh广播录音带，同时给出了第一、第 二盘录音带的听写记录，第三盘的听写记录留给读者自己去完成。</p><p>2．录音带内容简介</p><p>　　从难易程度看，voA慢速英语内容大体上可以分为三个层 次。比较容易的是各种科技新闻，其次是词语故事，比较难的是国 际新闻。</p><p>　　本书听力教材的三盘录音带也按此顺序安爿：。第一盘磁带的 内容分为三组，第一组由wind Energy 、Groundnuts(peanuts)、 Rabbt、和Lamb等四篇短文组成。内容都是大家熟知的一些日常 生活常识，英语用词也较其他短文浅显，很适合初学者在起步阶段 的初期学习。第二组由Butterfly(part one and part two) The age of the Shroud of Turin .Biosphere.Wild Animals in Africa.The First man -powdered Helicopter .use wood More Effectively等七 篇短文组成，这组短文的英语用词和涉及的内容都比较广，有一定 的难度。第三组短文由Migraine Headache.schizophrenia. Dyslexia .Pakinsons disease等四篇短文组成，都是有关医学方面 的，短文中用的生僻词比较多，有的英语单词的发音和拼写都很特 殊（例如Schizophrenia dtslexia…..等）。读者可能从未碰到过类 似的发音和拼写。听写这方面的内容，对于锻炼辨音能力会有很大 的帮助。这两组短文适合起步阶段后期和巩固阶段的初期学习用。 第二盘磁带是供巩固阶段后期和深化阶段初期用的，选编了十几 篇美国词语掌故（Words and Their Stories），每篇三五分钟，讲述 某些美国俚语的来历及其用法，非常引人人胜，加之播音员朗读时 绘声绘色，更能增加学习的兴趣。但是这些短文的用词范围比较 广，有的词一般词典中还不一定有（例如bum rap），而且播音员朗 读时连读比较多，因此听写比较困难。而且有的内容只能意会不能 言传，很难完全翻译成汉语，正因为如此，听这盘磁带时应该力求 直接从英语去理解，而不是非要翻译成汉语不可。</p><p>从以上的简介可以看出，这两盘录音带内容很通俗，一般具有 中学文化程度的人都能学得会，学得懂。</p><p>3.学习方法和进度</p><p>　　初学者怎么样听这些录音带的效果最好呢？本书是专讲怎样 通过自学提高英语水平的，学习的对象是有声的语言，本书第一部 分介绍的学习方法所谈论的对象也是有声的语言，因此作者建议 学习本书的大体步骤和进度如下：</p><p>　　先把介绍学习方法的第一部分内容看一遍，以便有个大概的 印象，在听录音碰到困难时能找到书中介绍的相应的克服办法。然 后从头到尾听一遍录音带的全部内容，听的时候不要对照着看书 中所附的听写记录。对于绝大多数没有相当听力基础的人来说，这 样做的困难一定很大。或根本听不出每一盘磁带录音是什么方面 的内容；或虽能断断续续地听出一些单词，但整体上还是不知道讲 的是什么……。从头到尾听了一遍以后，你就知道了在学习本书之 前自己的听力水平到底有多高，同时也可初步体会一下听英语录 音时的难点在哪里，以便在进一步阅读本书介绍的一些学习方法 时有点背景知识。</p><p>　　接下去就是逐篇地听写第一盘磁带的录音。根据初学者的水 平作者曾试过三种方法，都收到了比较好的效果，读者可根据自己 的英语程度和业余时间的多少，采用不同的学习方法。</p><p>第一种方法：“正向”逆向”混合式。先边看听写记录边听第一 组短文，然后再独立听写第二组和第三组短文。</p><p>(1)预习。先把要听的短文的听写记录看一遍，把不认得和不会 读的词搞清楚，每句话的文法关系搞懂，短文的内容搞明白，直至！ 看着书能从头到尾朗读出来为止。</p><p>(2)边看听写记录边听录音。尽管你事先预习了，能朗读了，但 毕竟朗读和听是有网临。朗读时没有“被录音带的声音赶着走的 紧迫感”，掌握朗读速度的主动权在自己的手里，完全可以一边朗 读，一边运用英语知识，在脑子中完成从英语到汉语的翻译过程。 听播音员朗读时的情况就不一样了，掌握速度的主动权不在你手 里，你是“被录音带的声音赶着走的”，就会有一种，紧迫感”。在听 力比较低的情况下，可能看着书也跟不上录音的播放速度，听不太 懂。碰到这种情况，不要着急，沉住气，翻来覆去地听，直到能叉，着 书听懂录音为止。</p><p>每听一篇短文，要把生词都记下来，并且不断地复习，直到合 上书能完全听懂，并能用英语复述出每篇短文的主要内容为止。如 果有背诵的习惯，把课文背下来，效果就更好了。</p><p>(3)第一组录音的学习进度平均按照两周一篇短文掌握，四篇 短文约需两个月左右。</p><p>学完这一组短文以后，对于“慢速英语”的语调和一些常用的 句型就会有了一个基本的概念。</p><p>(4)学习完第一组的四篇短文以后，转入自己“独立作战”，采用 “听、写、说、背、想”的方法，学习第二组的七篇短文，不到万不得已 不看听写记录。这七篇短文无论从内容和英语用词上都比第一组 的四篇短文要难一些。学习进度因人而异，以达到学习目的为原 则。从实践的经验看，如果第一组短文学得才、实，独立听写出这组 内容大约需要三四个月。</p><p>听写完第一盘：可以听懂英语技术讲解，可以顺利地通过 CET飞中的听力考试。</p><p>听写完第二盘：在听懂英语技术讲解的基础上可以发问，可以 开始听慢速英语新闻广播，可以顺利地通过EPT等听力考试。</p><p>听写完第三盘：可以充当技术翻译，可以用英语进行一般的日 常会话，可以顺利地听懂慢速英语的新闻广播，并进而可以开始听 Standard English的节目，可以顺利地通过TOEFL等听力考试。</p><p>5.4 为什么听不懂<br>“听”和“写”这两个环节中首要的是听懂，只有听懂了，才有可 能写出来。</p><p>　　听力差是由多方面因素造成的，下面我们从语音、词汇量、语 法知识以及思维逻辑等几个方面分析一下听不懂的原因。</p><p>1．语音知识不扎实</p><p>　　扎实的语音知识是听写慢速英语录音的基础。准确地抓住了 语音，即使是生词，也不难根据其发音从词典找到答案。反之，如果 语音知识不够，即使是自己会的词也不一定能听懂，更不用说真正 碰到生词了。由于种种原因，不少人在学习英语过程中没有得到足 够的语音训练，虽然记住了数千个或上万单词和大量语法知识，可 以顺利地阅读书面英语文章，但听不懂用词量只有1500余个的 慢速英语广播。</p><p>语音知识不扎实的表现形式有以下一些：</p><p>（1）读音不正确或根本不会读。不少人脑子里的英语音形脱 节，记住的只是英语单词的字母拼写（形状），而没有正确的声音印 象，不是不会读就是读得不对。看写在纸上的英语，能根据其拼写 确定是不是认得，但是听到一个英语单词的正确发音，由于与自己 脑子里不正确发音不一致，以为是生词。</p><p>　　重音正确与否对于听力的影响极大，例如有的人能听懂 resign，但听到resignation时由于重音的改变而听不懂。</p><p>某些词英美读音的区别也会带来一些问题，例如schedule、 missile等。</p><p>（2）虽然能正确地发音，但是没有熟练到能立即反应的地步， 所以听到以后需要反复思考才能明白其含义，因而感到应接不暇 而听不懂。</p><p>（3）不适应连读，尤其不适应外国人地地道道的连读。初学者 在听写中常常听不懂录音带上外国人的原声，但若由中国人再重 复说一遍，他就有可能听懂。我们提高英语听力的目的是为了听外 国人讲英语，而不是为了听懂中国人说英语，所以一定要以能听懂 录音带上的原声为准。</p><p>　　由于不适应连读，常常会把两个词误以为是一个词，例如把a part听成apart，把aspecial way听成especial way等等。</p><p>　　有时也会把一个词误听成几个词，因而听不懂。例如把un- derground一个词听成under the ground三个词，把especially一 个词听成aspecial1y两个词等等。</p><p>（4）听不出介词、冠词、连词、助动词（a、an、the、of、in、at、or、is、was…）等。播讲人在读这些词时一般都是弱读，既轻又快，一带而过。对于初学者来说，不是很容易听得出的，这是起步阶段听写 中的一个难点。笔者在批改初学者的听写记录时向他们指出某处 有这类词没有听写出来时，他们的第一个反应一般都是“有吗／。 但是有了疑问后再去听，才感到好像是有一个词，反复听上几遍以 后或许能听出来。真是“初听似没有，越听越有，超听赴像，起听越 是”。没有亲身实践过的人不太相信这一点，认为这些简单的词应 该是最容易听出来的。其实不然，实践证明，能否听出这些词是衡 量英语听力的一个很重要的标志。这里的关键是听不出来，不是写 不出来。解决这个难点的方法只能是多听，多练，久而久之就习惯 了。一旦到了能听出这些词时，别人间你是怎么样听出来的，你的 回答可能是“我听着就是有”，不一定能说出什么要领来。到了这个 境界，说明已经适应这些词的弱读了，听力大大地提高了。</p><p>（5）分辨不出各种前后缀。慢速英语中用的词汇有很大一部分 是从常用词汇基础上加前后缀派生出来的。如果不熟悉加前后缀 的规律，听录音时会碰到很多的生词。例如知道marine的意思是 “海的”，way意思是“路”，但是不知道前缀sub的意思是“下面 的”，听到submarine和subway以后不知道是“水下的，潜水艇” 和“地下铁路”。</p><p>2．基本语洁知识不扎实</p><p>（1）由于语音知识不扎实，不能在多次的“听”“写”反复过程中 自我解决问题，不能自我发现和纠正差错。实践表明，对英语水平 不高的初学者来说，一段录音不是一次听写就能完成的，前几遍的 听写记录一般会有不少空白（听不出来是什么）和差错（有的自以 为正确地听写出来，其实却是错的）。这些空白和差错，需要经过不 断的“听”“写”反复去发现和纠正。由于语音知识不扎实，往往 “听”“写，措了也发现不了。</p><p>　　由于语音知识不扎实，即使把一句话全部正确地听写出来，也 搞不清楚文法关系，分不出主句和从句，因而搞不懂原意。例如有 这样一段话：They hear voices that are not there。这句活的文法并 不复杂。主句是they hear voices （他们听见声音），that are not there是一个定语从句，形容voices。整个句子的意思是：“他们在 没有声音的地方听到声音”。有的初学者由于搞不清楚that are not there的文法作用，把整个句子理解为：“他们不在的时候听到 声音”，理解完全不正确。</p><p>　　听写过程中要有意识地锻炼根据内容和语感进行分段、断句 和加注标点符号的能力。能不能根据录音进行正确的分段、断句和 加注标点符号，是英语水平的一个方面。一般水平比较低的人写出 来的记录，往往不分句，不分段，严重影响对于内容的理解，也难以 发现差错。也许有人会问，只有录音没有文本，怎么知道分的段、断 的句和加的标点符号是对的呢？其实这个问题并不难解决，只要自 己分的段、断的句和加的标点符号不影响对于消息内容的理解，一 般说来就是可以接受的。如果还没有把握，可以请英语水平高的人 帮助检查一下，看看是不是正确，如果不正确，就要很好的分析和 总结。也可找一些自己没有学过的教学录音带来听，先不看文字记 录，听写完毕以后再与记录对比，看看自己分段、断句和加标点符 号的准确性如何。如果有条件进入Internet，可以从该网下载 （download）相应的内容，然后与自己的听写记录对比。如果自己 在分段、断句和加标点符号等大体上都是正确的，说明自己已经有 了相当的英语水平了。</p><p>3．词汇量不够</p><p>（1）词写出来认得，而且也能正确地读出来，但由于对词义的 理解大狭窄而听不懂。例如只知道free的意思是“自由的”，不知道还可以作“免费的”解，听到“The wind mill costs money of course，but the wind itself is free”时感到不好理解。“free”若作 “自由”解，这句译出来即为：“虽然建造风车要花费金钱，但风本 身是自由的”。这样的理解显然很不通顺，与上下文的意思不衔接。 但若把“free”解释成“兔费”，这句译出来即为：“虽然建造风车要 花费金钱，但风本身是免费的”，也就很好理解了。Free这个词的 还有别的释义，例如： “Dr. Koope has called for a smokefree America by the year 2000。”有的初学者从上面关于风车的句子里 知道了free除了作“自由”解以外，还可以作“免费”解，因此就把 这句话理解为：“库伯博士号召在2000年以前建立一个自由抽烟 的美国”或“库伯博士号召在2000年以前建立一个免费抽烟的美 国。”这样理解显然和文章的主题格格不入。一查词典，free一词还 可以作“无……的”解，这句话的意思是：“库伯博士号召在2000 年以前建立一个无人抽烟的美国”。</p><p>由此可见，应该通过不断的学习各种各样内容和风格的英语 材料，加深对英语词义的理解。</p><p>（2）单个的词写出来认得，能正确地读出来，词义也明白，但不 明白与其他词合在一起组成词组以后的意思是什么而听不懂。例 如知道give、in、up的意思，但是不知道give in的意思是“屈服、 让步”，give up的意思是“停止、抛弃”，听到以后搞不懂。</p><p>（3）对不规则变化动词和名词不熟悉，不能“脱口而出”，听到 了不知道是从哪个词变来的，误以为是“生词”而听不懂。</p><p>（4）确有生词而听不懂。由于初学者英语水平不高，听写过程 中不时会碰到一些生词，因而听不懂。</p><p>　　根据笔者的教学实践，对于读完高中英语的人来说，在听写慢 速英语的起步阶段碰到的“生词”中，由于前三个原因引起的约占 70％，真正是生词的只有30％。</p><p>如果所用的英汉词典收入的英语单词释义不全也会影响对听</p><p>　　写结果的正确理解。例如听写出了“1ncontinence is a medical con- dition”和“These drugs are used to treat nine serious medical conditions以后，理解不了其中的condition一词，查手头几本“英 汉词典”中有关“condition”的注释，找不到合适的。比较接近的解 释是“状态”。用这个解释译出来即为：“（小便）失禁是一种医学上 的状态”。“这些药品可用来医治九种严重的医疗状态”，很不令 人满意。后来从“Longman”出版社1988年新出的词典中查到 “condition”一词作“病”解，举的例句为： This is an interesting condition,I have never seen this illness before（这是一种很有趣的病，我以前从未见过）。作“病”解，这二句话就好理解了。但又有这样用“。condition”这个词的：“Experts also say dyslexia is not a disease,they say it is just a condition caused by differences in development of brain tissue before a baby is born “.翻译出来则为：“专家们说诵读困难症不是一种疾病，它仅仅是由于婴儿出生以前脑部组织发育不同引起的一种病”。这样的翻译很令人费解，“不是疾病……，仅仅是一种……病”。再进一步查有关词典，找出了“desease”与“conditi0n”的区别，这句话的意思为：“专家们说诵读困难症不是一种（传染的）疾病，它仅仅是由于婴儿出生以前脑部组织发育不同引起的一种小毛病。”英语在发展，新词不断出现。例如近年来随着信息高速公路的出现而产生的。cyberspace cybermarket和e一mail等等，国内出的英语词典一般都来不及收 入这些新的内容，碰到这种词时往往会影响对内容的准确理解。</p><p>4．缺乏背景知识</p><p>　　英语广播稿的撰写人大都是地道的欧美人，他们熟知西方的 风俗习惯和各种文化、历史背景，在写文章时，对于一些他们认为 是人人皆知的背景知识就不会再费笔墨了。此类隐含在文章里的 背景知识，对于不熟悉西方社会和文化的人来说，如果文章的作者 没有把必要的背景知识交待清楚的话，听到以后不一定懂。</p><p>　　例如美国在报道白宫遭枪击以后Treasury secretary（财政部 长）出面处理此事，听了以后感到难以理解。其实由于历史的原因， Treasury Secretary is in charge of the secret services to protect President（美国财政部长负责秘密保护总统的安全）。</p><p>　　又例如一篇介绍美国某电话网的文章中有这样一段话：“It provides 800 telephone service。”望文生义，这句话的意思似乎是 “该电话网提供800个电话服务”。这样理解从语法上讲是没有什 么错的，但意思完全不对。在美国，打不收费的长途电话时要加拨 字冠800个数字。这句话的意思是“该网提供800不收费电话 服务。”</p><p>又如有以下这样一条新闻：</p><p>　　The Greek Cypriot government has denied responsibility for the killing of a Turkish Cypriot soldier and the wounding of an other。 A Greek Cypriot spokesman says the NationaI Guard found no evidence of shots being fired on the Turkish Cypriot base。 The spokesman said the incident was caused by Turkish Cypriot·The Turkish side says Greek Cypriot caused the attack early Sunday to answer last month’s killing of two Greek Cypriot civilians。 British officials investigating the latest incident says it is not clear who was responsible。</p><p>　　即使把其中的所有词都搞懂，如果不了解塞浦路斯于1974 年分为南部希腊族政府和北部土尔其族政府的历史背景，则不可 能懂得消息中的Greek Cypriot government和Turkish Cypriot 的准确含义。如果事先不了解last month’s killing of two Greek Cypriot civilians这一事实，也会影响对整条消息的理解。</p><p>　　听写英语新闻时，还会碰到大量涉及新闻事件背景的词语。这 些词语，就其表面的含义而言，并不难理解，但是如果不知道它们 在新闻报导中的特定意义，往往会成为理解整条新闻的一个障碍。 例如：</p><p>　　they sleep in Bradley （Brad1ey是美国一种坦克的名字，即美 国兵睡在坦克里） the Gulf War（1991年以前指两伊战争，川91年以后指对伊 拉克的战争） West Bank （约旦河西岸） Camp David Accord （有关中和平的戴维营协议） Dayton Peace Accord （有关波黑问题的代顿和平协议）等等。 Water gate（水门事件，即美国前总统尼克松任内发生的窃听 电话的丑闻。从此，gate一词在特定的环境下与scanda1同义，例 如lran gate指美国向伊朗秘密出售武器一事。）</p><p>　　不经常听广播和看英语报纸的人，碰到这些词，可能会感到很 生疏。认得单个的词，但不知道在该条新闻中的具体含义。只要平 日多听英语广播和多看英语报纸，这些问题都是不难解决的。今天 的消息会成为明天的背景知识。</p><p>5．主要是听力水平低，不是缺乏背景知识</p><p>　　在讨论背景知识对于听力理解的影响时，必须十分注意不要 把听力水平低造成的差错误以为是缺乏背景知识造成的。</p><p>　　各种听力录音材料（尤其是考试用的录音材料），对大部分听 众不熟悉的背景知识况会做出足够的解释（当然是用英语解释 的），很少有“隐含”的背景知识，否则听力考试就主要不是考英语 听力的高低，而是考背景知识的多少了。再说背景知识面的含义很 广，天文地理，政治经济等等，无所不包，又有谁能说得清到底背景 知识扩大到什么程度才不会影响英语的听力呢？一般说来，各种录 音材料编写时已经考虑到一般听众的背景知识情况，只要具有中 学以上的文化程度，平时注意读报、听广播和看电视新闻的人，听 不懂录音材料主要原因都是由于英语听力差所至，而不是背景知 识不足。下面以某校某年CET。4听力考试中出现的一些问题为例 起步阶段的具体实施来说明这一点。 例一 A； Script（录音） w： You are about late， I was worried. How is the car? What did you find out about it? M： The mechanic said that the best thing will be to sell it and get a new car. This car is totally dead。 0： What wiIl the man probab1y do with his car， B： Choices A） To keep his old car and get a new one。 B） To leave it in the garage to be repaired。 C） To get his car repaired later。 D） To sell his car for a new one。</p><p>选择正确答案口的学生只有44％左右，选择日的有30％以上。</p><p>例二 A。 Script（录音） M： How do you manage to work and to go to schoo1 at the same tlme？ w： My classes are at night and l work during the day。 Q： What do we learn from this conversation？ B： Choices A:The woman has to school during the day and works at night。 B: The woman has to work to support herself。 C） The woman’s classes are difficult。 D） The woman studies at night。</p><p>选择正确答案口的学生有45％左右，选择A的有40％左右。</p><p>　　起步阶段的具体实施 每一个听力题几乎都有40％以上的学生选错了答案。什么 原因呢？有的人把出错的原因归结为对于西方的文化和生活背景 知识不足，认为对于例一来说，因为中国人连自行车都是不到用烂 不轻易把车卖掉换新的，更不用说价值昂贵的汽车了，所以不少学 生选择了答案B（修车）。对于例二来说，因为中国半工半读的学生 一般都是白天上课，晚上做工，所以不少人选择了答案A（白天上 课，晚上做工）。对于例三来说，因为中国人养狗不是为了看家就是 为了打猎，所以不少人选择了答案D（打猎）。</p><p>　　很显然，这样的分析没有找到“学生听力水平太低，考试时只 能根据听到的只言片语连蒙带猜”这个真正原因。就这三个例子而 言，每一段录音都已经把选择正确答案所需要的背景知识交待得 清清楚楚了，没有任何隐含的背景知识，只要听力基本上可以，就 能做出正确的选择。</p><p>避免发生此类现象的真正出路在于平时学习的时候，一定要 坚持一个词一个词、一句话一句话地抠，确实提高听力水平。只有 这样，才能在考试的时候得心应手地把钩划在对的答案上，而不是 连蒙带猜地乱划一气。</p><p>　　又如一次报导足球比赛的消息时有这样一段话： A C Milan lost 2一1 in Munich， but because the ltalian side had won the first leg 1:0 ，the two sides tied and Milan ad vanced on the strength of its away goal。 第一场AC米兰队以1：0赢了德国的拜尔慕尼黑队，第二 场德国的拜尔慕尼黑队又以2：1赢了AC米兰队。两个队的总 进球数都是两个，谁赢了？。例如同日某报“体坛零讯”就是这样报 导的：‘AC米兰队被德国拜尔慕尼黑队淘汰。”实际上正好相反， AC米兰队把德国拜尔慕尼黑队淘汰了。从英语来讲就是away这 个词的释义问题，在这里作“客场”解。按国际比赛规则，客场进球 一个算两个，所以AC米兰队的总进球数是三个，而德国拜尔慕尼 黑队只有两个，所以AC米兰队把德国拜尔慕尼黑队淘汰了。从表 面上看，发生此差错主要是因为对足球比赛的背景知识不够所至。 但是句子最后的on the strength of its away goal是什麽意思？只 要认真去想一想这个问题并查查词典，就不会发生此类差错了。 （词典里away一词的释义中就有“客场”之解，不知道这个释义难 道不反应出英语水平问题吗？）</p><p>6．不熟悉专有名词</p><p>　　英语广播中频繁地出现人名、地名和各种专有名词，它们往往 是句子的主语和宾语，是关键词，如果听不懂，会影响对整个内容 的理解。</p><p>　　人名、地名等专有名词在新闻报导中出现很频繁，而在校学习 时又很少学习这方面的词汇，因此刚一开始听英语新闻时，会感到 生词很多，难以听懂。下面以一条20秒钟的消息为例，看看专有 名词有多少。</p><p>Albania ： United States’ Defence Secretary William Perry says American troops may remain in the former Yugoslav repub- lic of Macedonia after NATO peace forces leave Bosni。Bosnia-Herze- govina、in December． Mr. Perry spoke in Tirana after meeting with officials from Bulgaria， Italy， Macedonia， Turkey and AL bania。</p><p>　　这条消息一共有45字次，其中大中学英语课程里没有学过 的专有名词有Albania、william、 perry、 Tirana.bukgaria NATO、 BosniaHerzegovina、 Perry、 Tirana、Bu1garia、 Macedoni，、 A比ania等13字次）约占30％左右。不了解这些专有名词是很难 听懂这条消息的内容。</p><p>　　有的初学者认为这些专有名词不是英语单词，因而不去抠，不 去记忆。从学习英语的角度来看，这样做是不合适的。因为一般情 况下SpeciaI English中出现的专有名词都是使用频度很高的专 有名词，例如Washington，NATO等，它们已经成为基础英语词 汇的一个部分，在与外国人交往时，所用到的英语中也是少不了这 些常用的人名和地名的；而且由于听力差，听写时往往区别不出哪 些是专有名词，哪些不是。例如有的读者把听不懂的人名前面的职 务和官衔（chancel1or，admiral等）都当作是人名的一部分，不加以 注意，从而失去学习英语的机会。为了不错过任何一个学习英语的 机会，全面提高自己的英语知识，对于慢速英语中出现的各种专有 名词，原则上要一个不漏地去抠，即使是不大著名的人名和地名也 不例外。</p><p>7.其他</p><p>　　还有一些其他可能导致听不懂的原因，例如不了解播音员纠 正口误时的用语而听不懂。一般英语新闻广播都是实时直播，播音 员有时有口误。若播音员自己能及时觉察，则可能随时纠正。纠正 的方法则是在说了以下一些用语以后再说出正确的内容：Sorry、 excuse me、rather、rather than和that is等等。听者需要自己判断 哪部分内容有误的，如果判断不出或不准，仍然不能准确地理解。 例如The two sides must also reach agreement about a coalition government expected to rule under Chechens can vote on their future （ah， rather until Chechens can vote on their future）.</p><p>　　如果播音员能在说到The two sides must also reach agree ment abOut a coalition government expected to rule under时发现 最后一个under应该为until的话，则只需要补充说rather until 则可。</p><p>5.5 怎样猜词<br>1．从语音人手</p><p>　　从语音入手猜词是解决猜词的主要方法，只要语音知识扎实， 一般情况下都能根据发音找到相应的词。</p><p>从语音入手猜词时要注意以下几点：</p><p>（1）不要一碰到听不懂的地方就去看书中的听写记录或问别 人，否则来得容易走得也快（即所谓Easy come easy go），不会在 自己的脑子里生根。</p><p>（2）反复听录音，直到能模仿出播讲人的发音为止。搞清楚听 不懂的地方有几个词，每一个词有几个音节组成，然后根据语音知 识试拼出一个词后去查词典，查不着再试拼一个再查。例如听到一 个（L：）的音，它可能是li……可能是le…···、可能是lee……、可 能是1ea……、可能是lie……、可能是ley……、可能是lae……等 等。这个过程比阅读时有了生词不知道怎么念去查音标要困难多 了。</p><p>　　试拼单词时要特别注意相近的发音，例如t.d之间；p.b.f、v、 gh.ph之间；i、r之间；tion、sion、cian之间等。</p><p>　　要注意不发音的辅音，例如听到一个发音为「lrainou］的字 后，试拼出rino去查，词典里没有。根据山连在一起时h不发音 的规律，试拼出rhino就对了，作“犀牛”解。</p><p>　　要注意元音的特殊发音，例如geyser（间歇喷泉）一词中的叮 发「d」的音，amoeba（变形虫，阿米巴）一词中的0e发［i：］的 j上、 曰。</p><p>注意以下一些容易混淆的语音：there、their和they，re；were 和will等。</p><p>由于录音中有干扰，有的声音不是非常清楚的，所有这些确实 给初学者带来了不少困难。</p><p>2．从语法知识入手</p><p>　　有时可以觉察到某处录音中有个词（应该说，能觉察出来某处 有个词也是有一定英语听力的表现，比起根本觉察不出来的人的 英语水平要高），但是抓不住其准确的发音。此种情况以“弱读”的 各种“小词”和名词及动词后面加的s、ed等为多。碰到这种情况， 可以运用语法知识进行判断。假定这篇短文由你来写的话，此处应 该用什么词。例如“两篇初学者的听写记录”中多处冠词a与the 互相混淆，根据不定冠词a（an）与定冠词the惯用法，有的差错是 可以自己判断出来的。有了一个初步判断以后再去听录音，可能又 会有些新的体会，说不定也就知道是什么词了。</p><p>　　录音中有比较大的干扰时，就语音论语音往往很难说清楚应 该是什么词，但是与语法联系就可以作出判断。例如一次有的人把 in fighting听成in Friday，但是根据语法，如果是Friday的话，应 该是on Friday，而不是in Friday，听成in Friday显然是不对的， 继续推敲下去有可能听出in fighting。</p><p>　　英语水平提高到了一定程度以后，碰到听不清的词就假定自 己是作者的话，在这个地方应该用什么词。经过这样假设以后再返 回去听可能就听出来了。</p><p>　　英语新闻中经常使用同位语解释主语或宾语，注意这一点有 利于快速判定句子的语法结构。例如听到（不是看到）以下一句：</p><p>In Jordan，three men，one police hit by stone and two men hit by rubber bullets were wounded；</p><p>如能熟悉到能立即地听出one police hit by stone and two</p><p>men hit by rubber bullets是three men的同位语，就可立即听懂。 否则可能把意思搞错。</p><p>3．以内容含义人手</p><p>　　多次试拼找不着时，可以根据上下文的关系推测一下可能是 什么意思，要逐步养成根据上下文判断生词的释义。在初学阶段一 有问题就应该查词典，水平提高了以后，是否还必须一遇到生词就 立间”查词典呢？不一定。可以先根据上下文的内容多（断一下可能 是什么意思。如果自己多！断出来的意思与文章的内容没有什么矛 盾，就先这么理解着，等到发生矛盾时再耷词典。虽然世界上各种 语言不同，但是人们的思维逻辑是一致的，是有可能根据上下文的 意思多（断出新词的含义（或者词的新义）的。</p><p>　　有的单纯从语音人手很难说是哪一个，但从内容含义人手可 能一下子就能断定应该是什麽。例如在报道美国对伊拉克的政策 时说Present Clinton said doing nothing wil set a bad precedent （克林顿总统说不采取行动会树立一个坏的先例）。看的人把 它听写为President Clinton said doing nothing will set a bad presiden、（总统克林顿总统说不采取行动会树立一个坏的总统）。</p><p>　　precedent一词中的ce的发音为si，presiden＝中的si的 发音为zi。如果慢慢地单独读这两个词，有一定辨音能力的人或 许能能区分出两者的区别，而作为一条消息中的一个词快速读出 和一带而过时，不太容易听出来两者的区别。但是只要从内容含义 方面仔细想一下，就可以发现set a bad presisent是讲不通的，应 该是set a bad precedent.</p><p>4．从词语常用搭配关系人手</p><p>　　句子中的某些音不清楚时可以从词语常用搭配人手去猜测。 例如听写He has been accaused of spying for foreign coutry一 句，如能听写出He has been caused（前面的音听不清）。of spying for foreign country，根据词语常用搭配关系，一般情况下可以认 为这个词是accused。</p><p>　　要特别注意一些固定搭配中某些发音既炔又轻的词。例如播 音员在读the city of、 be charged of、 be accused of、 aim at、talk with和to prevent （protect， stop， block） from等固定搭配中of、at、with和from等词时往往既快又轻，一带而过。 就语音论语音很难听出来，初学者往往认为没有这些词。只有辨音能力提高到 一定程度，对这些固定的搭配已经熟悉到能下意识反应时，听到 the city、be charged、be accused、aim、talk后不论其他词听不听 清，都会自然而然地联想到后面可能有of、缸、wiih和from等词， 就比较容易听出这些词。</p><p>5．从5W和IH人手</p><p>　　一条典型的新闻报导由5w和：H等要素组成，即：What （What has happened事件）、 When （When did it happen时间）、 Where（Where did it happen地点）、Who（Who are the main char acters人物）、Why和How（Why and how did it happen原因和方 式）。碰到听写不出时，可以从5W和IH去分析，看看自己听写 出来的内容中缺少哪个，然后甫有针对性地去猜想可能是什么词。</p><p>当然，有的消息比较短，为了突出重点，往往只提到上述要素 中的某几个。</p><p>6．逆向猜</p><p>　　如果应用以上方法去猜得不到答案时，应该考虑到原来猜词 的大方向可能有错，另选方向再猜。辨音能力不强的初学者根据语 音猜词时，往往一条路走到底。一旦猜想出一个词，即使是错误的， 也总觉得越听越像，越听越是，很难跳出认定词框框的束缚。所以 在反复很多次找不到正确答案时，应该有意识地注意跳出原假设 的框框。其中主要是由于不适应连读而把两个词误听写成一个词 或把一个词分解为两个词。初学者由于听力水平低，往往会把连读 的两个词误以为是一个词。</p><p>7．其他途径 （1）如果有图解词典，有时“看图识字”呵以查到一些别的途 径查不到的疑难词。</p><p>　　如在一篇Hydroponics（水栽法）的消息中讲到可以水栽多 种蔬菜，用到了celery（芹菜）和lettuce（离筐）两个单词，从别的 途径一时查不着，后从图解词典的vegetable条目去查，很快就查 到了。</p><p>（2）查阅报刊查找“疑难词”。由于当代是信息社会，新的词汇 不断出现，来不及收入词典，但在各种各样的报刊中却都有及时的 反映（尤其是China Dai1y），一般都能找到答案。例如美国近几年 在报道屡屡出现邮包炸弹事件时反复使用Unabomber这个词， 一时不知是什么词，直到1996初抓住了投寄人是一大学教授，看 了China Dai1y上的专题新闻以后才知道如何拼写。看中文报纸 知道作“匿名炸弹杀手”解。</p><p>8．先放一放</p><p>　　有些经多方努力仍找不到答案的疑难词可先放一放，随着时 间的推移和英语水平的提高，总有一天会有答案的。例如：</p><p>（1）在连续不断听各种各样的英语题材中解决疑难问题。例如 VOA I980年在播送military junta（南美各国政变后上台的军政 府）中的iunta一词时，词中的j发h的音。根据这个发音在词典 上查不到，请教别人也得不到答案。 1981年某日的VOA节目专 门回答了听众提出的这一个语音问题，才知道是junta这个词的 一种异读。</p><p>（2）根据上下文的意思推敲。现代信息社会的语言发展很快， 新词层出不穷，经常会碰到一些词典里查不着的词，或者一个老的 词随着时间的推移又有了新的释义等等。碰到这种情况，除了向别 人请教外，只有靠自己独立判断了。所以这种根据上下文的内容判 断新词的意思（或者词的新义）的做法不是图省事，而是为了锻炼 一种对于英语水平较高的人来说必须具备的猜测词义的本领。</p><p>　　例如demagnetize一词在词典里只有“去磁、消磁”等解释，但 是在报导古巴外逃难民去美国的消息里用了此词，显然不会与，‘去 磁、退磁”有关，但是词典里没有别的解释。碰到这种情况可以查 “magnetize”的解释，其中有“吸引”之意，据此可以推测出应该做 “使失去吸引力”解。</p><p>　　又如1994年8月间在报导美国的棒球队员罢工时突然出现 salary cap的说法，词典里查不到。但是根据上下文可以推测出来 是限制队员工资的意思。后来的消息中又用了The players feared the owners would finally impose a salarv limitation next season 的说法，证明推测是正确的。</p><p>　　美国邮局的劳动强度大，条件差。1991年发生一邮局工人因 劳动待遇差又被解雇而枪杀他人的事件。此后就有going postal 的说法，表示对于工作条件和待遇极度不满。</p><p>　　所以在听懂上下文意思的情况下要敢于发挥，而不拘泥于词 典里是不是有此解释。退一步说，即使自己的推测与分析木合适， 也没有太大关系，因为反正你从其他词典里找不到合适的解释。何 况随着水平的提高，认识也会不断提高，可以找到更贴切的解释。</p><p>5.6 如何查词典<br>1．查词典是逆向法重要一环</p><p>　　查词典是英语学习逆向法的重要一环，这种学习方法的很多 优点是通过查词典体现出来的。例如在长期听写过程中，自己的发 音会受到录音的影响。因为在听到一个不会的词以后，要想能猜出 来并在词典里找到，首先必须准确地抓住其发音，能正确地模仿着 读出来。如果抓不住其发音或模仿不了，是根本无法猜词的。长期 坚持这样做：必然能把自己的错误发音纠正过来，从而正确读出学 到的生词。又如为什么用逆向法学到的单词比一般阅读时查词典 学到的记得牢？也是因为用逆向法学习时查词典运用了脑子的多 个部位，而且注意力高度集中所致。所以要在思想上明确树立起词 典是“第一老师”的观念，不断地向它求教。</p><p>　　有的人虽然也用逆向法学习英语，但是碰到生词以后不愿意 自己动手去千方百计地猜词和查词典，因为他们认为查词典花的 时间很多，而得到的解答只是一瞬间，浪费了大量时间，不如问别 人或看现成的记录来得快，他们这样做的结果，必然体会不到逆向 法的优点，水平也不会很快提高。</p><p>　　有了问题要查词典，没有问题时也可以查词典，看看你所熟悉 的那些词的释义和例句。开卷有益，一定可以从中学到不少英语知 识。勤查词典的习惯是逐步养成的，在英语知识不太扎实的起步阶 段要有意识地强化查词典的训练。对于自己的听写记录，稍有疑问 就查词典，久而久之，才能养成这种习惯。</p><p>2．写在纸上以后再查</p><p>　　在起步阶段，不断需要“猜词”，有时会发生明明猜出来的词是 对的，但就是在词典里找不着的虚假现象。这是因为自己对英语还 很不熟练，在查词典的过程中自己脑子中的词的拼写会“走样”的 缘故。例如有一位初学者在听到latrine这个词的发音以后，第一 次就猜对了，但没有把猜的询写在纸上，结果一边查着一边就“走 样”，latrine的拼写变成了laterine和letrine ，因而查不着。为了 避免这种现象，在英语水平还不高的起步阶段，猜出词以后，不论 正确与否，都要写在纸上，然后再去查。</p><p>3．一边读一边查</p><p>　　查词典时要一边读一边查。有时初学者根据发音试拼出一个 词，写在了纸上，默记在心中去查词典，本来试拼出来的词是对的， 但还是迷失了方向，找不着。为什么会有这种现象呢？主要是因为 初学者的英语熟练程度不高，对英语单词的“瞬时记忆”能力比较 差，查着查着就记不准自己要查的词是怎么拼写了。因此即使要查 的词就在眼前，也可能滑过去，而且在你一页一页翻的时候，一定 会看到一些你所熟悉的词，这时你的注意力就会被这些词所吸引， 不自觉的会把目光停下来去看这些词，忘记了自己本来要查的词。 如果一边读一边查，就能直接去查，不会被别的词所干扰，因而容 易查到，并且随时都能判断自己所查到的词是否正确，这样也就加 深了记忆。</p><p>4．取最切题的解释</p><p>　　有些英语水平不大高的人以为英语单词和汉语单词是一一对 应的，因而在查阅词典的时候，只看词例下面的前面一、两个解释 就把词典合上了。把查到的词义用到文章里去，可能“牛头不对马 嘴”，根本讲不通。为了避免这种现象，查阅词典时要把词典上的全 部注释和例句看完，再从中选取最切题的解释。有的时候词典上的 所有各种解释都不太切题，这时就只能意会，不能言传了。通过这 样的方法学到的英语单词知识是比较全面的，而且是比较“活”的， 能在不同的场合灵活运用。</p><p>　　把查到的词的全部注释和例句都看完的作法非常有利于扩大 词汇量，例如查到trunk以后，词典上的解释非常多，作为名词解 的就有：</p><p>树干，（动物或人体的）躯干，（昆虫的）胸部，大血管，神经于， （铁路、运河和电话线的）干线，大象的鼻子，（鸟、虫的）长嘴，（旅行 用的）大衣箱，汽车车尾的行李箱，（复）男用运动裤，（建）柱身， （信）中继线，（船）便门，（矿）洗矿槽</p><p>作为形容词的解有：</p><p>树干的、躯干的，（铁路、运河和电话线等）干线的，箱形的，有 筒管的。</p><p>　　如果用同义词和反义词词典，应该把所有的同义词和反义词 看一遍。例如，查construct这个词时，就可以查到同义词有：</p><p>build ，erect ，make ，fabricate ，set up ，create ， formulate ，frame，design，devise，fashion，shape，organize， arrange等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编程语言连连看_第一课</title>
      <link href="/2020/03/12/bian-cheng-yu-yan-lian-lian-kan-di-yi-ke/"/>
      <url>/2020/03/12/bian-cheng-yu-yan-lian-lian-kan-di-yi-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="第一课-编程是什么"><a href="#第一课-编程是什么" class="headerlink" title="第一课 编程是什么?"></a>第一课 编程是什么?</h1><h2 id="一、不问是什么，只问怎么做"><a href="#一、不问是什么，只问怎么做" class="headerlink" title="一、不问是什么，只问怎么做"></a>一、不问是什么，只问怎么做</h2><h3 id="1-编程要用什么"><a href="#1-编程要用什么" class="headerlink" title="1.编程要用什么"></a>1.编程要用什么</h3><p>纸笔</p><p>电脑：Scratch Desktop、Jupyter、Dev-C++</p><h3 id="2-编程像什么"><a href="#2-编程像什么" class="headerlink" title="2.编程像什么"></a>2.编程像什么</h3><p>语文</p><p>英语</p><h3 id="3-编程有什么"><a href="#3-编程有什么" class="headerlink" title="3.编程有什么"></a>3.编程有什么</h3><p>【单词】字符、【单词表】数组、列表、字典、【段落】函数、【文章】库、类</p><h3 id="4-编程能干嘛"><a href="#4-编程能干嘛" class="headerlink" title="4.编程能干嘛"></a>4.编程能干嘛</h3><p>做游戏<br>做动画<br>解数学题<br>练英语<br>画图</p><h2 id="二、照猫画虎（解数学题）"><a href="#二、照猫画虎（解数学题）" class="headerlink" title="二、照猫画虎（解数学题）"></a>二、照猫画虎（解数学题）</h2><p>证明冰雹猜想</p><h3 id="1-数学语言解法"><a href="#1-数学语言解法" class="headerlink" title="1.数学语言解法"></a>1.数学语言解法</h3><p>方法<br>    1.取正整数n<br>    2.如果n是偶数，n/2<br>    3.如果n是奇数，(n*3)+1<br>    4.重复<br>    5.得到数字1</p><p>例题<br>    3<br>        10<br>            5<br>                16<br>                    8<br>                        4<br>                            2<br>                                1</p><h3 id="2-自然语言解法"><a href="#2-自然语言解法" class="headerlink" title="2.自然语言解法"></a>2.自然语言解法</h3><p>1.创建一个空列表，用于记录变换过程<br>2.输入一个正整数n，然后在一个循环结构中进行变换运算<br>3.将n放在循环控制条件中进行判断。如果不等于1就执行第4步，否则结束循环<br>4.如果n是偶数，则使n=n/2；如果n是奇数，则使n=3n+1<br>5.将变换后的n值记录到列表中，返回到第3步重复执行</p><h3 id="3-编程语言解法"><a href="#3-编程语言解法" class="headerlink" title="3.编程语言解法"></a>3.编程语言解法</h3><p>分为两步，先初始化，开始证明。</p><h4 id="Scratch版本"><a href="#Scratch版本" class="headerlink" title="Scratch版本"></a>Scratch版本</h4><p>​    初始化<br>​    冰雹猜想</p><p><img src="http://q6lsd5k7n.bkt.clouddn.com/scratch%20ini.png" alt></p><p><img src="http://q6lsd5k7n.bkt.clouddn.com/scratch%20bingbao.png" alt></p><p><img src="http://q6lsd5k7n.bkt.clouddn.com/scratch%20start.png" alt></p><h4 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h4><p>​    初始化<br>​    冰雹猜想</p><p><img src="http://q6mgnrzz2.bkt.clouddn.com/python%20ini.png" alt></p><p><img src="http://q6mgnrzz2.bkt.clouddn.com/python%20bingbao.png" alt></p><p><img src="http://q6mgnrzz2.bkt.clouddn.com/python%20start.png" alt></p><h4 id="C-版本"><a href="#C-版本" class="headerlink" title="C++版本"></a>C++版本</h4><p>​    初始化<br>​    冰雹猜想</p><p><img src="http://q6mgt5ib5.bkt.clouddn.com/cppini.png" alt></p><p><img src="http://q6mgt5ib5.bkt.clouddn.com/cppbingbao.png" alt></p><p><img src="http://q6mgt5ib5.bkt.clouddn.com/cppstart.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言连连看系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《发哨子的人》里的语言</title>
      <link href="/2020/03/12/fa-shao-zi-de-ren-li-de-yu-yan/"/>
      <url>/2020/03/12/fa-shao-zi-de-ren-li-de-yu-yan/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160844.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160900.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160902.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160903.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160905.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160905.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160908.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160909.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160911.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160912.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160914.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160915.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160917.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160919.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160920.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160924.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160922.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160927.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160928.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160930.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160939.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160940.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160942.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160943.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160944.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160946.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160947.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160949.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160950.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160950.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160953.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160955.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312161010.jpg" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网站建设</title>
      <link href="/2020/03/12/wang-zhan-jian-she/"/>
      <url>/2020/03/12/wang-zhan-jian-she/</url>
      
        <content type="html"><![CDATA[<h1 id="问题大集合"><a href="#问题大集合" class="headerlink" title="问题大集合"></a>问题大集合</h1><p>1.hexo sever端口占用，localhost:4000无响应</p><p>解法1:重启</p><p>解法2:更改端口号为5000</p><pre class="line-numbers language-javascript"><code class="language-javascript">hexo s <span class="token operator">-</span>p <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解法3:在站点配置文件加入新端口</p><pre class="line-numbers language-javascript"><code class="language-javascript">server<span class="token punctuation">:</span>  port<span class="token punctuation">:</span> <span class="token number">5000</span>  compress<span class="token punctuation">:</span> <span class="token boolean">true</span>  header<span class="token punctuation">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解法4:</p><pre class="line-numbers language-javascript"><code class="language-javascript">netstat <span class="token operator">-</span>ant <span class="token operator">|</span>grep <span class="token number">4000</span> kill<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学马拉松</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-ma-la-song/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-ma-la-song/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Marathon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学视频剪辑</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-shi-pin-jian-ji/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-shi-pin-jian-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Video clip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学摄影</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-she-ying/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-she-ying/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Photography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学语言之逆向法</title>
      <link href="/2020/03/12/xue-yu-yan-zhi-ni-xiang-fa/"/>
      <url>/2020/03/12/xue-yu-yan-zhi-ni-xiang-fa/</url>
      
        <content type="html"><![CDATA[<p>大道至简，逆向法之所以有效，是因为从最底层来讲，逆向法就是踏踏实实，刻苦努力的学习方法。</p><p>先来看看为什么我们的学习收效不大，原因有很多，智商低，毅力差，决心小，主观不努力，学习方法上，陷入怪圈，急躁浮躁，基本功不扎实，得不到鼓励，得不到指导。频繁改变学习方法和途径，老是在教材和方法上兜圈子。学习三天打鱼，两天晒网。急于求成。</p><p>逆向法特点：</p><p>1.想快也快不起来，彻底消除速成思想。</p><p>2.全面暴露基础知识不足，自觉防止好高骛远。</p><p>3.进步可视化，促进良性循环。</p><p>“学习如逆水行舟，不进则退”</p><p>英语的逆向学习法，调动眼，耳，手，口，脑，具体化为“听、写、说、背、想”。</p><p>学习英语主要问题是“急躁浮夸”和“基础不牢”。</p><h3 id="基本理念："><a href="#基本理念：" class="headerlink" title="基本理念："></a>基本理念：</h3><h4 id="1-逆急躁浮躁"><a href="#1-逆急躁浮躁" class="headerlink" title="1.逆急躁浮躁"></a>1.逆急躁浮躁</h4><h4 id="语言学习的规律"><a href="#语言学习的规律" class="headerlink" title="语言学习的规律"></a>语言学习的规律</h4><h4 id="1-学习不可能速成"><a href="#1-学习不可能速成" class="headerlink" title="1.学习不可能速成"></a>1.学习不可能速成</h4><h4 id="2-只有在不断的反复中才能学会"><a href="#2-只有在不断的反复中才能学会" class="headerlink" title="2.只有在不断的反复中才能学会"></a>2.只有在不断的反复中才能学会</h4><h4 id="2-逆凭空的强化和提高"><a href="#2-逆凭空的强化和提高" class="headerlink" title="2.逆凭空的强化和提高"></a>2.逆凭空的强化和提高</h4><h4 id="3-逆纯应试教学"><a href="#3-逆纯应试教学" class="headerlink" title="3.逆纯应试教学"></a>3.逆纯应试教学</h4><h4 id="4-逆学习中的苦恼"><a href="#4-逆学习中的苦恼" class="headerlink" title="4.逆学习中的苦恼"></a>4.逆学习中的苦恼</h4><h4 id="5-逆学科和专业"><a href="#5-逆学科和专业" class="headerlink" title="5.逆学科和专业"></a>5.逆学科和专业</h4><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求:"></a>基本要求:</h3><p>以最严格的要求，从最基础的地方做起</p><p>不可一词无来历，不可一词不讲究，力求“词词懂、句句懂”</p><h3 id="三个注重："><a href="#三个注重：" class="headerlink" title="三个注重："></a>三个注重：</h3><p>注重精神和思想</p><p>注重方法</p><p>注重工具</p><p>优点：</p><p>调动学习积极性</p><p>引人入胜</p><p>提高学习能力</p><p>全面提高水平</p><h3 id="巧学"><a href="#巧学" class="headerlink" title="巧学"></a>巧学</h3><p>刻苦努力第一条</p><p>结合自己的情况</p><p>吸取其它方法的优点</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学写作</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-xie-zuo/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-xie-zuo/</url>
      
        <content type="html"><![CDATA[<p>学习中文之写作，写作有两种世界观，面向对象和面向过程。</p><p>写作需要想象的迸发和情绪的敏感，属于感性生产；而编程则要求严谨的逻辑与冷静的思索，属于理性生产。这两者在思维的要求上看似相异，但其实有许多相通的地方。这种相通，也昭示了一个感性的人，也是可以学好编程的，以及一个理性的人，也是可以学好写作的。</p><p>学习写作是为了和这个世界建立联系，更好地表达自己。</p><p>方式一：通过写日记记录每天发生的事来锻炼</p><p>方式二：</p><p>一、OOP</p><p>一切都是对象。</p><p>写作 = 对象 + 消息</p><p>二、POP</p><p>写作 = 结构 + 算法</p>]]></content>
      
      
      
        <tags>
            
            <tag> Writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学数学</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-shu-xue/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-shu-xue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学英语</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-ying-yu/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-ying-yu/</url>
      
        <content type="html"><![CDATA[<p>A VOA Special English Word Book</p><h1 id="逆向法大全真正的听写实践者"><a href="#逆向法大全真正的听写实践者" class="headerlink" title="逆向法大全真正的听写实践者"></a>逆向法大全真正的听写实践者</h1><p> 我只是一个不坚定的逆向法实践者，因为懒嘛，至于效果，呵呵，效果确实不错！（听<br>着像广告，呵呵）<br> 若问不成功的原因，很简单，因为我坚持得不好，我遇到的困难也是大多人的最大困难，<br>就是很难坚持到底！<br> 截至目前我认为最好的英语学习方法是以听写为核心的逆向法<br> 我觉得要想学好，条件是用合适的材料，集中精力每天两个小时，坚持半年以上，英语<br>水平尤其是语感就会有大的提高。<br> 灵活运用逆向法<br> 我运用逆向法学习英语已经快三年了。有许多感受想同网友交流一下。<br> 第一， 选择听力材料要符合个人实际水平。太难或太容易都不好。(你可以听懂百分之<br>六十以上的材料，我选择的是西安外语学院的英语新闻听力，上海海文出版社的标准美语听<br>力，北京外语学院的中级听力和高级听力。另外还从网上下载了 BBC/VOA 等时事新闻节目。)<br> 第二，反复听十遍还听不清楚，就要查对原文，以便搞清问题出在那里。有针对性地学<br>习。(材料最好要有标准文字说明，以便对照,免得胡乱猜测，起步阶段一定要结合教材和文<br>字说明学习。不要机械地模仿钟教授，如果你感觉仍然太难，就需要重新选择听力材料，减<br>少难度，增加自信心。这个阶段会遇到许多困难，随时可能失去信心。)<br> 第三，练习完整地听懂一句话之后再默写。<br> 第四，大声跟读。可以边看着记录稿，边跟播音员朗读。并把自己的声音录下来，纠正<br>语音。（很多人在这点上犯错误，太懒。或者羞于开口）<br> 第五，练习精听的同时，加大泛听练习。选择完全新的材料，只听一到三遍，掌握大意<br>即可。同时养成每天坚持听英语广播的习惯。（泛听材料是海文出版社的标准美语入门，VOA<br>的慢速英语；北京人民大学的英语绿地，美国 ABC 电视新闻，以及各种有兴趣的听力材料。<br>我对于泛听比较重视。先选一些比较容易的材料，练习一遍全部听懂的能力；再坚持听比较<br>难的广播电视新闻。）<br> 第六，逐渐培养一遍听懂的能力。只在特别难的地方才用听写法。（这是逐渐培养出来<br>的，没有说是一开始就用这个办法）<br> 第七，加强阅读练习。选择有一定难度的阅读材料，练习快速阅读。遇到生词查英英词<br>典。特别注意阅读网上最新的英语背景新闻，以便听的时候减少难度。<br> 第八，练习写作。可以把听过的内容用自己的话写出梗概。另外多练习用英语生词造句。<br>（可用口头复述练习）<br> 第九，练习汉翻英。最好找一些有标准译文的材料，先自己翻译，再对照范文学习。特<br>别注意把握英语与中文之间的微妙关系。（新概念就是很好的练习资料）<br> 第十，每天保持相当量的练习。只有练到一定的数量，才能在大脑中构造一个英语区。<br>以后再说英语时就不会出现英汉互相干扰的问题了。<br> 以上是我本人花了三千小时练习英语逆向法的真实体会。供参考。<br> （—–偶像啊偶像! 你终于出场了!呵呵）<br> 怎样听？<br> 精听的好方法是逆向法。<br> 我的具体做法是，先完整地把一条新闻听一到三遍，争取掌握大意。然后，一句一句精<br>听，力争每句话都听明白。遇到实在不懂的地方，再听写。根据我的实际水平，我选择了专<br>业英语大三和大四的新闻听力教材作为起步阶段的听力材料。此外，每个月安排几天时间，<br>完整地把几十条标准英语新闻听写好。遇到难点，及时核对原文，搞清楚问题出在何处。<br> 泛听是逆向法比较忽视的方法。其实，泛听不比精听次要。我在泛听过程中经历了几个<br>阶段。先是把它当作音乐听。主要为了熟悉语音，语调和语气等。这个阶段可能听不懂内容，<br>但是不要紧，它有助于提高英语听觉的敏感性。有时睡觉时都戴着耳机，做梦时耳边还有英<br>语的声音。在这个阶段，千万别急于搞清楚磁带里说的什么，只是听声音。如果老想听清内<br>容，就会有深深的挫折感，甚至怀疑自己头脑很苯，不适于学英语。而有了这种意念，就会<br>真地使一个健康的人变成英语的弱智者。附带说一句，根据观察，许多音乐感觉好的人学习<br>英语听力和口语比较容易。人的大脑中，负责音乐和语言的脑区有一致性。我在大学时，学<br>校交响乐团的几个小提琴手都会说不错的英语。<br> 接下来，就要认真练习在泛听中掌握大意。这个过程比较难。建议在选择泛听材料时，<br>先选容易的开始。比如多听慢速英语广播，最好是实时练习听 VOA 的 SPECIAL ENGLISH 节目，<br>包括听其中的专题报道和小说播讲。第一遍听大意，第二和第三遍听细节。由此过度到听大<br>学专业英语的中级听力磁带。我认为，上海海文出版社的标准英语听力入门是很好的泛听材<br>料。其程度介于慢速英语和标准英语之间。而且信息量大。练习听力千万不可小看慢速英语。<br>学习者如果达到一遍完全听懂 VOA 慢速英语的各种广播节目，就可以说基本掌握了英语（作<br>为一种外语）。建议学友们在苦读新概念英语的时候，也给予慢速英语一定的位置。实际上，<br>只靠一套教材（如新概念英语），是无法学会英语听力的。<br> 再下来，就要练习泛听标准英语了。这是最难也是最有趣的练习。我的方法是步步跟踪<br>语音，不在生词上纠缠，快速把握大意。第一遍听懂一半；后两遍听懂百分之七十以上。达<br>不到这个水平，则说明材料过深了，可以暂时放一放。顺便说一下，许多泛听材料也可以作<br>为精听材料，有时间时用听写法一句句扣懂它。<br> 如果泛听标准英语时达到一遍听懂百分之七八十的水平，就具备了专业英语本科生的水<br>平。也就是说，自学英语的基本功阶段已经完成任务。这是很了不起的事情。值得庆贺一番。<br> 最后，练习精听泛听都离不开阅读水平。道理是，成年人学习听力是在学习阅读之后进<br>行的，所以大脑的思维程序是，先把听到的声音转为文字，再领会意义。也就是说，能否听<br>懂取决于能否读懂。当听力提高到几乎自己认得的词都能听懂时，再提高就需要阅读水平也<br>上一个台阶。培养阅读能力要注意快速读懂。可以把时钟设定在十分钟左右，硬要求自己读<br>完三千字的文章，并且了解主要内容。可以把阅读材料按照难易程度分成几个级别，循序渐<br>进。具体方法可以参考美国出品的英语教学软件 GLOBAL ENGLISH，此教材共分十级，从初<br>级水平达到基本掌握的程度。建议你上网查询这套教材，具体地址是WWW。GLOBALENGLISH。<br>COM。另外，还可以上 ABCNEWS 网站，每天跟踪最新时事报道。这个网站的文章都是原版<br>的世界四大通讯社稿件，词汇量很大。如有条件，还可以订阅一份美国或海外出版的大报，<br>每天翻阅。我坚持看香港的 SOUTH CHINA MORNING POST，系由英国人编辑的百年老报纸。<br> 至于练习汉译英，可选择上海出版的英语口译一书。以及国家领导人的现场答记者问等<br>直播录像。<br> 精读与泛读是阅读训练中的老问题。作者认为，六级英语通过后，就可以流畅地阅读外<br>国文学原著，这个估计明显偏高。公外的四/六级考试无法同英语专业的四级/八级相提并论。<br>公外六级英语通常不如专业英语四级的水平。<br> 作者有关英语分级的观点很有价值。中级水平是绝大部分英语学习者所处的阶段。中高<br>级水平含义很多，是一般可以简单应付工作的英语学习者的真实状况。所谓高级英语，不是<br>指听懂了高级听力的教材就是高级水平了，到听其他较深的材料时照样有困难。高级英语是<br>一个综合概念，只有听说读写水平同时提高到相应阶段，才可以说学习英语进入自然成长状<br>态。<br> 在英语学习中，宁愿把自己的水平低估一些，也不要太好高骛远。慢些，再慢些。扎扎<br>实实把基础打牢，齐头并进提高各项英语能力，全面进入真实的高级阶段。<br>有关新概念<br> 钟教授有一观点，认为把新概念全部背熟就可以拿下英语。这个看法不全面。以至于不<br>少网友误解为只要学好新概念一套书就足以。也许，这对于应试有用。但对于全面提高英语<br>水平不利。学好新概念，只是打下比较扎实的英语基础，离“拿下英语”还远得很呢。毕竟<br>新概念只有 6000 词汇量，而且篇幅短小，不可能囊刮所有语言现象，表达方式。另一方面，<br>这也正是新概念长盛不衰的原因，能让你在最短的时间内打下坚实的基础。<br> 关于第四册，公认是有难度的（尽管词汇量不大）。不过如果第三册学得扎实，第四册<br>应该可以自学。世图版的译文不太好，很多地方译错了(或译的不好），建议多找些译本对照，<br>在对比中就能发现哪些翻译得好些，为什么好，哪些翻译错了，为什么错（其实各译本都有<br>错，其中以世图最差，安徽科技其次，上海外教不错，新版的也可以）。在这样翻译，比照<br>的过程中语法基本功得到不断的加强。阅读与翻译包括写作能力也得到提高。<br> 关于逆向法<br> 一，如何增加词汇量？<br> 这是起步阶段的大问题。生词太多是无法听下去的。办法有两个：一是先听特别容易的<br>材料，也就是说生词要少，句法要简单。比如可以从中学的英语教材听起，也可以从慢速英<br>语开始。这个阶段主要练习听懂自己认得的词或读得懂的文章，也就是先不扩大词汇量，而<br>是主攻听力。一般人如果认得六千英语词，大约也就能听懂一千词。因此，选择什么材料听，<br>对于初学者特别重要。通过四六级的学友，可以从美国之音的慢速英语起步，或从北外的中<br>级听力开始。如果程度低，可以选择从中学教材或英语 900 句起步。通过苦练，逐步把自己<br>已经认得的材料听懂。并且边听，边扩大词汇。这个办法很扎实，就是进度慢些。<br> 二是加强阅读，集中扩大词汇量。可以买一些简易英语读物，先从 2，000 词汇量的书<br>开始，一级级进步到 5，000 词汇量一级的读物，再达到掌握 15，000 级以上的英语书刊报<br>纸。不过，这样一来就不是主攻听力，而是练习阅读了。其实，提高听力和增强阅读能力是<br>不能分开的。互相结合，一定能促进综合英语水平的提高。<br> 我个人主张尽量用第一种方法，一步步在练习听力的同时扩大词汇量。<br> 二，逆向法如何具体操作？<br> 如上所述，先选择适合自己真实水平的听力材料，千万不要眼高手低。选太难或太容易<br>的材料听都不好。一般可选择能听懂百分之六十以上的听力材料，然后主攻难点。<br> 一开始可以通听三遍，掌握大意。然后一句句或一个个词听写下来。这取决每句话的难<br>易程度。简单的句子，可以一句句听写；很难的句子就只能一个个词听写。我自己的做法是<br>用复读机一句句反复听，只要听明白了，就不再听写。只集中精力听写难点。有时，一句话<br>部分听懂了，部分听不懂。这时可以把不懂的地方用括号圈出来，反复听，直到听清楚后把<br>词填进去。起步阶段特别困难，很容易失去信心。因此一定要选合适的材料听。先易后难，<br>循序渐进，是学习听力的途径。我个人在这一点上走过弯路，刚开始选的磁带太难了，连专<br>业英语翻译都觉得不容易。我还以为只要攻克最难的材料，就可以一马平川拿下听力。其实<br>白花了许多功夫。希望这点教训对你有益。<br> 除了听写，还要大声朗读。可以跟着播音员读，并录下音来，反复比较，提高发音质量。<br>顺带说一句，语音好坏直接影响听力和口语水平。要想切实提高听力，一定要过语音关。做<br>到发音准确，轻重音适度，语调和语气向老外看齐。<br> 在具体运用逆向法时，关键点是反复练习，反复模仿。<br> 三，如何给自己加压力？<br> 掌握英语听力，必须让自己整天“泡”在英语里。没有压力，不想听或不想学是无法掌<br>握英语的。最好的情况是对于英语有兴趣，自觉地天天操练。当然，兴趣也要培养。选择合<br>适的材料听，容易有成就感，可以促进自己学下去。如果你练习听力有明确的目标，那就再<br>好不过了。或者结合自己的工作需要练习，或者为通过托福考试，或者要到国外生活。有一<br>个真实的故事，二战时期美国盟军为派一批人到德国军队刺探情报，硬要求选中的人二个月<br>必须讲一口流利的德语，并达到德国人无法分辨的水平。不管是否达到这个水平，这些人都<br>要按时派到德国。这是要命的事情。结果所有的人都掌握了这倒霉的德语。由此可见，压力<br>对提高外语水平的重要性。<br> 阅读<br> 阅读是成年人学习英语的起点，也是伴随学习过程的难点。不要以为阅读是英语学习中<br>最容易的部分。只要看看专业八级英语的阅读题目，以及随便翻翻英国经典散文，就知道阅<br>读的含义了。据报道，美国越来越多的年轻人患上一种脑病，即阅读障碍症。文字符号对他<br>们的头脑构不成刺激。<br> 重视阅读是第一步。不仅重视应用性的读物，如新闻报道，文书信件，可读性的文章小<br>说等，还要有意识地阅读散文哲学和其他经典文学作品。特别是后者，阅读起来如坠五里雾<br>中。我曾经读罗素的《自由人的崇拜》，那种强烈的精神追求表现于姿情澎湃的优美文字之<br>中。其间还有深奥的哲学意念。第一遍读时，云里雾里，间或又感觉有所触动。不断读终于<br>把握了玄机。<br> 选择阅读材料要精，深，美，博。新概念第四册的文字不少达到了这一要求，是阅读的<br>好材料。另外，该书的作者还有一本专门用来阅读的教材，《ENGLISH THROUGH READING》<br>约收入 20 几篇文章，都很有价值。不知为何出版社只认《新概念》，却把这本书冷落了。当<br>年它是和《新概念》一起引进国内的。据我的经验，上海复旦大学 1995 年左右的博士生英<br>语精读教材就很好，所选文章很讲究，文学，艺术，哲学，历史，音乐等都有涉猎，难度比<br>《新概念》第四册又高出若干。<br> 练习英语阅读可以参考小时候学习汉语阅读的过程。通读几遍，用英英词典查找生词，<br>反复默写生词，用生词造句，抄写课文，背诵优美段落，写读书笔记。特别是抄写课文对于<br>正确理解内容很有帮助。一些大翻译家也有此习惯。此外，适当练习英翻汉可以提高阅读的<br>精度。<br> 练习阅读一定要自备几套高质量的工具书。牛津英英词典，剑桥成语和俚语辞典，北京<br>大学出版社的英语同义词词典，商务出版的英汉大词典等。<br> 练习精读可以借助中译本。比如《简爱》等小说，可以选其中有价值的段落对照中译本<br>反复精读。<br> 练习泛读可以读惊险小说，集中精力追踪情节，不管生词或描写。<br> 再有就是分级阅读，由浅入深。<br> 钟教授主张精读，遇到生词就停下查词典。也有学派主张精读和泛读并举。我用在精读<br>上的时间较多，感觉其缺点是阅读速度太慢。泛读我只练习过看浅易小说和词汇量在 10000<br>以内的中级读物，以及读英文报纸。<br> 创造个性化的学习方法<br> 学习英语肯定要讲方法。越是最适合自己的方法越有效。因此很有必要探讨个性化的英<br>语学习途径。<br> 一，回顾自己是怎样学会汉语的。<br> 我是听会汉语的。大家也都一样。但是我有一点不同，我的父母在家不讲普通话，尤其<br>我的母亲只讲苏州话，到现在都是乡音不改。于是，我在上小学之前，基本把苏州话拿下，<br>起码听没有问题。以后到上海读书，听评弹和上海滑稽戏毫无障碍。人家很奇怪，一个北京<br>人怎么听得懂。至于说上海方言，我也可以大段冒充，只是有些生硬。出租司机以为我是长<br>期在北方插队的回城上海知识青年。<br> 于是我反省，学英语是否可以借鉴自己的这段经历。从 ABC 起步阶段，我就使用录音<br>机。最早听 BBC 的灵格风发音磁带，稍后听英语 900 句，以后听 ESSENCIAL ENGLISH（此书<br>当年同新概念一样风行）和现代美国口语，《今日美国》，再就是听《新概念》。总之，从认<br>字起就没离开语音和听力。当初并不很自觉。现在回想起来，与我小时学说汉语有巧合之处。<br> 二，回想自己是怎样学会阅读的。<br> 我对中文特别有兴趣，认字很早。从看图识字起，不知不觉就会阅读了。其实阅读是有<br>规律的。小学语文课讲究抄写课文，造句，朗读，默写等，遇到佳句还特意写在小本上。这<br>些我都在学英语时照搬过去。另外加上一些方法，例如练习英翻汉，也注意在阅读英文原著<br>时对照中译本精读。特别遇到生词时强迫自己查英英词典。记得刚起步时，英英词典简直就<br>是天书。终于硬着头皮顶过去了。<br> 阅读英语是为了使用。于是要求自己每天看英文报纸，上美国新闻网。起先用金山词霸<br>查生词，后来发现这东西除了可以偷懒，没有查英英词典管用。于是坚决不再往电脑上安装<br>词霸了。学英语要勤快。多动手，多动脑。现代化的技术在带来方便的同时也带来懒惰。所<br>以，后来我追随了钟教授的逆向法。与其说是为了解决听力，不如说是为了锻炼自己的勤劳<br>和韧性。<br> 学习中文阅读是离不开读古文的。同样我们不应该厌恶古英语。不管是莎翁的剧本，还<br>是华盛顿就职演说，都可以研读一番。、<br> 三，回顾自己是怎样开口的。<br> 从婴儿到全面学会说话，要花去 18000 小时，而且是在父母辅导之下。因此我从不敢企<br>求速成学会英语。实际上也没有速成法。到现在为止，我在认真练习英语听力上花了 3000<br>小时，我家亲戚大喊了不起。其实，我花去的时间还不到一个会说母语的美国少年用于听说<br>英语的六分之一时间。因此，我对自己听力仍有问题一点也不回避。因为我还要长期学下去。<br> 关于口语，我知道婴儿张口时必须有大人的辅导。所以，我从学音标起就真心拜师，一<br>步一步让先生矫正发音。虽然比不上老外，但开口说话是有自信心的。<br> 总之，学英语可以愚钝，但不可以偷懒。可以慢功出细活，但不可以一口吃成胖子。我<br>遇到过许多考试成绩优异的年轻人，无论中国外国的英语考题都得过高分，但是其中可以自<br>信地说，出国就能听课的人真是不多见。许多人到了美国课堂，边听讲边录音，回到家再一<br>句句慢慢听。我对要出国的侄儿说，你到国外练听力还不如在中国跟我练。只要在家认真踏<br>实地学，一定可以练出过硬的英语能力。关键看有没有意志品格。如果没有，别说英语，其<br>他需要吃苦才能掌握的技能同样也学不好。所以，学英语首先是学做一个艰苦奋斗的勤劳人。<br> 最合适自己的方法才是好方法。<br> 就像 pd_dyq 说的”灵活运用逆向法“那样。baobab 用逆向法学新概念也不是照搬钟教<br>授的听写说背想，而是听写－翻译－（比照核对各译本，再看参考书）－译背（看着课本中<br>文译文译回英文来背诵）－朗读（因为译背只达到能正确记住，但不能流利背诵）－背生词。<br>也就是“听，写，译，背，说”之所以把跟读朗读放在译背后，因为先朗读，那么在译背时<br>记忆的成分远大于译的成分。（翻译是逆向法里所没有的环节，逆向法第三版中钟教授把它<br>与阅读一起谈（baobab 早在读第三版之前就翻译新概念了）当然也不是 baobab 创造的了，<br>翻译是比较传统的学习方法了，不过 baobab 觉得在用逆向法学英语时，与其另找材料翻译，<br>不如翻译课文，能更大限度地吃透课文，把基本功打得更牢固，而且，更节约时间。所以，<br>baobab 就把翻译加入逆向法中了。<br> 学英语“不抬杠”“不争论”，是老一代杰出领袖的伟大发明。其实，现代民主的含义就<br>是让人各抒己见。有时候，“真理”在大多数人那里；有时候，在无名小辈一边；更多时候，<br>是在出版商手中。那么多网友都知道钟教授，知道《千万别学英语》，还知道“疯狂”。其实，<br>在他们之前已经有许多人学会了英语，包括许许多多业余爱好英语的普通人。（任何方法都<br>可以找到理论支持依据和反驳的依据）<br> 方法固然重要，但是不可强调过头。每天不可不操练英语，但可以不天天研究方法。我<br>最爱去的网站是“英语特快”。那里每天都有众多爱好者的听力帖子，好不热闹。我注意跟<br>踪过几位爱好者，眼看他们在一年左右水平大长。比如 BBC 新闻，刚开始听的朋友似乎都<br>有听天书之感。其实坚持下去，破译天书也是办得到的。学会 BBC 以后，听口播专题节目，<br>如 TALK TO AMERICA，或是 COAST TO COAST 之类，又有弟兄姐妹们顶上去。又过了一段时间，<br>他们中就涌现出听力基本过关者。<br> 我们既然是英语的忠实爱人，就应该缠住她不放。不管是大献殷勤，还是葫罗卜加大棒，<br>反正把她抓到手。正所谓“条条大道通罗马”。爱有多深，方法就有多多。总之，我们学英<br>语“不抬杠”。<br> 学习英语的秘诀是耐力加兴趣。<br> 增强耐力和兴趣的锦囊妙计是随时制订适度的标准。<br> 中国人学英语，特别是依靠磁带练听力，千万不可把标准订得太高。以练习听新闻为例：<br> 第一步，先听会慢速英语。<br> 第二步，听会 BBC/VOA 的标准新闻报道。<br> 第三步，听懂故事情节强的专题报道。<br> 第四步，学会听比较抽象的现场讨论。<br> 第五步，以上各种节目都学会一遍就听懂。这一点很难，但是一定要过关。<br> 到这一步以后，听老外讲课和演讲应该没有问题。<br> 把最终目标分解为几个阶段性目标有助于调动积极性。最后提一句，我们在国内学英语<br>一般不可能达到美国人说母语的程度。这一点不奇怪。因此，不要因为自己的英语还有障碍，<br>而影响情绪。（客观的判断自己的水平和学习潜力非常难）无论是国内学专业英语的人，还<br>是业余爱好者，都会在学习中遇到很大困难。包括钟教授，他运用逆向法学习好多年以后，<br>听老外讲话还是老要想，理解有障碍。直到他出了车祸，在家养病时又下苦功学习很长时间，<br>听力才又提高一步。我计算过，钟教授用在听力上的时间，至少要在 6000 小时以上。而且<br>他也不可能做到听任何话题都很轻松。不信你可以发邮件询问。我现在用于听英语的时间将<br>近 3000 小时，也就才达到听专题报道的程度，而且需要三遍才明白。如果有机会，我们可<br>以同在国外留学的人交流，特别是学文科的人，几乎没有人敢说英语好学的。就是在国外留<br>学，成天不干别的事情，基础中等以上的人也需要认真学习一年才过关。也就是说，要拿下<br>英语，怎么也需要 5000 小时（呵呵，都是以千小时计的）的苦练。因此，学英语是吃苦耐<br>劳的活。学之前先想想好，开弓没有回头箭。中途放弃等于浪费生命（关于这一点我也在<br><a href="http://voaenglish。xilubbs。com/" target="_blank" rel="noopener">http://voaenglish。xilubbs。com/</a> 的 22422 号帖“这是我给我的一个杭州的朋友提的学习建<br>议，请朋友指正(原创)“中特别的提出过，没有打算学到底就不要学）。此话当真。<br> 怎样让英语达到实际运用的水平？<br> 研究这个问题之前，先看一条原版的英文稿件。系关于华盛顿纪念 9/11 的报道。<br> Muslims Mourn the Dead &amp; the Loss of Tolerance<br> Alone in stark sihlouette against the green of Washington’s Rock Creek Park, the minaret of<br>the Islamic Centre mosque seems to be lonely vigil。<br> Here in America’s oldest mosque in the centre of the capital’s diplomatic quarter, hundreds<br>of people gathered for special September 11 prayers yesterday morning - a solemn reminder that<br>many Muslim Americans are also in mourning。<br> Other memorial services were receiving far more attention, yet few could be more<br>important to the issue of US-Muslim relations。<br> In a service open to other faiths, Imam Abdullah M。 Houji was expected to issue a plea for<br>tolerance and understanding - a message he has taken to the White House and Capital Hill in the<br>last year。<br> To many Muslims, it will be a message that cuts both ways one year on。<br> “I am sure that vast majority of ordinary Muslims feel a sense of immense outrage and<br>sympathy and shame at the attacks,” said Muslim Ibrahim Kamahl。<br> “We were happy to see the Washington mosque condemn the attacks within hours yet<br>today our thoughts cannot help be with the future。。。Many of us are so worried about the tone<br>of public rhetoric here, especially as another conflict approaches。”<br> “We are not evil people and Islam has never been an evil religion but this is how we are<br>being portrayed by the Christian right。”<br> Surf the television and radio shows and it is not hard to get an ear for such concerns。<br>Franklin Graham, the preacher son of famous evangelist Billy Graham, was one prominent figure<br>who recently described the religion as “evil”。<br> Many Muslims want president George W。Bush to renew his efforts to publicly reach out to<br>the faith as he did in the days immediately after September 11, visiting mosques and issuing<br>statements describing the “great” religion as one of “peace”。 Some fear, however,that he is<br>increasingly under the influence of Christian Republicans, particularly as a new war looms over<br>Iraq。<br> Some fear, too, that more delicate issues could be lost amid the rhetoric, and that<br>Washington will miss important opportunites to deal with the Arab world and help to moderate<br>Islamic fundamentalism。<br> Religious scholar Karen Armstrong this week warned a far more nuanced approach was<br>needed by Washington in dealing with only Islamic nations that had the respect of thier citizens。<br>A “new climate of hatred” had to be avoided at all costs and Washington should try to distance<br>itself from its own Christian fundamentalists。<br> The anniversary has sparked wide debate across America’s Muslims, with some warning that<br>secular services could be against Islamic teachings。<br> Others have urged the fullest participation, sensing a tough year ahead。<br> Altaf Ali, the regional director of the Council on American-Islamic Relations, said there was a<br>need to show Americans that Muslims were “suffering” too。<br> “Our absence from involvment, if we do not go out and show support in acts of solidarity<br>and establishing a day of unity and prayer, that in a sense can backfire and harm us,” he said。<br> “There’s only benifit from getting involved,” Mr Ali said。<br>一遍读懂这条新闻的水平，大约需要较熟练地掌握一万词汇以上，而且多少有些英语小<br>说散文的基础，特别是开头一段的描述性文字。本文中的一些单词需要直接英英词典，不然<br>不好理解。<br> 我认为，有这样的基础就可以直接阅读国外网上的英语报道。但是要一遍听懂同样水平<br>的新闻广播或电视，还需要经过特别训练。一般说来，可以两遍听明白 CNN/NPR/VOA 的标<br>准英语报道，就达到了可以直接同老外谈正经事情的程度。<br> 自学英语要达到以上程度，是非常困难的事。一般通过六级的学友，在阅读方面问题不<br>太大。主要是提高阅读速度和改善阅读精度。而要听懂就不容易了。我的工作单位有几位通<br>过六级的同事，但没有一人达到这个水平。当我们必须与老外谈重要公务时，只有请专业翻<br>译出马。也就是说，六级英语还无法实际运用。这是很大的遗憾。<br> 我还注意到一个较普遍的情况，通过六级英语的同事一般说英语的水平高过他们的听力。<br>有不少话能说得出，但往往听不懂老外说的话。由于听力的障碍，影响了交流。<br> 提高实际运用英语的水平，需要注意几点：快速阅读，标准英语听力，流畅的口语，标<br>准英语写作。<br> 解决阅读问题，要熟悉 15000 以上的词汇，并必须有能力无障碍地查阅英英词典。关于<br>使用英英词典，很多六级英语者并不重视，不少人甚至不会查阅英英词典。我个人的经验是，<br>不会熟练使用英英词典，就难以登上高级英语的平台。提高快速阅读水平，一定要加大阅读<br>量，特别是大量阅读原版材料。<br> 有关听力，逆向法是自学的好方法。主要因为这种方法特别适于精听，能帮助自学者打<br>下扎实基础。有了基本功再练泛听就容易许多。<br> 口语问题，需要有良好的发音基础。最好请一专门的老师个别辅导。一对一地矫正语音<br>是最佳途径。花三个月时间足矣，学费也不多。有好的语音和好的听力，是进入高级英语的<br>重要台阶。多去英语角，跟别人胡聊，说对说错不要紧。能一口气说半小时英语，再练习听<br>力就会有不同的感觉。<br> 有了六级英语基础，再结合自己的工作特点学习中高级英语，经过两年努力肯定大有收<br>获。<br> 今天我想说说“耐心”二字<br> 不急躁，不焦虑是耐心的本质。我在学习听力中犯过两大错误，一是不断要求自己在半<br>年或一年内达到“精通”的程度—-结果无一不以破产告终；二是频繁变更学习方法，时而<br>逆向法，时而“千万别学法”，时而“泛听法”，时而以阅读带动听力法等等—-最后那种方<br>法都尝试了皮毛，丧失了精髓。<br> 学习英语一定要平心静气。结合个人实际寻找一种合适的方法，然后就要“任凭风浪起，<br>稳坐钓鱼船”。以我的教训为例，刚开始练听力时，选择了逆向法。可是一上手，发现太难。<br>首先是一分钟的标准英语录音，需要 40-50 分钟才听写完。于是不再听写，改成一边看书一<br>边听。花了几个月，没有多大进步。于是又改成以泛听为主，结果最大的收获是对英语语音<br>熟悉许多，但是照样听不懂。这回，我不得不查找问题到底在哪里，老老实实“大撤退”，<br>回到自己真实的水平上：放弃听标准英语，改听慢速录音。<br> 其实，钟教授在《听遍全世界》中早有提醒，要学习标准英语听力，必须具备一遍听懂<br>慢速英语的基础。而我在起步时，需要三遍才能完全听懂 SPECIAL ENGLISH。现在看，以如<br>此初级的基础，就幻想在半年之内突破听力难关，显然是太幼稚了。<br> 类似的错误后来又多次重复。比如，当我感觉听慢速英语有提高时，又急于攻下《高级<br>听力》教材，并再次把目标锁定在半年过关。结果只是多了一次失望。<br> 在反反复复的摸索中，我逐步认识到提高听力一定要沉住气。默写要沉住气；精听要沉<br>住气；就连泛听也需要沉住气—-泛听不可走神，必须紧紧追着录音，尽量获取信息。在缺<br>少英语听说的环境下，没有谁能轻轻松松学会英语。<br> 所以，我说学英语是很累的活儿，特别需要耐力。只有耐心，没有足够的投入，还是学<br>不会。我认为，在起步时期，每天至少要花三到五小时，而且方法要对路。我虽然自称花了<br>3000 小时练听力，但由于中间弯路太长，真正有效时间也就 1500 小时左右。这可是八小时<br>工作制下 200 天不带工资的白忙活啊！希望兄弟姐妹们千万要把我作为反面教材。<br> —-花三分之二以上的时间精听和听写，用不到三反之一时间泛听一些比较容易的材料。<br>这是我在“回头是岸”时的心得。<br> —-老老实实根据个人实际水平，从低起点开始练习听写，并且认认真真地一个个词写<br>对，不懂就查找词典，向高手请教。这才叫打基础。<br> —-稍有进步时，千万不要忘乎所以，听力要进入“一马平川”的境界还有漫漫征途。<br> —-只有当听写标准英语没有任何恐惧感，而且许多句子不用听写也弄得明白时，才可<br>以减少听写时间，转而精听与泛听合理结合。<br> 总之，“别着急”是学英语的最佳心理。“卖苦力”是提高听力的唯一途径。<br> 反对逆向法的意见<br> 我觉得逆向法根本就不是方法,各位别骂我啊,我对上面的帖子没有意见,只是对逆向法<br>有意见,学习如果方法正确才会高效,何谓正确?符合个人的接收方式。逆向法就是最愚蠢的一<br>种方法。所以,三年下来,你会有所进步,可这不等于逆向法好，。不能把英语学习只当成乐趣,<br>没完没了的学,那我问你,什么时候用呢?所以一年苦学。方法自选。应该拿下。 （我真不知<br>道怎么说，那一年用什么办法拿下？这位朋友又不说）<br> 用”逆向法”学习英语的经历和体会<br> ──段德盛（1999 年 4 月）（钟教授的嫡系弟子吧，呵呵）<br> 1、逆向法使我脱颖而出<br> 3、小学二年级和五年级学生学完初一英语<br> 2、高二学生通过大学英语四级考试<br> 4、几点体会<br> 我高中时一直是班里英语学得较好的学生之一。在第四军医大学我先后参加过全国第一<br>次四级考试和第一、第二次六级考试。90 年大学毕业时我是全区队 40 人中唯一通过六级<br>的学员。毕业后到某医院从事医疗仪器维修工作，需要读一些英文说明书。我记得第一次是<br>一台生化分析仪的说明书，看得很吃力。我对不懂的单词逐个查字典，将这份说明书彻底看<br>懂翻译出来。以后再看英文说明书时就容易一些了。在医院工作期间我曾用三个多月的时间<br>背过《新概念》第二册全部一百多篇课文，每日一篇，背好后让同事听，比较流利、一词不<br>错就算完成任务。<br> 准备考研时，我在 92 年 9 月份背了《新概念》第三册前 30 课后，就再也没管英语。<br>尽管那次研究生入学英语考试较难，许多人因此落马，我还是拿到了南京通信工程学院的入<br>学通知书。 上研究生伊始，刚读研究生时我的英语水平在班里算中等，不如大多数通院本<br>科毕业的同学。每天早晨看到他们拿着收音机听 Special English 广播，我就很羡慕，心里暗<br>想：我什么时候能听懂？<br> 虽然我一入校就知道”逆向法”，但是仍然用背的方法学英语，不久就觉得太枯燥而难以<br>为继。在无奈的情况下，我从第二学期期中的时候尝试用”逆向法”学英语。那时还没有电脑<br>语言学习机，只能用单放机返过来、倒过去地听。第一面 30 分钟的 Special English 我听了<br>一个月左右。 1994 年上半年，也就是研究生第二学期，我开始听写 Special English 广播节<br>目，工具是词典和一本《英语学习逆向法》。一开始听写第一盘磁带时真困难，一个小时下<br>来只写几行是常事。至今我清楚地记得有一次一个词花了 50 多分钟也没听出来。但是正是<br>如此，我才体会到逆向法的价值，我才真实地知道自己的英语水平。到了期末，我断断续续<br>地听写了大约有六七十个小时，这个学期的英语课，我一节也没有去上。<br> 期末的英语考试是交一篇作文、听力测试和口语测试。考听力用的是 TOEFL 试题，我<br>考全班第一。考口语时我们坐在教室里，教员给出几个话题，谁准备好了就去找教员讲几分<br>钟。我看了一下题目，稍微准备了一下就第一个去找教员讲。这六七十个小时的听写有效果<br>了，我的英语开始在同学中略显突出。 第三个学期，我给自己规定每天要听写三节课（150<br>分钟），每听写完三节课就在笔记本上划一杠，到 1995 年一月，一共划了 108 个杠。也就<br>是说，这个学期我用逆向法学习了 108×2。5＝220 个小时。经过这段时间的学习，我已<br>经可以顺利地听懂 Special English 广播了。到学期结束时，我已经相信，如果在研究生班里<br>找三个英语比较好的人，其中应该有我。第四学期时南京某研究所请我们几个研究生去做技<br>术讲解的口头翻译，其中就有我。我心里直打鼓，”我能行吗？”可是当站在讲台上，翻译完<br>中方教员的第一段话后立刻就知道：我能行！因为人的听和说的能力是相关的。我一年来的<br>听写锻炼了用英语思维的能力，听写完一面磁带后我总是对着听写记录跟着录音机朗读，自<br>然而然就形成了用英语表达思想的能力。这次外训任务，我是几个同学中翻译天数最多的。<br> 研究生毕业后我从事通信系统的规划论证和建设工作，有时要与外方进行技术洽谈。我<br>既是工程师，又是翻译。因为我专业和英语都懂，所以彼此间的交流准确、顺利，也容易进<br>行深入细致的讨论。平时还要用英语与外方进行传真往来，对他们提出技术要求、进行咨询，<br>对其方案或配置进行修改或认可，提出我方建议等。一般是我先起草中文稿，呈领导审阅修<br>改后翻译成英文件，再呈领导审阅，同意后发出。 我现在的直接领导是清华的 MBA，他说<br>我写的英文比较地道。我写的信函曾加快了谈判的进程。我写的系统技术要求被外方原封不<br>动地作为其建议书的附件。 有一次我参加国家无委组织的一个国际频谱管理研修班，由三<br>名加拿大政府无线电管理的退休官员讲课。我的英语水平相对突出一些。有人问我的英语是<br>在哪里学的，我回答说“我的英语水平的提高，主要得益于长期坚持用逆向法学习。我没出<br>过国，没有花大价钱去上什么学习班。字典和周围英语比我好的人就是我的老师。”<br> 我感到用逆向法学习英语是我在学习方法上的质变。有人说逆向法太费时间，其实它的<br>时间效率比很高。我用大约 400 个小时，就使我的英语水平从一般、不能熟练地阅读英语<br>文献、基本上说不了，进步到名列前茅、能熟练地阅读英语文献和口语较流利的程度。400 小<br>时相当于一个本科生一年课内课外英语学习时间的总和，用常规的学习方法恐怕难以达到此<br>效果</p><h1 id="几个被忽视的逆向法成功因素"><a href="#几个被忽视的逆向法成功因素" class="headerlink" title="几个被忽视的逆向法成功因素"></a>几个被忽视的逆向法成功因素</h1><p>1、能随时找到高人指点，纠正发音，从而具备了较为坚实的辨音基础。起步时，钟道隆语音可以找北外的纠音，从而保证了正确的语音基础，虽然我们很重视语音，但一个人练习语音，即使练习再长的时间，也很难发现自己的问题，形成觉得自己的发音是正确的错觉。钟道隆在沈阳工作时，有北外的高材生指导；在北京养病期间，碰到听不懂的可以随时打电话咨询。我2000年知道了逆向法，当时在书店里看到这本书，越看越有兴趣，不觉买了一本，但当时因为别的事情，一直没去实践。从2005年5月开始用逆向法，过了一年后才开始重视语音问题，但遗憾的是因为没人帮助纠正，虽然买了发音的教材，但不知道自己发音的毛病在哪里，对教材仍然不够重视，因为觉得教材都很简单。直到2008年，我才意识到我发的town\launch\sum等音根本就不准确（不会讲前面的双元音和后面的m连起来发，而是分开发，其实我们的汉语拼音对学英语发音是非常有帮助的）别人发这个音我也听不懂；2012年1月我在YY上经过一个叫云朵老师的纠正才会发l这个音，耳朵才能分辨出错误的l音和正确的l音的区别（我是大舌头，L这个音的汉语我都不会发），这个音解决后我的发音就没有任何盲点了，发音也自信了，那种感觉是原来一直没有的，今年我试听了一个英语培训机构的课程，授课的外教老师普遍认为我的发音不错。而钟道隆在起步阶段就专门学习了5个多月的发音，在此期间他将自己的发音念给北外的老师听，老师帮他纠正。这个阶段非常重要，钟道隆也非常强调这个阶段的重要性。逆向英语是听音辨音为先，这必然在学习的过程中经常遇到辨别不出的音，这就需要周围有高手随时的给你指点，把这些难点攻克，你的英语听力就有进步，钟道隆在学习中，能找到这样的人随时指导。基于这个特点，钟道隆在2000年初的时候在北京办了逆向英语推广中心，给学习者在听力训练过程中遇到的难点以指导。可惜这种有效的学习方法不像考试培训那样能带来丰厚的回报，最后就不了了之了。<br>2、工作压力比较小。<br>3、善于总结。逆向法最后一个环节”想“，就是勤于总结、善于总结。这在钟道隆的身上有以下几点<br>（1）自己能发挥主观能动性，主动找到可以咨询的高手。只有高手给你指出了方向，指出了学习中的问题，你沿着这个方向，针对学习中的问题做出的努力才是有意义的。如果找 到的老师不愿意帮你，也不要自卑，你的目的是获得知识。<br>（2）及时记录感想，定期整理<br>（3）能够分清哪些该探求本质，哪些要适可而止。明白英语和数学不一样。在英语上遇到不懂的问题，可以放一放。<br>4、除了听写，还要跟读和背诵。钟道隆是非常看重跟读和背诵的。他检验一个人的英语水平高低的方法就是让他朗读，看他读的怎么样，单词的发音在他脑中是否有固定的发音。所谓的”化“就是通过背来实现的。他每次出国前的准备工作很重要的环节就是背诵。<br>5、教材选的不好。比如很多人在起步阶段就听走遍美国。这个教材是很难的。虽然它里面句式、用词简单，但里面语速很快，连读、略读、变音现象非常多。这个教材是上世纪90年代初期出的，这时钟道隆已经学英语学了10多年，但就这个水平钟道隆还将走遍美国听了300遍。这套教材的出版社欲找钟道隆给其做宣传，钟道隆也没答应，由此也可以看出钟道隆的社会责任感。初学者选听力材料要从新概念第一册、初中教材、甚至小学教材中选。慢速VOA都不合适。这样做的目的是训练耳朵对英语发音的敏感性，让耳朵适应英语的发音节奏，打下基本的辨音和发音水平。<br>6、出国机会比较多，实战练习比较多。出国提供了实战的机会，你必须得开口交流。而我们一般在国内苦学的人是没有这种机会的，所以在纯国内环境下你必须得找这样交流的机会（如英语角等）。这样的机会如果和工作不发生关系，不处理好两者之间的关系，是非常影响你的正常工作和耽误时间的。<br>7、英语进步的快慢和天赋是有关系的。必须承认这一点，钟道隆的学生李国峰在1999年4月16日开始用逆向法时，据他说英语四级听力只能听懂只言片语，模拟试卷只能考60、70分，这和我采用逆向法前的基础是一样的。但两个月后，他四级考了92分。短短2个月，进步如此神速，这不仅仅是方法的问题。他当年暑期去公司实习，英语水平比研究生的水平还高。这里面没有天赋的成分，进步是不可能这么快的。人都在干自己擅长的事情，李国峰在获得北大经济学硕士学位后，选择当了一名英语老师，现在在新东方济南分校工作。我说这样不是打击，而是希望正确认识自己，这样才能正确看待自己的付出和努力，不至于越比较越气馁，和别人比是发现自己的不足，和自己比是看到自己的进步。<br>8、将一个听力材料反复听，直到滚瓜烂熟。这也是钟道隆老师非常重视的方法，可惜书中没怎么强调（也许书中的语言是永远也无法完整的反映一个人的思想的）。逃跑的人，钟道隆听了500遍，走遍美国他听了300遍。我采用逆向法学习时，学了好几年也没什么多大的进步，其中一个因素是一直在赶进度，对于听写过的材料束之高阁。<br>9、不要贪多求快，追求进度。我当时仅仅是将一篇慢速英语听写出来就OK了，一想到还要跟读，达到基本相似的程度，然后背诵下来，我觉得太花时间，所以就没有去做。我觉得如果你觉得要达到上述要求要花一个星期，就去花一个星期，要花2个星期，就花两个星期，集中攻克。两个星期囫囵吞枣的听写3篇、4篇VOA远不如两个星期完整彻底的拿下一篇效果好。不过这里就存在一个问题，跟读？达到什么标准才能觉得我的跟读可以了。我当时就有这个疑惑，因为无论我们怎么跟读也达不到朗读者的水平，这样的话我们岂不是要一直训练下去？初学者自己很难判断自己什么时候该结束跟读？这个问题我现在还没有答案，最好的解决办法就是让真正水平高的人给你鉴别。但一般人很难有这样的条件，现在我已经有了一些感觉，比如句子的断句，跟读要会断句，科学的断句有利于跟读和背诵。<br>10、学英语是非常花时间的，要花苦功夫。我从2005年到现在，闲暇的时候时不时会想着如何学英语，我想对英语有点想法的人都会这么想，这会造成一个错觉，觉得自己花了不少时间在英语上，但实际是仅仅大脑中在想，真正去动手做的时间并不多。钟道隆采取的方法是记录开始和结束学习的时间，这样能够真正把握自己学习英语的时间到底有多少。我这么做下来后，发现自己花在英语上的时间和钟道隆比起来实在是太少了。原来我对磁带复读机是很不屑的，因为我觉得都有电脑了，还要那么落后的的工具干什么，以至于我当初花了一百多块钱买的步步高复读机以废品给处理了，很长一段时间我学英语一般都用电脑，使用电脑的复读软件来学习，2年前一个网友跟我说她不爱用电脑学英语我当时误以为他不知道电脑上有那么好的复读软件。现在我发现用电脑学英语效率是比较低的，比如，现在电脑都是联网的，你学英语一会就想上网，遇到不懂的就想上网查询（用倾听者就可以存为书签，集中处理），打断了你正常的学习步骤，更重要的是对着电脑听写、朗读的时间长了头就疼，长时间电脑操作还会造成关节炎，我右肩膀的肩周炎就是在2008年用那个单词大爆炸的软件背单词给造成的。幸运的是自从接触了倾听者这个产品后，我就迷上这个产品了，他完全具备了电脑上复读软件的功能，也克服了磁带复读机的不足。因此完全将我从电脑前解放了出来。可以集中时间来学习英语，学习效率得到了很大提高。<br>11、要对英语发生兴趣，没有兴趣英语是学不好的。如果你对英语有兴趣，什么都好解决了，上面说的也许对英语有兴趣的人都能自己体会出来。<br>以上说的这些其实也是我当初采用逆向法失误的地方，我走了不少弯路，因为缺乏高手指导，上面这些都是长时间的实践自己一点点体会出来的，这里总结出来希望对那些对学英语比较迷茫的人有所帮助。我觉得钟道隆的方法是国内自学英语者的唯一科学方法，这不包括父母是英语工作者或者周围有外国朋友经常交流的人，对他们这些人来说很多科学的英语学习方法自然而然的就渗透到他们的学习环节中了，不需要刻意的去强调。</p><h1 id="《菜鸟学英语》上部"><a href="#《菜鸟学英语》上部" class="headerlink" title="《菜鸟学英语》上部"></a>《菜鸟学英语》上部</h1><p>前言 </p><p>这是一本菜鸟写的书，亦是写给菜鸟们看的书。 </p><p>这两年，我一直都在旺旺英语论坛答疑，写些英语学习的心得体会，平常也时常指点他人如何自学，偶尔还被请到某某外语学校做报告，不过一直都没敢想过有天会写英语学习的书：首先，我的英语不怎么样；其次，我没有名气，也没有取得什么成就。这样的菜鸟，有什么资格写书？又会有什么人读呢？ </p><p>直到有天，读到了一位大学英语老师写的英语学习的书。这位老师英文非常好，遗憾的是，在他书中只给出宏观的一些指导，并未给出具体的方法。应该说，他的宏观指导都是非常中肯的，但对于非专业特别是基础差的人来说，可能读后觉得很有道理，但却无从着手。  比如，我现在基础很差，想要通过学习某教材提高英语水平，最现实的问题是：应该如何学习这本教材？ </p><p>以下是一位网友请教那位英语专业人士的问题：<br>我现在是大二，在自学新概念三，可是我不知道到底如何学？是怎样的步骤？是不是就象老师上课教授课文那样精读，先读懂，再就陌生单词查字典，然后划出搭配，句型，最后一段一段的背诵，背诵是不是以理解为主，直到看中文说出英文，要默写下来吗？一个个的单词查字典吗？课文后面的练习重要吗？特别请教一下您如何学习新概念的。</p><p>那位英语老师没有作答，也许他觉得这个问题也太简单了吧。作为专业人士，他无法想象对于基础差又无人指导下自学的非英语专业人士，这些就是最基本的问题，也是决定事半功倍还是事倍功半的问题。 </p><p>我是从很差的底子起步自学英语，能够理解对于基础差的人来说，这些具体的问题有多重要。幸运的是，我打算认真学英语时，遇上一位以Baobab为网名，个人总结出一套适合自己的自学英语方法，并把自己的学习经验发表在旺旺英语上。但很快就发现，若光是给出学习方法而不具体说明各环节步骤，容易遇到哪些问题？这些问题有无技巧可以克服？也会令人困惑，如：</p><p>一、 我估计我的英语基础和BAOBAB你开始时差不多，我以前也花过很大的工夫但收效甚微，看过你的学习经历后我受到很大鼓舞。在这里我有几个具体的问题请教：<br>1.听写时是将全文一遍一遍听懂后再开始一句一句听写一遍，还是直接一句一句听写四五遍，你的听写四五遍具体是怎么做的？<br>2.什么时候看原文？<br>3.如何将生词放进去？<br>4.翻译是英译汉还是将书上的汉语译文译成英语？ </p><p>二、我没学过英语，一直想学，但没有信心、正确的方法。因为我连初中一册的也听不懂，近两年，利用工作之余，自己自学了初中英语课本第1、2册，但觉得看着知道，作练习常出错，听十来遍也不会，只好把课文拿出来对照，然后再读、背，但第二天再读时，又觉得读错了。另外，我在用“轻轻松松背单词”的软件跟着背单词。但觉得收获不大，不知方法对否，想我这种情况，应怎样才对？ </p><p>三、我的首要目标是：05年考研成功，明年或许会参加4、6级考试，目的是为考研练手。我翻译的过程中的错误连篇累牍，该怎么解决呢？是否该从头再来？（逐篇翻译新概念2吗？）我的新概念应在明年几月份结束，然后开始做题，和背大纲单词呢？怎么安排进度好呢？ </p><p>四、到底是应该一气呵地先用最快的速度听写出来全部课文，（能够听懂的部分）然后再逐句听写，查字典，对付难句，还是应该逐字逐句地听写？这样会不会经常被卡壳而浪费时间？不知道baobab的意见是怎样的。我曾经就是总是卡壳浪费太多的时间而一度放弃。 </p><p>五、baobao你能不能仔细讲讲学英语的时候，要怎么总结？我也想试试，可是我不太会总结，而且不太会把遇到的问题分类。你能详细的讲一下吗？ </p><p>六、想请教BAOBAB一个问题：如何与记忆做斗争？我听写并完了新概念2，第三册也学到20多课。我发现学的时候每课都背下来了，但过段时间恐怕记得就不一定那么全了。如果说需要不断复习巩固的话，那么每天我可能只能复习10课，20课，也不可能把所有学过的都复习记忆。也许年龄大了，记忆力下降了。我想请教BAOBAB，你当初学习的时候是怎样一种复习背诵方法，如果背完就忘的话，收效就不会很大。我现在尝试着每天早晨朗读，不知道效果。（没参加考试，没办法检验）自从在旺旺英语发表如何自学英语的文章后，我几乎每天都会收到这样的来信，都是具体得不能再具体的问题。如果没有收到这些来信，如果没有实地指导过基础很差的人自学，我也许会与那位英语老师一样，觉得自己已经说得够清楚了。 </p><p>这就是我写书的目的：从非专业的角度，探讨在基础差的情况下如何通过自学把英语基础打好，如何少走一些弯路。故名《菜鸟学英语》。书里都是这些具体得不能再具体的问题，并且力求详尽更详尽。 </p><p>需要说明的是，我从不敢说自己创造了什么“法”，因为几乎所有现有的方法，都早已有之，书中要讨论的，都是我曾采用过的方法，有的直接拿来，有的无师自通，这些方法在实践中逐步摸索总结形成我自学的一些模式，不敢妄称为“某某法”，就算是自学的步骤吧。 </p><p>这不是一本大而全的书，而仅仅是个人英语学习心得体会。秉承钟道隆老师的教导“自己不懂的不讲，自己没有体会的不讲。”比如我不会背单词，就不会把别人背单词方法抄进书里；备考部分也仅限于本人亲历过的四六级与考研。书中所写均是个人亲身体会，以及这些年辅导他人自学所发现的问题。其中既有成功的例子，也选取了一些失败的例子做个案分析。尽管我的分析不一定对，但只要这些失败的教训能让大家引以为鉴少走类似的弯路，我的目的也就达到了。 </p><p>在此我特别要感谢为我写出失败教训的朋友，他们需要极大的勇气来直面苦读多年收效甚微的失败结果。但为了让更多的人不再重蹈覆辙，他们毫无保留地写出自己所走过的弯路。 为了保证真实性，书中实例均从我身边选取。而有代表性的网友来函则作为常见问题集中作答，希望对大家有借鉴作用。 </p><p>朋友曾建议我：“你应当在书中说明，一定的学习方法只适合一定阶段，某些学习方法到了一定阶段就应适时改变甚至放弃”。我想借用释迦牟尼的几句话来回答：“汝等比丘，知我说法，如筏喻者。法尚当舍，而况非法？” </p><p>一切法，不过都是渡河的筏子，到了彼岸，就应当舍弃，这本书提供的筏子也不例外。如果到了彼岸还要背着筏子，岂不是太笨了？</p><p>第一章  学英语改变了我的人生</p><p>2004年3月，我在网上查到自己是04年对外经济贸易大学1288名法律硕士考生中的第一名，在全家在为我这“法硕状元”欢欣鼓舞时，读初中的表妹小晴却笑：“她为什么不早点努力呢？”</p><p>不错，我今年已经31岁，为什么不早点努力呢？</p><p>一、自负聪明，虚度光阴</p><p>我读书的那个年代，有一种流行不成文的看说法：用功读书取得好成绩的学生不算聪明，不用功就轻易取得好成绩的才算聪明。</p><p>我那时就是人们眼里的“聪明人”：从小学到大学，不曾用心读过书。小学简单成绩好不消说了；初中一、二年级我整天四处游荡，成绩不好，初三时年级主任是老爸的同学，不忍见我耽误了，就耳提面命的，我才在玩乐之余稍微看看书， 成绩就进入班上前三名。中考前的一个月，我对电路图一窍不通，每日自习时请教班上同学，中考物理98分。</p><p>上了高中，我干脆不学，成了学校第一淘气大王，每日至少迟到3次——早读、下午第一节、晚读（其余课中迟到不计）；旷课更是家常便饭；还四处闯祸，“三天一小训，七天一大训”，几乎每周都被提到校长办公室训，写检讨的功夫已经练得炉火纯青，还多次连累整个宿舍跟我一起写检讨。因为玩得太晚，每天晚上都要翻门爬墙入校（只要跳起能抓住的墙，我都可10秒内翻过呵呵）；就因为我一个人翻墙，女生宿舍墙特意加高了一尺（墙是翻不过了，改爬洗澡房进宿舍，可见道高一尺魔高一丈呵呵）。至今我就读高中的女生宿舍院墙还高过男生院墙，成为该校一大景观。</p><p>成绩差是不用说的了，高三已过半学期，我还是班上倒数第三名。我们班上连我一共三个教师子弟，也就是说，我只比那两个稍强一点点。就在所有人都觉得我已是朽木不可雕时，整个学校恐怕只有一个人还觉得我还有希望，他就是我高三班主任覃国凤老师。</p><p>与其他人不一样，覃老师从不把我看成“坏小孩”，觉得我不过淘气而已。覃老师对其他同学都很严格，唯有对我很耐心：每次我闯祸，都是他去给我求情；每次被提到校长办公室，也都是他去保我出来；无论我闯多大的祸，他都很少骂我，弄得我怪不好意思的。觉得如果再不学习实在对不起他——他实在对我太好了。因此我就开始学习，很快成绩就直线上升。覃老师对我很有办法，有次考试前他设了个“最佳进步奖”，我就知道自己肯定会得——其实那就是他特意为我而设的。</p><p>应该说，我还是有些小聪明的。以生物为例，高考前3个月，模拟考我20分。生物老师让我去跟体育生一起补课（可见当时差到什么程度）。去了两次我跟覃老师说太浪费时间了，我还是自己突击吧。可是自己拿书也看不懂，怎么办呢？我旁边就是全班第一名，每次生物题发下，我都不作，而是用这些时间做数理化，等第一名做完了，就直接拿过来背。如此背了五六张卷子，就慢慢懂了些，然后才开始自己做题，不懂时就请教第一名的同学。高考时，70分满分的生物我也考了51分。但我也还是不用功，照旧玩乐翻墙闯祸，高考前从未完整地上过一周课。没有人看好我，家人对我也不抱希望，那位常常在墙头捉住我的保安甚至与人打赌：“梁绛要是考得上大学， 全校都能上大学！”</p><p>转眼就到了高考，出乎所有人的意料，我考上了。至今我还是母校鼓励后进生的奇迹。应该说，这个奇迹是覃老师创下的，他在我一人身上倾注的心力恐怕比班上其余47人还多。 用师母的话“儿子小考他都顾不上了，都顾你去了”。</p><p>可以说，如果没有覃老师，我就不会考上大学。古云“一日为师，终身为父”，此后我一直视覃老师如己父。忘记说了，我考上的是专科（本科线还差5分）。但当时我正陶醉在一片誉美之声中“你看梁绛从来都不用功，也考得上大学”“我就没见梁绛看过书，整天都在玩，这样也考得上，真是聪明！”。洋洋自得于“聪明”，哪里会想 “就是因为不努力，所以才考上专科”“如果再努力一把，就可以读本科了”。</p><p>可以说，这么多年我都不知道努力，就是因为我取得同样成绩总比他人付出少，因而自负“聪明”，辜负了大好光阴。进了大学也是这样，从来不听课，只靠抄作业，凭小聪明期末突击应付考试。每学期都补考，如此混到毕业，工作后也是如此。</p><p>二.  开始学英语的原因</p><p>1996年，我参加了一个职工培训口语班，学《走遍美国》。我的英语不是班上最好的，但却是进步最大的：3个月后，我到英语角时，已经有不少人问我“Are you an english teacher?”那时我还只能说，常常听不懂别人说什么。我也不太在意——反正去英语角对我不过是为了好玩。也没有打算认真学英语。</p><p>如此直到2000年7月，我认识了Anderson。我们在火车上相识，一见如故，他一直用英语跟我交谈。不曾想到，这将成为我人生的一个转折点。</p><p>Anderson回到上海，给我发了一封email。收到时我傻眼了——这是一封英文信。我从来没有写过英文信，更糟的是，我不会用电脑，连打字都不会，更不用说上网发email了。</p><p>怎么办呢？Anderson一直都说我是他认识最聪明的女孩，就为了“聪明”二字，我也要硬着头皮回这封英文信。查了n次金山词霸才看明白了他的信，憋了半天才在纸上写完回信。再把字母一个个地敲进键盘，其中打n次电话询问如何用电脑如何上网发信……从中午一点到下午六点我才完成了有生以来第一封英文email。</p><p>此后便常常与Anderson互发英文email。我打字慢，于是先在单位先写好，回来再键入发送。曾记得他在收到我email十分钟内回信，让我佩服不已。他哪里知道每封信我都要花几个小时甚至一整天才能完成。</p><p>我很怕错误百出他笑话我，所以每个不清楚的词都先查金山词霸汉英辞典，出来一大堆同义词，再逐个查手头厚厚的《新英汉辞典》，找到觉得适当的词（最好有类似的例句照搬）。这个方法看起来笨，却为我打下良好的英文写作习惯：力求准确地道，不写没见过的用法，无把握的词查辞典学习。</p><p>Anderson从来不笑话我，也从不指出我信中的错误，他只是不停地鼓励我“you make great progress”。我于是越写劲头越足。</p><p>Anderson对我的影响是潜移默化的。刚认识他时，我常常笑话他太工作狂了，实在不会享受生活。他很谦逊，无论我说他什么，他都说是的是的。我常自作聪明地教他一些处世之道，他总是称我为老师。现在想来，他才是我人生道路上的良师益友：从不批评我，只是肯定我每一点进步，不断地鼓励我。这就是最高明的教育——欣赏与鼓励。</p><p>尽管Anderson不介意我的破英语，自己还是觉得英文实在太烂了，所以想学英语提高一下。英语专业的朋友覃涛推荐我学新概念，于是我就从新概念1开始学。</p><p>现在想来，当初学英语的原因，只是希望英文信不要错误百出让Anderson见笑。不想这却改变了我的一生。</p><p>三.  踏实学英语，改变人生观</p><p>转眼到了2001年春节，已断断续续学到新概念2的第40课。有天我从电视中看到了一个讲座，一个影响我一生的讲座，那就是钟道隆教授的《逆向法巧学英语》讲座。 </p><p>“他45岁开始学英语，一年之后成为翻译”。吸引我的不是他英语学习的成就，而是他热情乐观的生活态度和踏实认真的治学精神，另外，“在苦学的基础上巧学”听起来也很有吸引力。</p><p>先简单介绍一下逆向法，从实施步骤上说，其各环节可以概括为“听、写、说、背、想”，强调在不看文本的情况下听写；从学习理念上说，强调踏实学习打好基本功，反对速成；从巧学上说，强调勤于总结，灵活运用。</p><p>我当时正在准备4月份的职称英语考试，正好当时在准备职称外语考试，于是开始用逆向法学习英语，从《新概念英语〉第二册41课开始。那个春节我一改睡懒觉的习惯，每天早上6点半起床看逆向法讲座，看完就开始用逆向法学英语。</p><p>不久我就不仅仅局限于听写，还引入了翻译学习法。这也是因为当时底子太差，职称英语的阅读非常吃力。我问英语专业的朋友覃涛：“为什么一句话一个生词都没有，我却看不懂？”“那因为你不懂句子结构。解决的办法就是把它翻译出来。我总布置学生翻译课文”。我听从覃涛的建议开始翻译所学的新概念2。</p><p>看过《新概念英语》的朋友都知道，第二册最后一课的难度还不如高三英语。而我当时基础实在太差，第一次做职称外语模拟题，阅读理解只对20%，(20%!—-就是一只猴子用脚趾头做,也会比我对的多!!)概括大意更不知何从入手！更糟的是，在2001年4月14日，15日17日我还有三场演出, 又要排练又要学英语，好在我已经学会 “见缝插针”地学习，于是在嘈杂的舞台旁的灯光室里学习：到我的节目时就上场排练，下场就回灯光室，用零碎的时间做题, 背课文, 大块的时间用来听写。 2001年4月15日，职称英语考了99分。职称考试成功让我信心大增，于是继续听写翻译新概念，并报了6月份的四级考试，想检测一下自己。考前只做过一本《四级题题通》，新概念3学到的第30课。那时还是觉得自己英语很烂，考完很久都不敢去查看结果，到9月份收到四级证才知道自己过关。</p><p>2001年9月——11月, 参加全市英语演讲比赛，获三等奖。对我而言，名次并不太重要，重要的是通过参赛获得锻炼与提高：</p><p>一是写作：我的英文演讲稿是朋友海娇帮写的（她怕我写的不地道），但比赛时有位选手请我帮改稿。两份演讲稿我先后请教多人，每次修改我都会请教海娇，她逐一告诉我为什么这样写好，那样用词不当。如此修改了一个月，我的写作大进。</p><p>二是发音：我先后请十几位英语老师给我听，他们逐一指出我发音的毛病，我每天对着镜子录音练习，竟练到咽喉肿痛，不过如此苦练还是值得的，赛后我的发音已经有很大改善。</p><p>三是口语：为了准备即兴演讲，我准备了几十个话题，抄在一张纸上随身携带。无论何时何地，只要有机会就掏出来开讲，掐秒表计时，一遍不好练二遍，直到在规定时间内流利说清为止。可能的话录音听看自己哪个地方还可改进。如此口语大进，并发现这是练口语的好方法。</p><p>比赛时，很多别人听不懂的我竟可以听懂了，这才发现自己的听力已经有进步。</p><p>赛后，恰逢单位英语考试，需要突击背下几十篇商业信函. 为了争取时间, 我先看一遍英文, 然后开始照着中文开始按记忆译回去, 记不清的句子就看一下原句. 效果非常好:一分钟内能背下一封六七十字的商业信函。</p><p>此后我就把它用于新概念学习, 于是我学习新概念的模式变为听写――翻译――回译。</p><p>为了检测自己，我报了2002年1月的六级考试。记得考四级前老爸问我：“你为什么考四级？”</p><p>“检测一下自己，而且我想，如果六月份四级能过了，明年1月我就可以报考六级了。”</p><p>老爸大笑:“小绛，你考过四级后，三年后你能考过六级就算你厉害了。不要做梦半年后能过六级！”</p><p>老爸笑我不是没有原因:我从小到大都又懒又没有毅力，做什么都是三分钟热度，没有一件事能坚持得长久。他想我学英语也不过心血来潮罢。</p><p>我对六级的难度没有概念―――反正只为检测，又没什么其他目的。因此继续听写――翻译――回译新概念3，考前一个月,一天2篇阅读理解,一篇改错.考前15天,一天一套往年真题.听写的威力发挥出来了, 往年真题听力部分最高19分.</p><p>2002.1.12, 过了六级.很多朋友都很惊奇, 因为新概念3我才学了56课.又没有专门背单词. 词汇量不会超过新概念3的范畴. 而且我很少泛读和泛听.除了准备英语演讲比赛时看了几套全国英语演讲比赛VCD与李阳的《国际演讲家》, 我几乎没听过或读过其它材料.</p><p>回顾这一年，我前后判若两人:以前我又懒又贪玩又没毅力，视努力为愚蠢，视懒惰为聪明。学英语彻底地改变了我。因此我非常感激钟道隆老师，他是我的再造恩师。虽然我后来的学习方法已经不仅仅局限于逆向法的“听、写、说、背、想”了，但他的学习理念已经深入我心:“逆浮躁急躁，逆速成，逆凭空强化，强调扎扎实实打基本功”。想起钟道隆教授说:“知道用功，才是真正的聪明。”不由慨叹我这么多年虚度光阴。我希望能做到钟师说的 “成材成人”，于是决定考研。</p><p>四. 考研风雨后，又是新起点</p><p>我专科学的是分析化学，毕业了在一家企业做化验。自己很不喜欢这个专业。想起以前高考时，只求考上大学；大学毕业时，只求找到工作；工作多年后，才发现，从事自己喜爱的工作，才是幸福的。于是此次考研，决定把兴趣放在首位。经过再三考虑，我选择了法律硕士。</p><p>考研的艰辛超乎我的想象:首先我没学过法律，而法律硕士要考5门专业课（法理、宪法、民法、刑法、法制史），每一门对我都是一座大山；其次是英语政治专业课都要复习，学习任务很重。最折磨人的就是由始至终伴随的挫败感，不像原来学英语充满了成就感。</p><p>我一共考了两次。第一年学习不得法，走了很多弯路:5门法律专业课到7月底才看完第一遍，而且基本上没看懂；第二遍开始听辅导班的录音，稍微好了些；直到10月，朋友给我从北京寄来参考书（那时才出新大纲），做了配套练习才稍微上道。同时开始复习政治，这才发现政治比我想象的难多了:马哲、政经、毛概、邓论都没学过（读专科时只学过中国革命史），这些抽象的东东我一看就晕。而且考研英语也比六级难多了―――满目长难句，处处是出题陷阱。</p><p>对我而言，考研英语相对于其他科目也许是最容易的。因为我从未间断过学英语，考完六级后我继续听写――翻译――回译新概念。学完新概念4后，又用阅读口译的方法精读完了赖世雄选编的《常春藤名家散文》。考六级前，我基本上只学新概念。（当时觉得基础太差似乎什么也听不了读不了）。六级过后，我开始大量买有声读物，已经达到看到有声读物就买的地步，市面上所售有声读物我基本上都买齐了。当时觉得似乎听比看省心，一本有声书我可能好久读不完，而一本书的两盘配套磁带一天可以听好几遍。后来看了台湾翻译家成寒写的《躺着学英语》，原来成寒也是这样用耳朵读书的，就更坚定了我的信心。学法律我也借鉴了这个方法:多听录音。为了听法律硕士辅导班的课还专门买了mp3，反复听帮助记忆。</p><pre><code>    第一年尽管很努力，但始终还是学习不太得法，战线拉得太长:5门专业课，我看完一门才看第二门…..看到第5门时第1门又快忘记了……如此2003年第一次考研，317分，虽然上了很多学校的线，如清华（313），中山大学（310），厦门大学（310），武汉大学（305），山东大学（310），四川大学（310），兰州大学（310），但我离我报考的中国人民大学还是差13分（330）。查到分数后，我没有花时间沮丧，而是马上投入第二轮复习。“行动是对付忧虑最好的良药”。</code></pre><p>我总结了第一年的教训:第一战线拉得太长容易遗忘；第二平时动手写的还是不够，法律是非常严谨的学科，答题要求“法言法语”，除多动手别无他法。</p><p>在参考书的选择上，借鉴我英语学习的经验，“要想通过某一难度的考试，平时训练就要选用难度更高的材料。”因此2003年复习，我选择了一些司法考试参考书，听司法考试录音，做司法考试真题。有疑问地方我都用铅笔标记出来，有机会就请教别人。记得有位法院的朋友来看我，我向她请教。抱出来的书堆在茶几上，有两尺多高。这才发现原来自己已经看了那么多法律书了。</p><p>在时间安排上，7月以前看刑法民法和英语，7月以后就5门专业课，政治，英语一起上。这5门专业课我每天都看，一开始是每门一章，如此一个月过一遍；逐渐加大到一天两三章，20天可复习一遍；临考前，周期已经缩短到一两天。如此快速多遍，效果非常好。</p><p>2004年1月考研，369分。</p><p>“不经一番寒彻骨，争得梅花扑鼻香”。考研这两年，恐怕是我有生以来最勤奋的:学习记录上平均每天学习5－6个小时，最多的一天11个小时；墨水用干了两瓶，草稿纸用掉三尺；二尺见方的小书柜，法律书一柜子，英语书带一柜子。</p><p>如今我已收到对外经济贸易大学公费录取通知书。我的良师益友，电子科技大学的邓兴成老师嘱咐我:“不要以为考上研究生，就进了保险箱。还要继续努力。”</p><p>想起2004年考研英语作文题“终点又是新起点”，是的，这不过是我的一个新起点，离“成材成人”还远着呢。</p><p>五.  你也一定行 </p><p>以前去英语角都是我听不懂问别人，渐渐地变成别人听不懂问我了。</p><p>以前跟Anderson通信我错误百出，一年后他请我给他改英文信。</p><p>以前演讲赛是朋友海娇为我写稿，2004年中央电视台希望之星风采大赛柳州分赛，我替一个初中组的小朋友写稿并训练她演讲，这位小朋友后来获得初中组第二名。</p><p>我不是天生就毅力超人，是学英语锻炼出来的毅力；也不是智力超常（否则就不会连考两年才能考上），从专科生到法硕状元，不过是因为我懂得要努力并为之付出而已。</p><p>当然光是努力也是不够的，还要在苦学的基础上巧学。方法若是不得当，就可能会走弯路。我不是天生就讲究方法的，是学英语培养出来勤于总结的习惯，这要感谢恩师钟道隆。后来学法律我借鉴了不少英语学习方法，如“要想通过某一难度的考试，平时训练就要选用难度更高的材料。”，在最后背书时，也借鉴了背单词的一些方法…..可见万法皆有相通之处。如今把自己学英语的一些心得体会写出来，希望能让大家少走一些弯路。</p><p>前几天朋友柳霞到我家学英语，我打开她表姐的英文习作，对她说:“以前都是你表姐教我英文，现在她让我给她修改英文写作。我希望有一天，你也能给我修改英文，我相信你一定行。”<br>是的，亲爱的读者，只要努力并讲究方法，我相信你也一定行。</p><p>开篇:法无定法 </p><p>谈到学习英语的方法，总会有人问，哪一种方法学习最有效？哪一种方法可以突破一切？有哪一种方法是万试万灵的？ </p><p>答案是：没有最好，只有最合适自己的。 </p><p>最好的例子就是各种学习方法的创始人，他们所倡导的方法各不相同，方法虽异，但却是殊途同归，最终他们都成功了。可见并无定法。 </p><p>以听说读写为例，有的人主张: “不要四面出击,因为大部分人都没有太多时间,不可能听说读写译齐头并进,而要单线突破,以点带线,以线带面” 。</p><p>听说读写齐头并进，还是以点带面各个突破呢？ </p><p>以baobab看，不可一概而论，视各人情况而定:能够齐头并进很好，能够以点带面最终各个击破也很好——目的都是一样嘛，只要能到达彼岸，用什么筏子都是可以的。 </p><p>谈到单线突破，从哪里突破起呢？这又回到听说读写的顺序上:很多人主张就按听说读写这个顺序，台湾著名翻译家成寒主张……baobab就更乱了:先从口语开始，然后写作，而后听写（听力），又转自听写—翻译-回译，听说读写齐头并进…… </p><p>听说读写有到底无顺序呢？ </p><p>法无定法，其实从哪一点突破都是可以的，并无定式。比如成寒，从“听”突破；钟道隆是先有扎实的阅读基础，为克服哑巴英语才听写，从听说突破；李阳从“说”突破，（认真地说李阳本人是从“朗读”与“背诵”突破）；还有很多人是从阅读突破的。。。。。尽管突破口不同，修习的方法不同，但他们最终都成功了，可见并无定法。英语学习殿堂开有许多个门，这些方法与突破点就像那些不同的门，站在门外的英语学学习者，可按自己根基/兴趣/目的任选一门:喜欢阅读的，不妨从阅读突破；象baobab这样看到豆芽菜英文就头皮发麻的，不妨用耳朵看书。事实上，无论你选哪一个，玫瑰花总是一样地香，若要修学，凡是走上了路，进到门内都是一样的。 </p><p>法无定法，一切法不过是帮助我们达到彼岸的方便法门而已。万法并无高下，只要能够帮助自己达到彼岸，就是好方法。条条大路通罗马，不必有门派之见，也不必把某方法当作金科玉律拘泥不化，博采众家之长，只要对自己有效，通通拿来化为我用，在实践中不断调整成为适合自己的方法，并持之以恒，必将学有所成。 </p><p>最后引用朋友冷梦的话结束本节:“一个方法，既使对别人百灵百验，也必须自己实行，才会有收获。退一万步说，既使当初择法不当，只要蓦直学去，自己也会不断调整，进而得大利益”难度递减法则。</p><p>我们自己的潜力常常超乎自己的估计。往往看着高不可攀的事试过才会知道自己原来也能做到。如何知道自己能够承受多大的难度呢？试试“难度递减法则”吧。这个方法可以最大限度地发挥自己的潜力。 </p><p>所谓难度递减法则，即在选择学习方法时，先从难度最高的学习方法入手，不行再降低难度试试，如此逐步找到自己所能承受的最大难度。其原理与力量锻炼相仿，方法难度与学习效果的关系和负荷与力量的关系类似：力量训练中，要用所能承受的最大负荷或接近最大负荷来进行训练。因为采用大负荷能迫使肌肉进行最大收缩，能刺激人体产生一系列的生理适应性变化，从而导致肌肉力量的增加。英语学习方法的难度就相当于负荷，负荷越大，刺激越深，则提高越快。</p><p>具体到选择英语的学习方法时，按难度递减法则找到自己所能承受的最大负荷，并且每隔一段时间试着再增加方法或材料的难度，如此再找到自己能承受的最大负荷，这样在英语学习过程中逐步增加难度，水平也跟着逐步提高。 </p><p>以听写为例:就是否看过文本而言，听写未看过文本的材料难度远高于听写已经看过文本的材料，二者的效果也是不可同日而语的；就听写模式而言，全文复读式的听写又难于单句复读式听写；就听力材料而言，在听写看得懂的材料范围内，听写语速快的提高得也快，而听写能听懂的材料则进步不明显。具体到单次的听写也适用难度递减法则:即第一遍听写时选择自己所能承受的最大难度的听写方法,然后逐级降低难度。比如说, baobab听写第一遍时尽量听完复合句才暂停, 第二遍才一个从句暂停一次，特别难的地方最后单独反复听。 </p><p>不光是听写，推而广之到各个学习环节都是适用的。因此“难度递减法则”将贯穿本书，即每个环节的学习方法，baobab都会按难易顺序排列，大家可以逐一尝试找到自己能承受的最大难度。 </p><p>不过凡事不可一概而论。听上去再有道理的理论, 如果无法实施或难以坚持, 那也是白费。比如对听力基础差的初学者来说, 直接全文复读听写未看过文本的材料，可能会太难, 简直无法下手, 极大地挫伤学习积极性。 因此, 听力基础差的初学者还是以培养兴趣为主, 循序渐进，逐步加大难度, 再转用难度递减法则。</p><p>方法篇 </p><p>以下要讨论的，都是baobab学英语时曾采用的方法。这些方法在实践中逐步摸索总结形成baobab自学的一些模式。Baobab自学精读教材的模式可概括为“听写—翻译—回译”。 其中，听写为提高听力，暴露听力语法拼写等薄弱环节，打牢基本功；翻译学习法进一步暴露弱点，加强语法，提高阅读基本功；回译将课本中尚未掌握之处进一步暴露出来，克服中式英语，提高口语写作。以上三项均着眼于基本功，培养学习能力，相辅相成。 </p><p>读者可灵活选择:想通过自学精读教材听说读写全面提高的，不妨依样画葫芦；想提高听力的，可选择听写；想过难句关打牢阅读基本功的，可选翻译学习法；如想提高口语，可参看《口语攻略》与英汉对译；想提高写作能力，可参看回译。以上3种既可单独选用，也可自由组合，视个人根基、目标、教材等而调整。</p><p>第四章  听写:提高听力，打牢基础的利器 </p><p>所谓听写，即将所听到的录音写下来。本环节步骤为:<br>1、用复读机/mp3复读听力材料，先将全文不间断地反复听几遍，看看能听懂多少。<br>2.、一句暂停一次，写下所听到的内容，听不清的查辞典，如此反复到听不出新内容为止。<br>3 、核对文本，按错误分类做听写记录。 </p><p>一、听写训练应具备的基础 </p><p>听写是需要具备一定的英语基础的，包括以下几项: </p><p>1、对于英语音标能够正确的读出，对英语的发音规则较为熟悉，熟练掌握常见字母及字母组合的发音。这些基础对于以后听写中的听音查字至关重要。如果你的发音不过关，可以找一段VOA慢速英语，将每个单词的音标标于该单词旁，然后跟着播音员的朗读仔细体会每个单词和音标的发音。跟读直至自己的发音正确为止。在此基础上参考有关资料，掌握英语发音的规则。</p><p>2、要具备一定的词汇量和对英语有一定的感性认识。很难想象一个单词都不认识的人能够开始进行听写训练。因此，在学习一段时间英语，对英语有一定的感性认识，掌握几百个单词之后就可以进行听写了。开始可以先听写学习过的课文，之后再慢慢过渡到听写未学过的新课文。</p><p>一、 听写材料的选取: </p><p>网友zero123  听写一年半为何听力还是0分？2003-5-16 8:37:00 我的英语听力简直就是一穷二白。2000年大专毕业后，我坚持用听写法学习英语，一年半下来，听写完新概念2，VOA特别英语等大量有声材料，听写记录达三本，可感觉收效甚微，连四级听力部分的对话都听不懂多少，2003年参加研究生入学考试，英语总分39，听力得分为0。因此，我特别沮丧，时间花了不少，可又不知道自己究竟在哪个环节出了问题。 </p><p>网友  maggiewzx 2004-5-27 22:38:02<br>我词汇量大约7000左右，上大学考等级考试，除了听力都可以排在中等以上，但是听力成绩非常低。毕业三，四年了，听了一年的英语新闻，听的感觉和去年一样。去年参加过一个考试，今年又考了一次，结果成绩完全一样。我试过跟读，感觉很费劲，是不是自己在英语听力方面确实有局限？我听英语听完就是总结不出大概什么意思。如果听不出来的东西重复几遍，还不行。 我现在的英语学习状况是每天都泛听英语广播，有时听写《新概念3》听到40课左右。读读英语读物，和看看英文电影。 </p><p>Maggiewzx的问题很有代表性,zero123的问题发人深省，花那么多时间听英语，为什么听力没有提高呢？<br>在baobab看来，Maggiewzx的问题在于把时间都花在泛听不适合自己的听力材料上。再看zero123,他一直都在精听，怎么也没有提高呢？他们俩的问题有什么共通之处吗？是的，就在于听力材料选择不当:一个太难，另一个又太容易。 </p><p>听力材料的难度一定要适合自己。太难不行:如Maggiewzx每天都泛听这些恐怕她连文本都看不懂的英文广播；太简单也不成，这就要结合自己的学习目的了:想光靠听写慢速英语来通过考研英语，这是不现实的。所谓取法乎上，得乎其中；取发乎中，得乎其下。也就是说，想一次听懂，平时就必须听写难度更大的材料。当然这也需要循序渐进。具体说来，听力材料的选取应该注意以下几点: </p><p>1、听写文本的难度要与学习者自身的英语基础相适应。<br>所谓听写文本的难度一般是指听写材料中的生词率和句式的难度。一篇材料中如果有过多的生词，句式过于复杂，对于听力水平不高的学习者往往会觉得听写训练过于困难，高不可攀，导致很多人不能坚持到底。因此在刚开始听写时，学习者应对所选用的听力材料进行评估，如果有文本，可以先大概看一下，看自己是否能够基本看懂，生词量是否过大，一般生词量应控制在3％～5％以内，使学习者能够顺利的开始听写，逐渐适应听写这种学习方式。随着水平的提高，文章的难度可以进一步加大。另一方面，听力材料也不应过于简单，过于简单的材料不能使学习者的水平快速得以提高。第三章中所介绍的教材，其配套录音都是很好的听写材料。 </p><p>2、听写材料的语速应随听力水平的提高而加快。<br>初学者的听力水平一般较弱，因此在选用听力材料时，其语速应与学习者的水平相适应。起步阶段可选用一些语速较慢的材料，如VOA慢速英语，《常春藤名家散文背诵选》及一些初级教材配套录音基本都适合此一阶段选用。但是，随着听力水平的提高，听力材料的语速不宜长久停留在此一阶段，应该逐渐改用语速较快的录音，最终应能听懂每分钟160～180词的材料。只有这样才能逐渐适应英美人的正常语速。上例zero123的问题，除了选材太过简单外，未能及时增加听力材料难度，而长期使用同一语速材料语速可谓一大败笔。 </p><p>3、关于VOA慢速英语听力材料的使用。<br>Special English具有用词浅显、句式简短、语速较慢等特点。因此它是听写入门的极佳材料。但是也正是由于以上特点，使得慢速英语不适合长期做为听写的材料。 </p><p>首先, 对于英语基础不太好的人来说, 因Special English 是为适应非英语国家收听英语广播而特意设计的语言，而非英美人日常使用的自然语言，因此初学英语的人不易分辨出其中差异。 我朋友Anmy就说Special 听久了，她有段时间写东西都象baby talk。因此不宜将special English 取代精读教材， 而应在用Special English 入门后，过渡到学习精读教材。 </p><p>其次，对于英语基础好的人来说，听写Special English的原因可能有两个:一是想提高听力， 二是想为听Standard English打基础。当用Special English听写入门后，已经适应90词/分的语速时, 继续只听写Special English, 会扩大专有名词词汇量, 有利于听懂Standard English，但对进一步提高听力水平效果不佳。听力水平的提高有赖于听写材料的语速及难度的提高，而Special English语速较慢用词浅显、句式简短等特点不利于学习者听力水平的有效提高。因此想要提高听力，用Special English入门后，应适时转听Standard English或其他常速听力材料。</p><p>一、听写的益处与实施: </p><p>听写的方式依据个人基础不同又可分为多种方式:按事先是否看过文本，听写可分为逆向听写与正向听写；按复读方式可分为全文复读式听写与单句复读式听写。关于听写的益处，将在逆向听写中介绍；而听写的具体实施，则在全文复读式听写与单句复读式听写中讨论。</p><p>1、正向听写与逆向听写: </p><p>1）逆向听写<br>逆向听写在钟道隆老师的所写的《逆向法巧学英语》中有详细的介绍，相信看过这本书的人都会留有深刻的印象。简单的说，逆向听写就是在事先不看文本的前提下，根据录音，自己将文本听写出来。很明显，这样做要比正向听写难的多。然而这也是为什么逆向听写的收获大、进步快的原因。大体上说，逆向听写有以下一些优点: </p><p>a）极大的提高听力水平:<br>有的人习惯边听边看文本，那样会造成自以为”听懂“的假相；有的人则总是泛听，含含糊糊地听个大概，不确切自己什么地方没听清。而逆向听写则可以克服这些问题。首先，听不懂的写不出来，不会自欺欺人；其次，之所以要写下来，就是要知道还有哪些没有听清，而那多半是自己的弱点，也是听力的难点所在，如省音略读弱读，反复听写，慢慢地就会觉得那些原来觉得被省掉的音实际上还在，只不过这些音被发的很轻且短促，一带而过，而并非真的被完全省掉了。通过听写逐步克服这些问题，听力就会得到提高。 </p><p>b）容易暴露自己学习上的弱点:<br>通过分析自己的听写记录可以很容易的知道自己哪些地方还没学透，对症下药方可药到病除。这将在听写记录中再做具体分析。 </p><p>c）所学知识记忆深刻:<br>逆向听写是在不看文本的情况下，独立将课文听写出来。在此过程中，对于没有学习过得单词、句式、语法等通过不断的猜测、与自己已前所学知识的对比、翻查工具书等，一旦问题得以解决，往往会给自己留下非常深刻的影响，这种记忆深刻的效果远非其他方法所能比拟。 </p><p>d）有效改善发音水平:<br>通过听写，可以有效的发现并纠正自己的发音错误，逐渐熟悉英语的语音语调，通过模仿跟读等可以较快的改善自己的发音状况。 </p><p>e）提高英语综合水平:<br>英语学习往往是相通的，即通过听写训练，不但词汇量得以增加，听力水平提高了，阅读口语的水平往往也会跟着上升。这是由于在听写中各种单词句式都十分熟悉了，语感也会慢慢得到加强，从而带动阅读口语水平的提高。<br>总之，逆向听写有其他方法不可比拟的效果，只要能够坚持使用该方法进行学习，一般都会取得满意的效果。Baobab能在基础差的情况下通过自学一年过四六级并顺利通过研究生的英语考试，这个方法在其中起了很大的作用。 </p><p>2）正向听写<br>逆向听写虽然效果很好，但对于英语基础较差和初学英语者，如果一上来就要求他们听写完全没有看过的材料，可能会由于难度太大而丧失信心，难以长久坚持下来。因此对于他们来说。可以采用正向听写入门，即先精读课文，然后再进行听写，等过一段时间听力适应后再逐步转入逆向听写。Baobab曾多次辅导别人，从翻译－译背－听写入门，再逐步过渡到听写－翻译－译背。因为翻译－译背环节基本上已经把课文背下来了，因此再听写没有太大的困难，都可以顺利过渡到逆向听写。但毕竟事先看过文本，如果课文已经背下来了，那么凭自己听出来的比重就不大，这也是为什么正向听写不如逆向听写效果好的一个原因。不过正向听写做为一个过渡方法，引导学习者逐渐适应听写以便为逆向听写打好基础还是有很积极的作用的。同时，正向听写也是检验学习效果的很好手段，通过检查听写错误，可以很容易的发现自己哪些地方没学好，哪些方面还没有掌握。 </p><p>2、全文复读与单句复读模式下的听写:<br>听写又分为两种模式，全文复读模式下的听写与单句复读模式下的听写 </p><p>a）全文复读模式下的听写:<br>所谓全文复读模式下的听写是指进行全文复读，一句一暂停，把听到的内容尽量写出来。（行距大些以备更正）听着模糊的单词先按读音写个大概，听不清的地方先空着，如此一句句听写完全文，这就算第一遍。 第一遍主要是将听到的内容尽可能多地记下，单词可以用缩略形式，不必在拼写正确上纠缠，以免影响记忆。</p><p>很多人都有这样的感觉:明明听清了，听写时却写了前面忘记后面。这是很正常的，因为写要占用一定时间，而且考虑单词的拼写也会分心，影响记忆。因此第一遍听写的要诀是“快”。打字快的用电脑写会很方便。 </p><p>接下来几遍听写把注意力放在没听清的地方，听清读音但没学过的单词要尽量通过查词典确认，听懂的单词拼写记不清也查辞典确认。此时开始注意拼写的完整与正确，并注意自己的听写有无语法错误。 </p><p>小技巧:听写两三遍后，可在每句听写前先看自己的听写文本，可以在心里读一下或读出声，然后放录音听写，如此领先录音比步步落后于录音要轻松。 </p><p>听力材料配有生词表的，听写几遍后，对于那些实在无法听出来的单词可以对照生词表把单词填进听写文本中。继续放音听写，直至听不出新内容。此时可停止放音，通读自己听写的文本，看看有没有文法错误，是否可以根据上下文和句法来推敲尚未听出的部分，然后对照听写文本全文不间断地放音一遍，最后核对一遍。OK! 可以对照文本，开始做听写记录啦！ </p><p>那么一般情况下应该应该听写几遍呢？这个因人而异，也跟听写材料的难度有关。Baobab一般听写5遍左右，第一遍快速记下，二三遍尽量查词典补充修正，然后停下对照生词表填生词，第四五遍对照生词表听写，然后停下通读全文，最后看着听写文本不暂停地听一遍录音，就开始核对文本啦！ </p><p>b)单句复读模式下的听写:<br>所谓单句复读模式下的听写是指复读机每次只复读一句，反复听写该句至再听不出新内容，才开始听写下一句，如此一句句反复听写完全文。 </p><p>两种听写模式的比较，全文复读式听写缺点是难度大，不易入门并坚持，但也因其要求高所以学得扎实，提高快。单句复读听写优点是比较容易，初学者如果觉得全文复读听写太难，可以这样入门。其缺点是会造成不良听音习惯，（见“不良听写习惯”）。所以用单句听写入门后，要适时转入全文复读听写。</p><p>一、关于听音查词<br>网友sious: “在听写不出的单词方面，要求去查字典而不去看原文，为什么呢。当然，我承认在查字典的过程中回有许多收获的，而且一定比看原文强，但时间呢？ </p><p>sious的问得好，学习要衡量投入产出比。 </p><p>先说说为什么要听音查词。首先查词典找到的词印象非常深刻，这本身就是个自己寻找答案的过程，其效果是直接看答案无法比拟的。其次它能加强辨音能力, 这也是影响听力的重要因素之一。 想要通过听到的读音查到单词, 首先你得把音听准。如果没听对, 对照原文后看看自己是哪个音没听准。 如此反复, 语音基础也逐步得到加强。 查词典的时间会逐渐减少。现在我常常能通过读音正确拼写出单词(查词典前), 就归功于长期这样训练的结果。 </p><p>但是否要花很多的功夫在查辞典上呢？未必。有段时间baobab为了提倡大家听音查辞典，自己带头做表率。原来听写新概念第4册每课只需一个小时，这样“一直查到查不出为止”就要三四个小时。Baobab觉得还是不太划算的，不如用这些时间多听写几课。尽管从单课上说质量稍有下降，但以量补质，毕竟英语学习就是个“质”与“量”的问题。 </p><p>所以大家可以看出，一方面听音查词点有利提高听力，另一方面它比较费时，所以就需要在”质“与”量“之间求得平衡。一味追求”质“或一味追求”量“都是不可取的。 </p><p>下面说说听音查词词典的选择。现在有很多电子词典支持通配府*查询和发音查询，做为听音查字的工具非常方便。市面上还可购到专门的听音查字的字典如《听音查字词典》，这类词典一般是按国际音标排序的，比一般词典听音查字要简单。另外也可以使用相应教程的词汇表，如听写大学英语，就用《大学英语词汇表》，听写新概念则可以使用《新概念词汇手册》，这样单词的查找范围缩小了，准确率也会提高。</p><p>五.一定要听写无文本的材料吗？听写完要不要核对文本呢？ </p><p>关于听写，流行的看法是听写无文本的材料。如baobab的朋友prince,向来就主张听写无文本的材料，因为通过各种渠道自己寻找答案是一种乐趣；还有如普特英语的很多朋友，常常各自听写当日常速新闻，然后大家一起讨论。另外就是钟道隆老师，无论从当初Special English, 还是后来的Standard English,都一直听写无文本的材料，并提出“对于有一定英语水平的人来说，提高听力最有效的方法就是听写没有参考文本的录音带，在逐句逐词抠的基础上听写出全部内容“。“使用有参考文本的录音带，原则上也要按照这个要求去做，不到万不得已不看文字参考材料”“最好把文字记录用钉书机钉死，就当它没有，只有当把整个内容都听写出来以后才去对照看看” </p><p>我们先来看看钟道隆老师为什么要这样提倡，一是因为逆向听写提高快，二是因为很多人一听写不出来就想看文本，导致前功尽弃。但是否一定要听写无文本的材料呢？Baobab以为，视个人根基与毅力而定。让我们看看以上这些人，他们要么基础很好，如prince 和普特的朋友们，要么毅力惊人，或二者兼备。钟道隆老师每天听写A4纸20页，3年内写了一柜子听写记录，有的词是一年后才找到答案的，试问有多少人能做到呢？很多基础不好意志薄弱的人就常常因为教条实行，结果觉得难度太大半途而废。再好的学习方法，如果不能坚持也是白费，因此不可拘泥不化因噎废食，就连钟道隆老师也说听写无文本的材料是“对于有一定英语水平的人”。所以，如果基础好或意志坚强，则不妨听写无文本的材料，如果基础差毅力弱，则还是听写有文本的材料容易坚持利于学习。 </p><p>那么，如果听写有文本的材料，什么时候核对文本合适呢？常常看到有人说”坚持听完一盘磁带才对照原文”，</p><p>并且不对照原文，只是模仿录音朗读自己的听写记录。Baobab不知道朗读支离破碎的听写文本好处何在，这样</p><p>听写的弊端倒看到几点:<br>1、无法及时发现错误, 容易一错再错。<br>2、对照原文后错误累积太多, 积重难返。<br>3、间隔太久,记忆模糊。<br>4、容易烦躁。不是每个人都有钟道隆那种非人的毅力的。 </p><p>Baobab以为，基础差的还是要及时核对文本。听写最大的益处是暴露弱点，对照文本，能及时发现问题，通过模仿录音攻克听力弱点。背诵文本，才能学会正确的表达方式，远胜于背诵自己不知错对的听写记录。</p><p>六、听写威力揭秘 —- 听写记录 </p><p>a）听写记录的作用:<br>网友sious: 即使听写对了，对于语法方面又有什么帮助呢，考试不能都评语感吧。 </p><p>实际上听写对于语法方面的帮助, 不是在你听写对了体现出来, 而是在你听写错了才体现出来。 比如第三人称单数谓语未加s，不少人写英语时都会犯这个错误；又如我在听写记录中took place错为 to place, 再如我在听写 as soon as knowledge is acquired 这句话时漏掉了is, 这个从句就没有谓语了。这些错误,平常读英语时你是不会发现自己会在这些地方犯错误的，只有通过听写才能暴露出来。类似的错误即使听写时没听出来,也应该能够从语法知识上判断出来。把自己的听写记录与原文进行核对,找出有差错的地方，总结一下自己为什么会在这些地方犯错误, 是不小心,还是语法基础不扎实,不清楚的再翻翻语法书。 由此印象深刻, 下次就会在这些地方比较注意。语法知识如此逐步变扎实。 这就是为什么我刚开始听写时, 150词的《新概念2》41课, 我错了25%, 而且多为语法与拼写错误。 现在《新概念4》中400词的课文, 我一般差错率小于10%。 而语法与拼写错误已经很少了。” </p><p>平常大家在听或读英语时,是很难察觉到自己会在哪些方面发生错误的。而在说和写时, 这个问题就比较严重。这也就是应用能力的问题。 而考试的弊端也在此, 这就是为什么英语考试得高分的人不一定能流利使用英语的原因之一—尽管他们在试卷的语法部分能得高分。<br>在听写过程中,不断回忆复习巩固基本的语法知识，如此经常运用反复熟练, 到需要”说”和”写”时, 这些平日的积累就会派上用场。听写纪录不仅能暴露自己的缺点，它也记录所取得的进步。如我刚开始听写150词的课文错误率为25%,到后来听写400词左右的课文错误率低于10％，语法与拼写错误已经很少了，主要是没听清的生词等。能不断看到自己的进步，学习才会越学越有劲。成就感是最好的学习动力，这也是baobab能坚持下来的原因 。 </p><p>b）如何做听写记录:<br>核对原文时，大家可以先用色笔在自己的听写文本上修正，然后再分类记录听写错误。有把握的也可省略色笔修正步骤，直接边核对边做听写记录。</p><p>听写纪录一般包括以下几项:<br> （1）起止时间。<br> （2） 错误分类:<br>1,听力错误:即听错和没听清的部分如ut-our。 漏掉of这样的小词。<br>2语法错误:如主谓不一致，第三人称单数(he)don’t-(he)does。<br>3拼写错误: 听懂的词拼错了 如grammar-grammer。<br>4生词:未学过的词<br> （3）分别统计各项错误, 并计算错误率。<br> 大家注意，“错误率“是仅就该篇听写记录而言的。听力难度包括语速、文章难度（句式、词汇量、背景知识）、还有读音清晰与否（省音连读弱读），录音清晰度（是否有干扰噪音）、口音等等。即使同一盘磁带, 不同的播音员朗读速度各不相同, 甚至同一个人在朗读不同的文章语速都很有可能不同。 </p><p>值得注意的是，读音清晰与否对听力理解影响也很大。以新概念各录音版本为例，外研社是语速最慢发音最清晰的，几乎无连读弱读。世界图书出版公司引进的朗文原版录音语速与上海外教语速差不多，朗文是BBC播音员朗读，发音非常漂亮，适当省音连读，上外男声省音连读弱读非常多。如果想提高听力，建议选用难度大的材料进步才快。 </p><p>以baobab为例， 新概念4的后几十课都听写世图版, 看看正确率一直都不错, 还以为自己听力突飞猛进呢, 没想到有天听写上外版大受打击, 实在听不出了换上世图版就听写出来了, 看看还都听写到五十多课了, 非常后悔前面几十课没有听写上外版的录音。所以单纯从错误率来判断听力进度是片面的。 </p><p>下面以baobab当初学习上外版新概念4错误率最高的与错误率最低的两篇听写记录为例，从以下两篇听写记录可看出,&lt;&lt;新概念4&gt;&gt;的25,26课, 篇幅,难度,生词数量差不多 , 差别只在于语速。 若我没计算语速, 就会被单纯的”听写错误率”所蒙蔽, 而沾沾自喜, 以为听力在一夜之间“突飞猛进”。</p><p>七、听力与阅读脱节该如何处理？<br>由于传统的英语教育模式重视语法及阅读能力的培养，因此许多人的听力能力与阅读能力是不成正比的。许多学习者的阅读能力要远高于其听力能力，那么在听写时就会面临着选择材料的困难。是选择相对简单，适合目前听力水平的材料来听写呢？还是选择符合自己阅读水平的材料来听写呢？ </p><p>从这几年自己的学习经验和帮助他人学习的过程中我体会到，英语材料的选择要以适合自己目前的整体英语水平为准，简单的说就是要就高不就低。这也符合前边所说的难度递减法则。这样做的好处是学习者比较容易看到自己的进步，能够产生学习的动力。如果选择难度较低的材料，虽然听力水平会得到提高，但是学习者的英语整体英语水平却很难得到提高。下边就具体介绍一下如何选择适合难度的材料以及如何处理听力与阅读脱节的问题。 </p><p>如何知道某本教材是否适合自己的水平呢？一方面我们可以参看该教材的介绍，一般都会给出该书所适合的读者群。另一方面我们也可以通过亲自动手翻译其中的课文，来检验其是否适合自己的水平。我们可以选择该教材的第一课与最后一课，在不看译文不参考其他资料的前提下，自己将其翻译成中文（关于翻译法的介绍见下一章）。然后将自己的译文与课本的译文进行对照，如果能够轻松正确的翻译出来，则该教材低于你目前的阅读水平，你可以选择难度更高的教材来学习；反之亦然，如果满目生词难句，翻译大部分是错的甚至根本翻译不出来，那则该教材高于你的阅读水平，应选择难度更低的教材；如果有部分错误，有部分不会翻译，那么这本教材就值得你认真学习。 </p><p>接下来的问题是，依照上边的方法所选取的材料虽然适合阅读水平，但对听力水平低于阅读水平的读者来说，用听写的方法来学习这些材料肯定会困难比较大，该如何克服呢？ </p><p>Baobab在帮助他人学习英语的过程中经常会碰到这样的问题。一开始我选择让他们退回到使用较低难度的材料来听写，如有的人听写新概念英语第三册有困难，于是我就让他们先听写新概念英语第二册的课文，以此来为听写新概念英语第三册做准备。但是经过一段实践发现，这样做的效果并不太好。一方面这样做比较费时，另一方面由于材料难度较低，不利于学习者整体英语水平的提高。同时也看不到自己有明显的进步，因此不容易将听写坚持下去。为克服上述缺点，我试着让他们先翻译课文，然后回译课文，在这个基础之上在进行听写。</p><p>由于先翻译回译课文，对材料已经很熟悉了，因此听写的难度大大的降低了。基本他们都能够顺利的学下来。而且坚持一段时间都可顺利地过渡到先听写课文，然后再翻译和译背。需要说明的是，这只是听写的入门方法。坚持一段时间后应逐步过渡到在事先不看文本的前提下进行听写，只有这样才能充分发挥出听写的威力。</p><p>八 听写误区总结 by Davisun</p><p>1、 听力材料选择不当:<br>尤其是听力材料的语速方面选择不当。一个习惯了慢速英语语速的学习者，很难适应正常语速的语音，这是用慢速英语听写的一大弊端。当然我并非说不能把special English做为学习材料，关键是这些材料须用对时机，对于初级学习者它是很好的入门材料，但是听力水平提高到一定程度后就应该听写语速正常的材料，虽然此时仍可将慢速英语做为泛听的材料。因此听力材料的语速应该与听力水平相适应，克服的方法就是适时转换听写材料的语速。 </p><p>2、 满足于听大意。<br>这也是许多所谓使用听写学习者的又一个误区:岂不知那些没有听懂的地方正是你的弱项，不克服他们，你的英语就无法进步。这样的听写是不可取的。听写是一种精听的方法，既然是精听，就应有别于泛听。就不能局限于听大意。许多外语院校的老师亦将听写作为一项重要的学习手段，有的老师甚至称，对于他所教的学生，只有抽几片小短文听写一下，就能确定学生对英语的掌握程度。可见听写的重要性。但仅仅为听而听是于事无补的，必须与其他的学习手段相结合，才能够使自己的整体水平得以提高。 </p><p>3、听多遍与一次听懂的误区。<br>许多人听写时，往往是听一句写一句，听不懂，再重来。作为一种听写方法，这样做并无可厚非。但长此以往容易形成一种惯性，即句子总要听几遍才能听懂，无法培养出一次听懂的习惯。在实际生活中, 无论是听广播或报告, 是不可能暂停让你搞清楚的。。 考试就更不用说了, 一旦停留在思考刚才没听清的词,句中, 就势必会影响到对下文的理解。所有有关听力技巧的书都建议”不要被听不懂的单词卡住, 应该专心往下听。”解决方法是:平常在第一次开始学习一个听力材料时，一定要先整遍材料完整的听几遍，看自己大概听懂了多少，同样语速、难度的材料自己这次比以前是否能更多的听懂了。听到能听出来的都听出来了，就可以转到听写上来了。这样即练习了听大意或一遍听懂的能力，同时由于对文章有了基本的把握，可以最大限度的减少听写难度。 </p><p>4, 只反复听一句话, 把它听懂才继续往下听.<br>一些新入门者, 喜欢每次只反复听一句话, 把它听懂才继续往下听. 对初学者来说, 这样确实是要容易一些, 但这样容易养成不良听音习惯, 即每到听不懂处, 总想要把它弄懂才能往下听. 而在实际生活中, 无论是听广播或报告, 是不可能暂停让你搞清楚的. 考试就更不用说了, 一旦停留在思考刚才没听清的词,句中, 就势必会影响到对下文的理解. 所有所有有关听力技巧的书都建议”不要被听不懂的单词卡住, 应该专心往下听.” 这与阅读理解同理, 在遇到生词不要卡住, 而应继续往下读,把它放在全文里理解. 其实听力理解也是一样, 开始没听清的词, 可能听了下文就能理解. 因此不要孤立地在单词或单句里理解单词, 而应把它放在全文里理解. 所谓”只见树木, 不见森林”就是这个道理. </p><p>当初写这个问题源于与朋友的争论, 我们为听写时应”全文复读, 然后一句一句听写, 如此反复” 还是” 每次只反复听一句话, 把它听懂才继续往下听.”争执不下. 这位朋友刚开始不肯按我的方法，就是因为那样他觉得几乎一句也听不出来。第二册从第一课听写到12课以后，就觉得速度太慢了，于是开始用我的方法，听写到25课后，正确率总在90％。就乐在其中了―――特别是查字典老半天终于找到正确的单词时，很有成就感。 因此听写入门时，先试试全文复读式听写，如果觉得太难，不妨暂时以单句复读式听写入门，但切忌死抱不放，要适时转入全文复读式听写。 </p><p>5、 过分依赖生词表, 不查或少查词典。<br>其实这曾是baobab的坏习惯, 总想着反正生词表上都有, 有何必花力气去查词典呢。这样短期内是省时省力了, 但长远看则存在弊端: 毕竟课本只是学习的工具而不是终极目标, 而实际生活中, 无论是听外语广播或看英文电影, 是不可能有生词表来对照的。 另外, 生词表上有好些都并不是生词, 太早查看生词表, 不利于提高听力, 这样听写记录所反映的错误率也是不真实的。通过查词典来找到没听出来的单词, 就是提高对语音的分辨能力。 </p><p>6、 只热衷于听写，不愿意花时间朗读、翻译或背诵，不去了解所听材料中自己不懂的语言现象 很多学习者只热衷于听写, 因为可以从攻克难听懂的录音中获得乐趣, 从每天听写的进步中获得成就感。 而朗读翻译背诵的效果则不像听写那样立竿见影。 但如果单纯听写而不朗读背诵, 恐怕尽管听力是提高了, 到头来还是哑巴英语。 </p><p>钟道隆为什么要苦学英语? 不就为了告别哑巴英语吗? </p><p>朗读与背诵的作用是潜移默化的。首先, 模仿跟读就是校正发音最好的方法, 而发音提高了, 听力自然也会提高, 因为原来没听懂的很有可能是因为自己对某些音标没把握准, 另外通过模仿对于省音弱读,连读等读音规则体会更深。其次, 朗诵是锻炼英语发音最好的方式。 英语发声的部位和方式与汉语大不相同, 不要指望哪天一觉醒来, 你会茅塞顿开。对于发音，除了勤加模仿, 别无他法。 </p><p>另外, 背诵是把所学内容吸收并慢慢转化为己所有的最佳方式。只有背得多了, 你才能脱口而出,下笔有神。而不至于待到用时方恨少。 </p><p>既然大家肯花那么大力气来听写, 本来听写完也记得差不多了, 为什么就不舍得多花那么一点点力气把它直接背下来, 而要等到日后觉得基本功不扎实, 又从头背过(到时也都忘的差不多了)浪费力气呢? 所谓”行百里而半九十”就是这个道理。 </p><p>7、只做精听（听写）不做泛听的误区。<br>这同样是听写学习者的又一大误区。要知道听写一年，你所接触的语言材料仍十分有限的，而语言中有大量的词汇、惯用法等需要你来熟悉掌握，语感的形成也需要大量的泛听与泛读，这些任务不可能靠听写来完成的。而很多用听写的人沉浸在听写中，根本没有时间来做泛听与泛读的练习，导致语言材料接触过少，一旦遇到自己不太熟悉的材料就会不知所挫。因此重视泛听泛读是配合听写学好语言必不可少部分。 </p><p>8、盲目追求进度。<br>很多学友希望能在短期内提高, 于是一味图快, 一天听写好几课, 听写完一篇对完原文后就马上开始听写下一篇, 既不学习消化刚听写过的内容, 也不做练习, 更不要谈朗诵与背诵。等到一段时间后感觉学的不够踏实了, 才又复习(差不多相当于重学, 因为很多都忘记了。) 为什么不一次学扎实呢? 打铁都要趁热嘛。 何苦白白又走弯路, 真是欲速则不达。 </p><p>9、重复听写已听写过的材料。<br>看到有网友称某某课本我已听写过N遍”。 精神可嘉，不过好像有点浪费时间。在没有看过文本的情况下听写, 才最有利听力的提高。 重复听写, 会分不清到底是真正”听”出来的, 还是在记忆提示下写出来的。重复听写, 会加深你对这篇文章的记忆, 但对听力的提高作用不大, 另外, 自己会被听写记录蒙蔽, 以为听力大有长进, 看不到自己还存在的弱点。如果想靠听写来加深课文记忆的话, 还不如多背几遍, 因为听写实在太费时, 不如把时间省下听写新课。 </p><p>10、没有经常就自己的学习总结经验教训。<br>许多人只知道埋头学习，没有在学过一段时间回头看看自己走过的路，有哪些教训，以及是否偏离了自己的目标，应该如何改正。结果在学了很长时间后发现效果不好，可这时已浪费了很多时间,悔之晚矣。所以使用某种方法学习一段时间后应该想一想，这种方法是否真的适合自己，效果如何；自己学习中还存在着哪些不足，该如何纠正。</p><p>九 听读法学英语 </p><p>听读法是我在学英语的过程中偶然得到的。记得开始学新概念第三册时，总感觉第二册的有些内容没有完全掌握，于是就又回头去看第二册的课本。看着文本好像都懂，但总觉得收获不大。于是我就采取不看课本听的方法，看哪些地方不能听懂，这些方面也是我没有能够扎实掌握的地方。但我又很快发现，听的时候时常由于注意力不集中，很多地方被露听了。为了解决这个问题，我就在不看文本的情况下，一边听一边在心中默默的跟读，于是上边的问题就这样被解决了，而且复习的效率也极大的得以提高。听读主要为全文跟读录音。不看课本的基础上开始跟读录音，一方面复习了课文内容，另一方面可以纠正发音，训练自己的语音语调。听读一段时间后，你会发现，录音中说出上句你就能回忆出下句。你的速度比录音要快。这样复习的目的基本就达到了。</p><p>既然听读对复习英语效果显著，那么能否将其用于学习新的英语知识呢？Baobab当初曾试着用听读取代听写，结果发现效果不好，因为baobab的学习材料有很多复杂长句，就是写下来也常常要到听写结束时才明白这句话的意思，模仿跟读就更加糊涂了。不过baobab发现对于以对话为主的初级教材，这倒是不错的入门方法。所以。听读法是一种快速高效的复习方法，同时也可以作为初级教材的入门学习方法，结合听写会起到更好的学习效果。 </p><p>本节小结:<br>1 听读是快速高效的复习方法<br>2  听读可以作为初级教材的入门方法，但需及时转入听写</p><p>十  听写小结:<br>1听力材料的选取:第一适合的基础，第二适时增加难度<br>2  听写入门:<br>听写模式:1）逆向听写与正向听写2 ）全文复读式听写与单句复读式听写 </p><p>听写与阅读脱节:1）调速听写新课 2）从翻译—回译—听写 </p><p>听力基础差的朋友，可以按难度递减法则:先试试全文复读逆向听写，不行用单句复读逆向听写，不行改至调速逆向听写（同样包含全文复读与单句复读俩模式），这样还不成，翻译—回译—听写一定能拿下来！ 对于小学生和初中生，或开始学如新概念1这样以单句对话的朋友，可以听读入门，适应后转入听写 </p><p>3基础差的要及时核对文本，以纠正错误<br>4 听音查词:查辞典以提高辩音能力，但要注意平衡“质”与“量”</p><p>常见问题集锦—-来函选登 </p><p>网友sious于 2002-04-01 21:47<br>baobab:我昨天和今天都按这个计划做了，听写了《新概念2》的1-6课，错的特别多，达到30%-40%，主要是生词，许多词以前也背过，但一听写就不行了。我感觉现在最大的问题是，听力（也许是音标的问题），我凭听力查字典都特别困难，有的甚至感觉无从下手。</p><p>答:<br>1, 用小词典. 用词汇手册更快.(只限于听写用)<br>2, 实在查不出, 对照课本生词表.(把正文遮住)<br>3, 既然可查词典, 那拼写无把握的也可查词典. 呵呵没说一定要查英汉辞典啊，你想不起拼写的可以查汉英辞典嘛<br>4, 音标有问题的话, 最好重学. 最多1-2周搞定. 磨刀不误砍柴工。 生词多，难度递增快，这正是新概念好处所在，新概念1只相当于初中英语，新概念2最后一课比高三英语还简单，而新概念3最后一课则比大学英语最后一册还难，新概念4比英语专业精读教材最后一册还难。就仅仅4本书，涵盖了初中到大学英语专业的难度，这样浓缩精华，学一课，你就学会几十个单词的用法。有什么比在课文中学单词更好的词汇学习方法呢？<br>我一般是听写3遍，对照生词表添上空缺，通读一遍，疑问处标出，再听写一两遍，然后不暂停全文听一遍就核对了。知道生词听不出不是听力的问题，我从来都不担心。另外，猜词也是一种应用能力，不过是否一直恋战我不以为然，因为猜词的能力不光在生词上体现，熟词(发音不清晰时）也一样能练。英语学习，花了时间当然都会有效果，不过要算算投入产出比:比如反复听几个词花一小时，按我看不如用这一小时另听写一篇划算，因为量上去了，也会提高的。听写比较费时，在重视质的同时，还要注重量 对于听写的次数。我始终没有看懂怎么样才算正确的听写方式。这里不是矛盾的吗？为什么前面要说听写4遍？对于已经能够掌握的课文部分，翻来覆去地听写有用吗？这个不是浪费时间？<br>Baobab和各位前辈能不能干脆具体说明一下你听写一篇新课文的各个细节。以便是我们这些菜鸟少走些弯路。<br>答:sorry，是我没说清楚: “网友称 “xx册课本我已听写过N遍”，按我猜测，是每课听写过后已看过文本，一课课听写完一册后重复这一过程。 ” 听写4遍“指在没有看过文本的情况下听写新课，从复读全篇课文开始，第一句，暂停，写所听到的句子:第二句，暂停，再写。。。。。这样到最后一句，算”一遍“。十分惭愧，我至今从未能只听写一遍就把课文听写下来。现在文章难度加大，甚至要听写6遍。<br>到底是应该一气呵地先用最快的速度听写出来全部课文，（能够听懂的部分）然后再逐句听写，查字典，对付难句，还是应该逐字逐句地听写？这样会不会经常被卡壳而浪费时间？不知道baobab的意见是怎样的。我曾经就是总是卡壳浪费太多的时间而一度放弃。<br>答:我不是很明白你的意思。可不可以说具体一点。我是按上述方法听写的。如果听写完全文还有几句特别难的没听出来，你可取消全文复读，单独复读这一句，反复听，写出来后再找到下一个难句，如法炮制。但应在“全文听写“后再作”难句听写“。这就是“难度递减”。<br>猪儿乖乖2002-8-31 7:45:00<br>请问,我现在用复读机听写新概念2,句与句之间有跟读的空隙(我不跟读,我用来写),这样做对吗?还是应该按磁带的正常速度听写,但是那样的话,一句没写完下句又跟着来了,简直是丢三落四.是听一句写完一句再接着听写下一句,还是按磁带速度通篇写完了,再放几次添补上次因为太快而没有来的急听写出来的呢? </p><p>答:如果你可以按磁带的正常速度正确听写下来—-恭喜你!你可以甩掉听写这根拐杖了.<br>可能因为各复读机的功能不尽相同.我是全文复读,然后一句暂停一次,写下这句再听第二句,再暂停,再写…到最后一句.这样算一遍.第二遍开始主要补那些没听清的词.大概听写三遍,先不听录音,对照生词本把生词填进去.然后通读一下听写记录,再听写大概两遍.再通读一次听写内容,然后不暂停听一遍全文.如果你的复读机不是复读时可以暂停的话,象你这样也可以—-黑猫白猫,逮到耗子就是好猫! </p><p>lhx00 2002-10-17 20:27:00<br>baobab:听写时,用”音标查字”之类工具是不是会削弱效果?比如锻炼不到自己那种猜字的感觉?扩大单词量用听写是不是就可以了?不需要大量的阅读? </p><p>答:没关系,黑猫白猫,逮到耗子就以想通过听写大量突破词汇会非常费时.大量阅读还是非常必要的 </p><p>网友hezb100<br>baobab:我在听写单词时，也是本来会的词，但听的时候就不一定能听出来。或要想很久才能听出来。在这样的状态下，一直听下去，听力能明显提高吗？请大家帮帮忙。该怎么办？</p><p>答:hezb,能够在阅读中认出的单词，与听中可以辨认的单词可不是一回事:一般人可以听出的单词，恐怕只占自己词汇量的20%。所以我们才要多听啊，否则干吗还要练听力？全部写完看着记录才知道整句的意思－－－－恭喜你，说明材料难度你选对了。一遍能听懂的材料，那还用听写吗？baobab听写新概念，从来都是听写完了才明白自己听写了什么，有时干脆听写完了还很晕。不要太看重错误率，只把听写当作提高英语的手段，难度越大，提高越快，当然不要难到无法下手打击信心。所以不要再听写自己已经听写过的课文了，听写新课吧。听写新课一段时间后就会发现听力明显提高。复习旧课多听加朗读好啦 </p><p>wghz 2002-6-11<br>听写4遍“指在没有看过文本的情况下听写新课，从复读全篇课文开始，第一句，暂停，写所听到的句子:第二句，暂停，再写。。。。。这样到最后一句，算”一遍“。那么，第二遍，第三遍，第四遍如何做？假如，听第一遍时，每个句子只能写出半句，或仅几个单词时，还能采用这个方法吗？ </p><p>答:听第一遍时，不能完整地写下是正常的，要坚持多听写几遍，争取听写下来。 第一遍:尽快写下所听的内容，听不清的地方就先空着，先别花时间纠缠在拼写正确上，用缩略符号也可。 后几遍重点放在未听出的部分，尽量把空白填上，一边检查自己写下的句子，（从语法，上下文等判断）。注意拼写正确。 </p><h1 id="《菜鸟学英语》上部-1"><a href="#《菜鸟学英语》上部-1" class="headerlink" title="《菜鸟学英语》上部"></a>《菜鸟学英语》上部</h1><p>第五章  翻译学习法——加强语法基础，突破难句关，打好阅读基本功</p><p> 一、翻译学习法的益处<br>当初用翻译法学习纯粹出于无奈。2001年准备职称考试时由于基础太差，阅读理解刚开始只对20％。我很苦恼，请教英语专业的朋友覃涛:“为什么一句话一个生词都没有，我却看不懂？”覃涛说:”那是因为你不懂句子结构。解决的办法就是把它翻译出来。我总布置学生翻译课文”。我听从她的建议开始翻译所学的《新概念二》， 刚开始时几乎把的每句话上把句子成分都标出，并注明哪句是定语前置或后置，哪句是词类转换…… 大家可看出baobab当初底子有多差，这个笨办法不推荐大家采用。不过慢慢地，开始体会到这种方法的好处:<br>1、加强语法基础。<br>通过自己动手翻译课文，可以把被动看译文变成主动分析句式结构的过程，在不断翻译的过程中，逐步能够灵活掌握单词，短语，句型的特殊用法，语法基础也会在此过程中得以提高。<br>2、突破难句关，加强阅读基本功。<br>阅读中经常会碰到难以理解的句子。有的是因为句中的部分单词或词组的意义不明造成的，更多的是因为句式复杂。句式复杂的难句对正确理解文章影响很大。这一点在考试中比较突出，平时阅读比较艰深的文章也是一样。如考研英语，满目都是复杂长句，其他难度更大的考试如GRE就更不用说了。 能否逾越难句关对阅读至关重要，而翻译学习法对于克服难句关功效显著。翻译有时须借助分析句子结构才能完成，而在进行句子结构分析的同时，自然会对那些与我们的母语不同的句式逐渐熟练，进而克服难句关。<br>3、暴露学习上的弱点。<br>通过将自己的译文与正确的译文进行对比，能够很快发现自己学习上的弱点和不足。这些错误有可能是对句中的词语意思理解偏差所致，更多的是由于对句法结构的误解而引起的。如果一句话翻译错了（翻译不好不在此列），那十有八九是句子分析错了。通过核对译文，发现自己的弱点，从自己的错误中学习。如果不亲自动手进行翻译，读完课文就参阅译文，往往会觉得自己的理解与译文差不多”。其实只是大意上理解的差不多，很多细微的之处不通过亲自翻译是不会体会出自己理解上的的偏差的。似是而非，最是学习的大敌。<br>谈到这里想起我的好友Anmy,有一次我跟她提到新概念四后面的课文很难时她不以为然。于是baobab就让她读第53课The foreign legion。她读了半小时，然后说看懂了，没什么难的。Baobab就让她翻译后半部分。Anmy花了一个多小时才翻译出来，让她备受打击的是她的翻译大部分都是错的。这课的确很难，Baobab当初翻译也错很多。这里想说的是，如果不翻译，这些问题恐怕就不会暴露得那么清楚。即使发现自己理解错了，也不能清楚地发现自己为什么错。<br>4、提高写作能力。这要与回译（译背）结合起来，将在下文回译用于练习写作和翻译部分讨论。<br>5、锻炼翻译能力。<br>听，说，读，写，译，以译最难，从最初学习英语就开始进行翻译练习，听、说、读、写、译的能力齐头并进，才会少走弯路。<br>6、揭示英汉差异，避免讲中国式英语。<br>通过对比英语与相应的译文可以让我们了解到了解到英语与汉语在结构上的差别,知道这种差别是很重要的。如通过对下边这句话的翻译，我们就会体会到汉语与英语的一个重要的差别:<br>I have bought a book for you . 我  买了   本书 给你。<br>如果我们把汉语再回译过去，译成I have bought a book to give （to） you.那显然不是地道的英语，因为英语用介词的地方，汉语经常用动词，这就是英语与汉语的明显差别之一。经常使用该法自然就会领会到其中的差别,使我们尽可能少的说出中国式英语。</p><p>二、翻译学习法的实施<br>1、首先将课文翻译成中文，对于不熟悉的生词和短语可以参考生词表和词典。但先不要参阅课本或参考书的难句注释。<br>2、逐句核对译文，制作自己的难句笔记。<br>在每次翻译完全文后，丢开课本，把自己的译文当中文来修改，看自己的译文读起来是否通顺。然后逐字逐句与课本译文对照，用铅笔在课本上标出自己错的地方。如果是整句错了，就把整句都划下来。翻译错的句子一般都是课文中的难点，不妨把它整理抄在笔记里，成为自己的难句笔记，重点复习。<br>3、查阅参考书，看是否还有未掌握的用法。<br>之所以让大家翻译完再看参考译文及注释，是为了最大限度地发挥学习主动性. 宁可多查词典,培养主动学习能力。先看的话, 就会养成依赖的习惯，看了句子分析觉得都懂,自己翻译时却不能顺利的译出。<br>4、善用辞典。<br>翻译时善用词典，就事半功倍。不光生词要查，那些我们非常熟悉的词，也可能有我们尚未掌握的词义。总之，当一句话翻译的不通顺时，就要看看是否有些词需要查词典了。以下边这句话为例:<br>“Modern states “invest” in institutions of learning to get back “interest” in the form of a large group of enlightened young men and women who are potential leaders….” 其中的 interest我把它翻译成”好处”，课本译文为”利息”。其实这个释义我也是知道的，但是不够熟悉。如果当时查一下词典就不会犯这样的错误了。<br>又如”but the scientific dust has long since settled…..” 这句没有生词，结构也简单，但从我们熟悉的词义去理解，就无法翻译。查词典得知dust has settled指”烟消云散”。就很容易理解了。另外在查词典时不要光看释义，因为释义与例句翻译常常有细微差别，因此还要看这条释义在例句中是如何翻译的，是否可用于自己正在翻译的句子中。词典就是最权威的翻译范本，这样不断学习，比较，实践，翻译的能力一步步提高。</p><p>三 课本译文一定对吗？<br>网友红苹果问：我在翻译新概念英语第四册第十二课好莱坞的语言时，其中一句”But the code does not disturb the profits,nor the entertainment value of the films;it merely helps to prevent them from being credible.”课本后边的译文为“可是审查法规却不能妨碍获取的利润，不能妨碍影片的娱乐价值 ，而只不过是帮助防止情节不可信而已”。我查了字典上的例句是“What prevented him from going?什么事阻止了他去？所以我认为prevent them from being credible的意思是“让情节变得不可信”，因此后面半句it merely helps to prevent them from being credible的意思就是“它仅仅有助于阻止情节可信”，和课本译文的意思完全相反！到底哪一个是正确的呢？<br>课本译文一定对吗？baobab是学到新概念英语第三册57课才开始有此疑问的。 “It was not I actually remembered anything at all”, 外研社新版翻译成“这倒并不是我背熟了地图”，我理解为“这并不是因为我还记得什么（儿时对村庄的记忆）”，于是就找了其它译本，其中安徽科学技术出版社1992年4月第2说的比较含糊，而上海外语教学出版社85年1月第二版的翻译与我的一样。<br>此后每课翻译后都如此比较各译本，渐渐发现有的翻译错，如红苹果举的例；有的翻译得不好。如新概念英语第四册第29课《Pieces of mind》中有一句“There is no sky in June so blue that it dose not point forward to a bluer, no sunset so beautiful that it dose not waken the vision of a greater beauty..” 其中“No…so…that…not…” 原意为”没有人或物…到…程度以至于不干某事” 但实际上, 这是个强调句型。我用的安徽科学技术出版社1992年4月第2版翻译为: “6月的天空不是蓝得不能再蓝, 日落不是美得不能再唤起一个更美的景象…” 这样的翻译怎么看怎么别扭, 而上海外语教学出版社85年1月第二版译为“6月的天空不管多蓝, 也不能不使人向往更蓝的天空; 落日不管多美, 也不能不使人勾起更美的幻景…”虽然好一些, 但终究不如郑孝通在《英语学习三点法》中引自吕志士和何宗礼的《新概念英语学习参考(四)》中的翻译: “6月蔚蓝的天空总使人遥想一个更加蔚蓝的苍穹, 美丽的落日总叫人联想起更绚丽的景象….” 在这样逐一比较中，就可以体会为什么这样翻译好，那样不贴切。慢慢就会找到感觉和乐趣了。假如什么时候发现自己对了，课本错了，那种乐趣与成就感是无与伦比的，这就是继续前进的最好动力:不要光盯着自己的不足，要从给书本挑毛病中获得进步。<br>自baobab发展这个爱好后，精读文章时就尽量多找译本比较。 果然发现不少书上有错，如《I have a dream》中有句:When the architect of our republic wrote the magnificent words of the Constitution and the Declaration if Independence, they were signing a promissory note, to which every American was born to fall heir.《疯狂英语》1997年6月第5期把它翻译为:“我们共和国的缔造者写下宪法和《独立宣言》的庄严词句时，就是签署了一张期票，许诺每一个美国人都能成为国家的继承人。”这里to which every American was born to fall heir.中的which应指a promissory note，其义为“每一个美国人都能继承的期票”，整句意思是:“我们共和国的缔造者写下宪法和《独立宣言》的庄严词句时，就是签署了一张每一个美国人都能继承的期票。“更多的时候，我们读的文章找不到其他译本,怀疑书中有误怎么求证？这时就要寻找其他途径了。可以象红苹果那样查辞典求证。此外，请教别人也是个很好的方式。<br>如baobab在准备考研英语阅读时，86年阅读第2篇有句：This cold air current from the land is so forceful that it makes the nearby seas the stormist in the world and renders unlivable those regions whose counterparts at the opposite end of the globe are inhabited.<br>思马德的《研究生英语入学考试阅读全真题详解》把它翻译为: 从陆地上来的冷气流是如此强大以致于附近的海域成为地球上暴风雨最多的地区，并使得其在地球另一端对称处的地区成为不毛之地。</p><p>renders unlivable those regions whose counterparts at the opposite end of the globe are inhabited。这句比较复杂拗口，我们把它简化拆分:首先renders those regions unlivable，是什么样的regions呢？ whose counterparts（ at the opposite end of the globe ）are inhabited.  把修饰语去掉，即renders unlivable those regions whose counterparts are inhabited. 可见其译文与原意恰恰相反:附近的海域不可居住，而地球其在地球另一端对称处的地区却可以居住。<br>这份译文，Baobab没有其他的译本可参考。为了求证，baobab特意请教了老爸和美国朋友，他们都说baobab的理解对。<br>由此可见，比较译本不过是求证的一种方式而已，还可查辞典，请教别人，查相关背景资料等等。这里想说的是:不要迷信书本，不要迷信权威，“尽信书，不如无书”。要敢于质疑。怀疑书本有错要自己求证，从求证的过程中获得进步，也是对自己的肯定和鼓励。</p><p>四  回译（译背）—–提高口语与写作<br>1、 回译的优点<br>这个方法是Baobab偶然发现的. 当时在准备单位里的考试, 要突击背下几十篇商业信函. 为了争取时间, 我先看一遍英文, 然后开始照着中文开始按记忆译回去, 记不清的句子就看一下原句. 效果非常好. 当时有个朋友不相信baobab能在这么短时间记下这么多商业信函, 就挑了一封新的让Baobab当面背, 结果一分多钟后,无论他让我对这封信作汉译英还是英译汉,我都一字不差。此后我就开始用这个办法背书, 效果非常好. 大家也许会说, 那是因为baobab你记性好, 而且课文你又听写过又翻译过, 课文你都记得差不多了。 这里我想把它跟我过去背课文的方法作个对比:<br>以前我是第一遍先看着课文跟读录音, 第二、三遍不看书跟读录音, 第四遍以后在不看书的情况下，我先读一句,然后听录音核对一句，这样需要五遍才能把课文背下来。后改用译背法, 我只需要两遍就可以背下课文。是否只适合听写过的课文呢？不是的。Baobab后来在学习《常春藤名家散文》就没有听写，直接用阅读口译—回译方法精读课文，都是30分钟就可以记住一篇。此后精读无声材料时也常常用翻译—回译法学习。</p><p>当初baobab把它称为“译背”，主要用来背书，还以为是自己发明的。直到在旺旺英语论坛遇到阿呆，才知道早在阿呆读初中时，他的英语老师就已经要求全班同学用翻译—回译法学习。此后又看了一些外语学习方面的书，知道双语互译法由来已久，Baobab不过是无师自通。双语对译是掌握外语的习惯用法、提高口语与写作翻译的好方法，而不仅仅局限于背书。所以本书将“译背”改称为“回译”。回译有许多优点:<br>1）提高记忆效率<br>传统的机械记忆需要回想全部内容，包括故事情节等，从而加重记忆的负担。而译背则只需要回想那些没记住或记忆不准确的地方，而那些熟悉的地方在译文的提示下很容易的就能背出。此外，译背把被动的机械记忆转化为主动的再忆过程，更有针对性地找到那些尚不能回忆或回忆有误的地方。大大提高记忆效率。<br>2）及时发现自己学习上的弱点，克服中式英语<br>在回译的过程中,你会发现许多地方可能无法译回去，例如在回译自己不熟悉的惯用语、复杂句式时就容易发生上述情况。这些地方是英语的难点所在，也往往是英语与汉语存在重大区别的地方。出现无法回译或回译不正确，说明这部分知识自己还没能掌握,需要在此重点注意，通过不断比照修正，加强基本功，克服中式英语。<br>3）锻炼英文表达能力，提高口语，写作，翻译<br>回译并不单纯是再忆和背诵，有一定比重的翻译成分，例如在想不起来的时候就不得不翻译。这样在不知不觉中锻炼了英文表达能力，对口语、写作、翻译都大有裨益。<br>2、回译的实施:<br>回译即可用于背诵所学课文，也可以用于用于练习写作、翻译。下面谈谈具体的操作方法:<br>用于记忆所学课文:<br>方法1:<br>直接看着译文回译成英文，译一句，对照原文一次，把自己弄错的地方用铅笔标记出来。在译的过程中, 可以不断问自己 “这句是过去时还是过去完成时? 名词是单数还是复数? 名词前有没有the? 介词搭配是什么?…….” 这些都是比较容易弄错的, 特别留意就可以提高效率。刚开始可能会不太习惯, 会觉得怎么有那么多错。要注意总结自己为什么错, 多练习, 勤总结, 就会越来越好。<br>方法2:<br>如果觉得方法1太难，那就借助复读机。用复读机把全文复读, 看着中文译文译回英文。即: 自己先译一句, 然后听这一句录音, 比照一下有没有偏差, 如果没译对, 就跟着录音重复这一句。如果语速太快没听清这句, 可以看一下原文。<br>方法3:<br>前两种方法还存在困难，可以先听或者跟读课文录音，先行熟悉课文内容。重复几遍对文章比较熟悉后, 即可转入上述的回译练习。跟读录音时尽量不看书, 那样才会锻炼听力，实在不能听清的再看原文。<br>对于有一定基础的学习者，建议大家先试第一种方法, 不行再试第二种方法, 还不行再试第三种方法, 即遵循”难度递减法则”。而不要一来就从最容易的方法3开始，那会埋没你的潜力的。对于初学者，直接回译比较难，可以先对课文自己动手翻译，然后听读课文，对材料比较熟悉后再行回译，并逐渐过渡到第一种方法。<br>值得注意的是，很多采用翻译－回译学习法的朋友会觉得看着译文很难译回去，而看着自己的译文就较容易译回去。我想也许有以下两个原因:一是觉得课本译文意译多，自己译的直译多，因此回译自己的译文更容易；<br>二是因为自己动手翻译，对句子结构，文章内容更进一步加深了印象，所以按自己的语序再译回来就不觉得难，但按书本译文的语序译回去就觉得困难。关于直译或意译，baobab以为课本译文还是直译多，或说是固定用法的固定译法，只是我们不熟悉这些固定用法，就以为是意译，baobab还常常发现自己漏译的小词，可见还是直译多。关于语序，我们知道，汉英一大区别就在语序，因此Baobab认为，还是应该照课本译文译回去，那才是了解英汉差异，逐步掌握地道翻译的方法。<br>用于练习写作和翻译:<br>回译是练习翻译写作的好方法。可选择以下两种方式:<br>1英汉对译<br>选择中英对照的文章，自己先英译汉，放一段时间后，等自己把原文忘记得差不多了，再将其翻译成英文。然后逐字逐句与原文对比，揣摩其中差异，再修改，再比照，如此反复修改至满意为止。注意对译法练习翻译写作时，不要翻译完直接回译，那样记忆成分大于翻译，对翻译写作锻炼不够。</p><p>对译是学外语的好方法，18世纪英国历史学家吉朋（Edward Gibbon）在他的自传《Gibbon’s autobiography》说到，他用对译的方法成功地学习拉丁文和法语:他将罗马政治家西塞罗(Cicero)的书信译成法文，放置一段时间后等忘记得差不多时，再把它从法文翻译成拉丁文，与西塞罗原文比较；他也曾将法国历史学家维托（Vetor）的《革命文献》翻译成拉丁文，过一段时间再将它从拉丁文翻译成法文，与维托原文比较。如此坚持，做了几本对译笔记，逐步掌握其语言的习惯与用法，并将此方法传授给他的学生。<br>2直接汉译英。<br>找有译文的文章，在不看原文的基础上先自行翻译，然后再同原译文核对一下，看看那些自己无法翻译的别扭句子人家是怎么处理的，然后再修改，再比照。在回译练习中，因有有的译文可以参考，从自己的翻译错误中也会得到很多启发，因此学习效果显著，翻译写作及口语能力都会得以提高。<br>四、 模仿跟读—-改善发音，促进听力，提高流利程度 英汉互译的确可以快速高效背下课文，但也有其缺陷:模仿朗读少，不能练习发音；文章读得不够流利, 这对能否脱口而出影响很大。所以正确译出之后, (短期记忆形成时) 还需要跟录音模仿朗读。但建议大家把英汉互译放在跟读以前, 以最大限度发挥自己学习主动性（翻译，再忆等）。如果先模仿跟读就会削弱回译的效果，因为机械记忆的比重更大了。<br>模仿跟读很简单:复读全文，一句暂停一次，模仿录音的语音语调跟读。可以用跟读/对比功能检查效果。很多朋友喜欢一上来就不暂停录音跟读。这个习惯不好:一边听一边忙着跟读，既无法把握录音的语音语调细微变化，也听不出自己发音与录音的区别，如果是长句很有可能就跟不上糊弄过去了。至少在头几遍时不要这样。 模仿跟读，重点在于“模仿”。很多人都烦恼于发音不好，但又不去模仿。语言学习第一步是模仿。发音也不例外，模仿就是改善发音最好的方式。<br>发音改善了，也就促进听力。很多人听力不好就是因为语音有问题:不知道单词正确的读音是什么，不知道省音连读。省音连读弱读可以说是听力中最令人头痛的问题了。对付它最好的办法就是模仿跟读:如果能模仿得跟录音一样，久而久之也就习惯了。<br>值得注意的是在模仿中要注意每句话中的停顿。在哪里停很重要。曾在一篇文章中看到有老外说:“我就算蒙着眼睛，也能轻易分辨出说话的是中国人，还是美国人。因为中国人说英语没有节奏。”评论虽有点极端，但也说明了很多中国人的发音毛病:除了语音语调以外，不知何处停顿或随意停顿。大家可以马上自己朗读一篇文章，把自己停顿地方划出来，然后对比录音，看看区别大不大。当初baobab模仿录制《The happy prince》，第一件事就是先听录音划下停顿之处。<br>改善发音小技巧:模仿跟读熟练后就不再暂停，与它同步读，直到完全同步为止（包括模仿语音、语调、停顿、强弱等等）。不过此法比较费时，可做改善发音的训练，平时学课文不必强求。</p><p>综合运用实例<br>一 踏实学习是为了少走弯路<br>很多朋友称一两个小时可以学五六课新概念英语，不过听到这样骄人的进度我总是有点担心:担心欲速则不达。<br>我的好朋友Anmy，早在她考研以前就学完了四册新概念英语，九七年读研以后先考四级，考过四级后连考了3次才考过六级。2001年春节我推荐她看了钟道隆的逆向法讲座，她不以为然（那时baobab英语很烂， 都是她在教baobab如何学英语， 哪里听得进baobab的话）。2002年baobab在一年之内连过四六级让她很受震动，因为她很了解我，知道我2001年春节开始认真学英语时起点有多低， 也知道我考六级时词汇量不会超过《新概念3》（当时才学了56课），而且我也很少阅读。她反省自己当初花太多时间与精力来做题，新概念四册，她一课也没有背过。 她以前常跟我说听惯了VOA的美音，现在听CCTV的英音反而听不懂了。我前阵子才详细问她VOA听的是什么，她说是special English。我告诉她听不懂不是口音问题，而是听力问题。<br>隔几天她打电话告诉我，她连《新概念3》的第一课都听写不下来，我这才发现我的听力早就超过她了. 她因此深受打击，问我是否要从初中英语听写起，我说大可不必，就听写新概念好了。 她说除了词汇量以外，我在听，说，写等应用方面都已远胜于她。这真让我吃惊―――以前我可总是仰视她的呀！<br>其实我的这位朋友英文水平很好（远高于baobab），她如今在读博士，外文专业文献随便读，自己也能用英文写专业论文, 外籍专家来访， 也常常由她担任翻译，还曾做过学术报告的现场口译。但她达到这样的水平付出了太大的代价，这么多年，她一直都很刻苦用功（天天学），英语广播也是天天听（泛听多，精听太少），学英语对她来说是很痛苦的事（可能是做题太多，我做题时也很不high），不像我一直乐在英语中。 后来我这位朋友也开始每天听写新概念。</p><p>我举这个例子，就是希望大家不要再走这样的弯路。仅仅看懂课文的意思是远远不够的，一定要把课文吃透才往下学。踏实学习才会少走弯路。<br>二 如何通过学习《新概念英语》打好基础<br>网友 lanpi123456789 :我现在是大二.在自学新概念三，可是我不知道到底如何学？是怎样的步骤？是不是就象老师上课教授课文那样精读:先读懂，再就陌生单词查字典，然后划出搭配，句型，最后一段一段的背诵，背诵是不是以理解为主，直到看中文说出英文，要默写下来吗？一个个的单词查字典吗？课文后面的练习重要吗？特别请教一下您如何学习新概念的.<br>这里先谈谈当初baobab学习新概念的步骤，也可供学习其他精读教材参考:<br>1, 复习前一课。baobab约耗时10分钟。<br>遗忘是英语学习的大敌，学新课前先花少许时间复习则事半功倍。<br>先复习生词，先用卡片遮住中文， 看着英文能知道其义算过关， 忘记的用铅笔在前面标记， 如此复习此课全部生词； 再遮住英文，看中文想英文词义。 课文的复习: 听一两遍录音，自己朗读一遍OK.<br>2, 学习新课:先听几遍录音, 看能听懂多少.<br>3, 听写:听写课文，核对原文，按错误分类做听写记录。<br>4 ，翻译:将课文英译汉，核对译文，将错误的地方用铅笔在课文上标出。如果整句错则将它抄入难句笔记中。<br>5 ，回译（译背）:将课本译文译回英文，逐句核对原文，错误之处用铅笔标出。<br>6， 模仿跟读录音至能流利朗读。<br>7 ，查阅参考书，看是否还有未掌握的用法。<br>8 ，做课后练习。<br>9 ，记生词。先背课文, 再背单词就很快了. 因为单词放到课文里, 有一定的语境更容易记住, 背完课文单词也背得差不多了, 只需要记住拼写就可以了, 这样5min我大约能记30多个生词. 以前baobab走过这样的弯路:先花半小时学生词，结果听写时还是不认识这些词。 以上只是baobab当初学习新概念的步骤，读者诸君可灵活掌握: 比如听力较差的，可把听写放在翻译—译背后。无声教材则可用翻译—回译法。等等。<br>此外, 最好能复述课文. 需要说明的是，复述与背课文功效不一样:复述在于学会用自己的话表达， 背诵在于学习正确表达方式，二者不可偏废。记得曾问我的朋友Anmy如何学习新概念，她说复述完课文就完事，不背课文。须知一个人“自己的话“总是有限，并且“自己的话”未必是地道的英文，要不断提高并且掌握地道的英文表达还是要背诵。<br>大家也许会觉得这样学习太复杂。这些步骤从单课时间看, 还是比较费时的, 如我学《新概念4》, 350词一课大约需3.5小时.(听写1小时,翻译1小时, 参阅&lt;&lt;新概念自学词典&gt;&gt;, 做练习30min, 译背课文与生词1小时). 但从总耗时间来看, 大家从baobab开始学新概念2到考完六级的学习经历可以算出, 《新概念2》 50课<em>2小时=100小时, 《新概念3》, 60课</em>3小时=180小时, 加上学习其它材料的时间, 不会超过500小时. 比起那些苦读多年英语却收效不大的人而言, baobab花的时间是很少的了. 从这个意义上讲, 这是不是一种捷径呢?<br>此外我想专门谈谈新概念练习的重要性. 不少人觉得练习太简单而不愿做. 很多人考试能拿高分, 却是不能听不能说, 写起来也是不敢恭维, 只会感叹“练习太少”, 而说”多听多说”对他们几乎就是空话, 因为不知何从练起.<br>新概念的练习就是专为提高听,说,读,写四项技能而设计的, 下面以第二册练习为例:<br>1, Comprehension precis and composition.<br>这部分练习由若干问题组成，这些问题回答完连起来就是一篇摘要写作。复述不知何从着手的，这就是最佳的口语与写作训练方式. 基础好的可做口头练习.<br>2, Key structures. 本课语法要点.<br>3, Special Difficulties. 本课语法难点。<br>值得注意的是，新概念的语法都是通过模仿练习教授，并不讲解语法。这点与国内教材区别很大，不习惯的话可以看新概念的参考书，这些书里就会讲解语法。<br>4, Supplementary written exercises<br>补充练习. 分为comprehenion, structure, 与vocabulary三部分专项训练.<br>2）.翻译—回译—听写—模仿跟读（附辅导实录）<br>3）. 听读/听写—口译—回译—模仿跟读<br>4）.翻译—回译<br>5）.阅读口译—回译<br>阅读口译是口译基本功，baobab是听口译讲座后突发灵感把它用于精读课文的，快速高效。可用于没有录音的精读材料上，方法如下: 先通读一遍文章（有信心者可以省掉此步骤），然后看着英文，大声口译成中文，生词可以看生词表，译完核对译文，把译错的地方用铅笔划下。立刻对着译文口译回英文，译一句核对一遍，把错的地方用铅笔划下，然后朗读两遍，最后记生词短语。<br>此后需要精读的无声材料多半用阅读口译，就这样学习了马丁路德金的<i have a dream>,肯尼迪的<the torch has been passed on the next american generation>，罗素文集等，现在学法律英语，也常用阅读口译的方法。<br>小结<br>从以上例子可以看出，不同的人适合不同的方法与教材。一般而言，中学生功课重，则不宜增加负担再学其他教材，专心学好课本即可。平时功课紧，而听写比较费时，因此可用翻译――回译――模仿跟读学习课文，假期则可适当增加听写以提高听力；英语基础好的中小学生，学有余力的，则可学习新概念等精读教材，用听写/听读――翻译/口译――回译――模仿跟读；大学生与广大自学者，则可选择适合自己的精读教材，若是有声教材，可先试听写――翻译――回译――模仿跟读，如果觉得先听写吃力，可先翻译――回译――听写――模仿跟读，逐步过渡到听写――翻译――回译――模仿跟读。若是无声材料，则可以翻译――回译或阅读口译――回译。<br>需要说明的是，笔译要比口译来得扎实，也更容易暴露弱点。因此新概念2难度以上的文章，还是推荐用笔译（至少英译汉部分笔译）。新概念1或初中英语这样的初级教材，则可以用口译。此外，对于有声教材，用听读学习新课，也只适合于以短句为主的初级教材。句子稍长的课文，还是提倡用听写。 以上模式按难易排序，为 无声材料<br>1翻译――回译<br>2 阅读口译――回译<br>有声教材<br>1听写――翻译――回译――模仿跟读<br>2听读/听写――口译――回译――模仿跟读<br>3 翻译――回译――听写――模仿跟读<br>4 翻译/口译――回译――模仿跟读<br>值得注意的是，听写――翻译――回译――模仿跟读难度最大，但效果也最好。听读是为听写做准备，先翻译再听写，也是为了过渡到听写――翻译――回译――模仿跟读。本节所举的例子，无论原有基础好坏，均可顺利过渡到这一模式。<br>第六章 菜鸟备考攻略<br>一. 基本功与应试技巧并重<br>1 基本功的重要性</the></i></p><p>2 考试技巧的重要性<br>是否只有基本功就够了呢？就不需考试技巧呢？<br>例一: Z按照&lt;阅读手记&gt;的技巧作考研真题,还是错的一塌糊涂,她问我: “书上说\’具体的不是解,概括的是解\’,为什么有时候又不这样?”<br>我告诉她,这些技巧还是要看得懂文章才有用的。她失望地说: “我要看得懂,还用这本书?”<br>这倒未必. 我作2002考研真题,最后一篇生词,难句较多.我按照书上技巧作,5题对4题.然后拿这篇阅读请教一位基本功很扎实的高手,每一个生词他都解释给我听,每一句难句他都分析对了. 然后他作题,只对3个！<br>所以说, 考试技巧可以帮助你避开出题陷阱,避免看懂文章却作错题；不过话又说回头，如果阅读中的长难句每一个单词都认识,却看不懂它的意思,这些技巧又怎么发挥作用？<br>例二 2000年的考研作文 ，有个考生以第2幅图的那条鱼为切入点，第一句“我是一条幸运的小鱼，”接着历数人类对鱼类犯下的种种罪行，最后以大海中最后一条鱼的身份对人类的的行为作出批评并呼吁人类采取积极的措施。整篇文章文字优美，流利通畅，一个错误也没有。但专家审查后只给8分（满分15分）。理由只有一个:不按命题要求作文。以该文章功底，按要求写成三段式，得满分不成问题。<br>摘自 胡敏《2001考研英语作文考试透视》.《新东方英语》NO.4<br>3 做题有讲究<br>很多人屡考屡败, 一个重要原因就是盲目作题:做完对答案就算完成任务,然后继续作题.就像曹其军老师在其演讲中举的例子: “一个考生上台问我很恐怖的问题！！一共600篇文章，他说目前280篇看完了，他问我能否告诉他下面该看什么？我问他感觉如何，他说似乎没什么感觉，这在我预料之中，第一个和最后一个各对多少？第一个单元错7个，最后一个错9个”<br>另一个例子是一个四级没过的考生,用了一个笨办法:把张锦芯的阅读模拟题都背下来,结果考研英语过了.<br>其实这就是把真题阅读当教材来学习, 而不是单纯作练习,(对完答案就丢一边,只是相当于测试). 这同样是个打基本功的过程.只是教材是真题而不是传统教材而已.<br>4 基本功与考试技巧并重<br>从以上例子可看出基本功与考试技巧都重要:没有一定的基础, 考试技巧如无本之木；没有一定的考试技巧，基础好也有可能丢掉不该丢的分。 其实这两方面没必要对立起来. 基础差的可以用适合自己的精读教材打基础. 基础打好了适当做题掌握考试技巧。也可按考试难度/自己根基/教材难度/备考时间安排二者并行。<br>比如baobab在备考四六级与考研时都与新概念学习结合起来: 听力部分: 听写新概念,既提高听力,还可精读教材,胜过听听力教材.(只能练听力). 但考试听力题型与新概念不同,就用历年真题听力作检查好啦.我考六级时除了历年真题没听过其他听力题,听力最高19.这就得益于平时听写新概念.<br>阅读与翻译部分: 翻译新概念加强阅读与翻译基本功，采用两遍做题法精读真题掌握阅读技巧。<br>写作与完形填空:<br>baobab从来不做完形填空练习，向来都是凭语感填。语感何来？背诵多了就有。新概念的背诵对语感与写作都大有裨益。听胡敏的作文课以掌握八股文的规范写法。</p><p>一. 取法乎上，得乎其中；取发乎中，得乎其下<br>1.Z的教训<br>Z，2002已经是第3次考研了，英语30分。去年碰到我，听说baobab居然过了六级（前两年baobab和她基础差不多），马上就按照baobab的方法学习新概念（听写－翻译－回译），2002年3月到2003年一月，从新概念2学到新概念4的20课，精读真题，03年英语四十多，这个分数当然不高，但要知道2003年英语远高于2002年，有人2002年73分2003才45分，还有好多2002六七十，03都是四五十，所以Z在这一年内进步多了。如果她学完新概念4，会进步更大。<br>不少人也按这个模式学习， 但考试似乎不理想。 如Z，2002年6月考四级58分， 2003年英语也是四十多。她时常打电话问baobab，怀疑这样学习是否有效。我对Z说: “新概念2最后一课的难度相当于高三英语第一课；新概念3的最后一课相当于六级阅读难度；新概念4的后20课相当于考研英语阅读难度；考四级时，你才学完新概念2，2003考研时，才学完新概念4的20课。每次考试，自己所学难度恰恰都低于考试难度，所以考得不理想，也看不到自己的进步。平时手头有生词难句注释可参考，翻译新概念前20课你都觉得吃力，何况考研要在规定时间内完成象新概念4后20课难度的阅读呢？而且没有生词难句注释可参考。”<br>2 平时训练材料与考试难度关系<br>从Z的例子，可看出平时训练材料与考试难度关系。想通过考试，平时训练的材料必须大于考试难度， 因为平时训练的时间与方法都比考试要求低:平时听写可以暂停录音反复播放直到听懂，考试要求一遍听懂；平时可花一个小时逐字逐句精读弄懂一篇真题阅读，考试要求在10-15分钟内看懂文章做对题。因此要想在考试时在规定时间内作对题，平时训练的材料难度必须高于考试。 所谓取法乎上，得乎其中；取发乎中，得乎其下。当然这也有个循序渐进的问题，这就又回到“适合自己的基础”问题上了。<br>三 备战四/六级/考研<br>1工欲善其事，必先利其器<br>下面谈谈参考书与备考方法: 无论是何种英语考试，首选历年真题:模拟题弊大于利，不是词汇超纲，就是文章难度或低或高，最可怕的是题目难度与考研题目相差太远。唯有真题最贴近考试难度。<br>1语法:<br>四六级/考研:均推荐&lt;题题通.四级/六级考前强化&gt;华中科技大学出版社, 或类似的四六级考试参考书, 归纳语法考点，按主谓一致性、虚拟语气等分类讲解，并附有相应练习, 做完就等于把语法系统复习一遍. 不要用专门的语法书, 又厚又没边, 而且题过于简单。 其他《XX考试一本通》的厚书就不必买了。此类书用于复习语法就好了，其他的都用真题。<br>考研:用&lt;题题通.四级/六级考前强化&gt;就够了，《XX考研一本通》之类的厚书不必买，那些书一般都把语法复杂化。考研的语法只在完形里考, 并不难. 只有10分,如果你已经得7分,花大力气可能只提高得到8分,不如用这些时间来突破阅读与写作.<br>六级改错: 用按主谓一致性，虚拟等分类讲解并附有相应练习的参考书, 如《六级改错攻关》或《题题通.六级考前强化》。<br>不要用只有改错题和答案详解的书，baobab当初这样做改错练习，次次都只对20%，自从按朋友angie的建议改用按主谓一致性，虚拟等分类讲解并附有相应练习的参考书后，就提高到60-70%。<br>2，听力:<br>四/六级/考研:<br>平时听写新概念。有很多人建议用《英语中级/高级听力》，个人认为不如用新概念。因为听力教程只能训练听力，而且它的词汇范围（如新闻中的专有名词）远超过考试大纲词汇。不如听写新概念，既可以练听力，其它读写能力基本功也得到加强，词汇范围也就是常用词五六千，与考试大纲词汇相差不大。不过外研社新版新概念语速较慢，连读弱读少，建议大家找找世图版或上外版新概念录音。<br>考前用真题与大纲样题.(不必听写,只作测试)。另做几套听力模拟题熟悉题型。<br>考研:<br>平时用白洁《考研听力》，考前用真题与大纲样题。<br>考研听力恐怕是最让人头疼的，其难度远高于四六级听力:四六级B部分答案印在试卷上，读完短文再逐一念题目，每道题目都留够时间答题，而考研c部分是题目和答案都印在试卷上，但短文念完你也要做完题（有5秒答题），而且题目顺序与短文内容顺序不一致。这就有一个问题:到底在听短文时要不要看题？ 不看嘛题目不按顺序出，等短文念完自己也忘光了，看题会干扰听短文。是平时练习时要习惯在“derection”时把partBC题看完（光看题干好啦，看答案恐怕来不及，partA光看topic够了，比较简单，听短文时就专心听，不要边听边<br>看题。 Part A与part B是听写，大家平时练习时就要养成边听边写的习惯，（注意不能暂停后再写，否则考试就来不及），这也是考研听力的一大难点。<br>白洁《考研听力》的最大好处是循序渐进地先是《专项训练》，按数字/地名等分类练习，然后再到综合训练，并且其语速略快于考研听力。 研友可用白洁听力先练一段时间打基础，临考前再用真题与大纲样题练兵。<br>3阅读/翻译:<br>四级:吃透历年真题。四级不需难句过关，背完单词吃透真题足矣。六级:历年真题，听写翻译背诵新概念3,有时间翻译《难句过关》，翻译新概念3，王若平《阅读基本功.难句过关》六级版，六级历年真题<br>考研:翻译新概念4，翻译《难句过关》，吃透历年真题<br>1 &lt;阅读基本功.难句过关&gt;王若平.<br>这本书把难句分为11种类型，分别讲解，最后一章是各种类型综合的复杂难句。共700多个难句，每句均有结构分析，参考译文。建议把每句的中文遮住作翻译练习. 看不懂和翻译错的句子用铅笔在前面划个小圈，第二次看时只看有标记的句子，如果还看不懂就再标一个圈。如此把书越看越薄。建议大家买配套磁带，方便记忆。这本书的一个问题就是所选句子常常词汇超纲，（有的是从GRE中选出），不用在词汇上纠缠，把结构搞懂就行。（比如超纲词直接抄英文放在翻译里）<br>四级把单词背下，吃透真题一般都可以过关，六级这样强攻阅读也可勉强过关。而考研阅读长难句多，其难度高于托福低于GRE。如无扎实的阅读基本功，考试技巧几乎无从下手。所以难句训练是非常有必要的。新东方GRE阅读老师杨鹏老师曾说过:一篇文章在一个小时看懂不算本事，如果不能在规定时间内看懂，就是英语专业博士也考不好。杨鹏说从难句入手集中突破， 阅读基本功能在两三个月内大幅提高。<br>Baobab备考时，K完王若平难句，再K杨鹏的《GRE/GMAT阅读难句&gt;就不太吃力了。阅读果然轻松多了。不过备考时间紧张，大家能吃透王若平难句就很不错了，杨鹏的难句不是必须，各位量力而行。<br>1，新东方陈慧敏的《考研英语真题阅读与翻译》。<br>新东方周蕾也出了一本真题解析，两本书同样是94－2002真题，同样有重点词汇短语，难句分析，答案详解。但陈慧敏的书有全文翻译，这对于精读真题非常有好处， 因为没有译文，就不容易发现自己没理解的地方，对于训练阅读基本功非常不利。 新东方的真题只有94年以来的真题，如果觉得不够的话可以买思马德《考研真题翻译》，从86－2000共15套真题翻译。<br>真题阅读做题方法（四六级考研同）:<br>建议采用“两遍做题法“:<br>第一遍每篇阅读限时做完, 一般每篇应控制在10-15分钟。限时是为了保证阅读与答题速度，考试时不至手忙脚乱。<br>第一遍做完，先不急着对答案，再做第二遍:把每一句都精读弄懂，生词,未掌握的短语抄在本子上,难句翻译出来(最好选用带有全文译文, 生词,短语,难句解释, 解题思路的真题). 还是不理解的话就请教别人（考研时baobab出门都随身携带真题，有疑问的句子都划下来请教高手）. 一句话,把真题当教材一样精读.(其实这就不完全是考试技巧了,也算打基本功了)。 精读后再做一遍题。每道题的四个备选答案，都要从原文中找到依据:你认为A对，依据何在？B错有理由吗？C和D呢？很简单，做题时用铅笔在ABCD与原文中相应的句子连线就可。这样要求是为了避免模棱两可地蒙答案，养成习惯了就一点也不麻烦，baobab通常第一遍做题就可在10分钟内如此连线做完一篇。最后对答案。对完答案后要仔细总结自己为什么对，为什么错（注意要从出题思路来总结）。平时养成习惯看完每一段都要概括本段大意（如果概括不出可以瞄一下首句末句）。<br>做题切忌贪多嚼不烂，做完对答案见成绩不理想又做下一篇，每一篇都不知自己为何对为何错。简直浪费真题资源和自己的宝贵时间。 其实真题阅读都是比较难的文章，出题思路也非常巧妙， 吃透真题不仅可以熟悉题型套路和解题技巧，同样可以提高自己的阅读基本功，这就是为什么有人背真题阅读文章考试也OK的道理<br>4 作文: 四六级考研同<br>新东方胡敏考研作文网络课堂，胡敏考研范文。<br>胡敏考研作文讲座: 吐血推荐！如果没有条件听新东方网络课堂胡敏作文讲座，可以用思马德&lt;填空式作文&gt;。这本书把开头、段中、结尾、起承转合的句型都排好,只需要在空白处填上你的观点等就成为一篇作文了. 真是对付考试的利器.(不过你要是基础差不会写的话,这本书也是白费) 以上这些，不过是考试八股文的框架，写作基本功，一是平时多背好文章（不局限于作文范文），二是勤加练习，多修改自己的习作—-反复改一篇， 胜过胡乱写10篇。<br>3 时间安排<br>下面谈谈新概念学习与备考训练时间安排:<br>其实备考不需太多时间,如语法一天一章,15-20天搞定；&lt;难句过关&gt;一天20句,（可上午10句，下午10句）。40天搞定.作文一周一篇胡敏布置的经典题型，5周搞定.不过作文不要留到最后一个月，最好考前两三个月开始练。做题15套真题足矣, 就算一天2篇阅读理解,也就是一个月搞定. (建议第一遍象考试那样,在规定时间内从听力到作文一口气做完,第二天再精读阅读与翻译,也是一个月搞定).这几项同时进行,不超过一个月.有时间的话先花一个月搞定语法与&lt;难句过关&gt;和作文,后一个月做真题，也就是两个月左右。<br>建议打算参加考试时先做一套最新的真题,了解自己的弱点.然后有的放矢。题在精不在多,最好的训练材料就是历年真题,因为最接近考试难度.其他模拟题难度就不好说了.切记平时做题就要象考试那样在规定时间内完成，这样考试就不会手忙脚乱做不完题。<br>大家可以看出,也就是需要一两个月来做题备考.这与学习新概念并不矛盾.可以平时学新概念打基础, 考前两个月再做以上备考工作。建议考四级的考前完成&lt;新概念3&gt;,六级学到新概念4前20课。考研学完新概念4+难句.建议听写–翻译—回译。如果考试时间紧，听写安排不过来，也至少要翻译。<br>很多人说”我也想踏踏实实学英语,不过现在要考试,考完我再学”.没时间扎扎实实打基础,却有时间年复一年地重考四六级,考研英语。把这些浪费在盲目作题的时间用来认真学新概念,既可以提高英语水平,又可以通过考试,何乐而不为呢？<br>一.  起步篇 之 教材的选择<br>首先, 需要选一本好的口语教材. 大家不要小看教材的作用. baobab所居住的大学已为该校教师开办多期口语班, 均由外教授课, 但几乎没有一期是成功的. 原因就在于高估了该校教师的口语水平, 从来没有采用基础的口语教材系统教授. 可怜这些硕士博士, 包括GRE高分者, 到现在还不会开口说英语. 外教就更不幸, 每次问”Any volunteer?” 大家都低头”沉默是金”, 可怜这位白胡子老头竟然要抛球决定由谁回答!<br>与”沉默是金”相反, 有人非常敢说, 随便逮个人就乱说一气. 我有个朋友就是这样, 经常会问我”Do you want to talk to me tomorrow?” (他以为他是周润发?!) 时间他是花了不少, 英语沙龙更是每晚必到, 说得也很流利了(语速够快), 但他的口语怎么听怎么别扭. 为什么? 就因为他只愿意与人聊天, 而从不肯好好背一下他买的那一大堆口语书中的句型. (嫌太简单!—却一句也背不出!)<br>英语绝不是你想怎么说就怎么说的, 很多表达都有其固定的方式, 因此想要学好口语, 就至少要学上一本系统的口语教材.<br>怎么才算”系统”呢? 它应该是按情景分类, 告诉你在什么样的场合说什么样的话. 象李阳的教材就不宜作为入门教材, 句型是够丰富了, 但没说清楚该怎么使用. 最好选用由英美人士撰写的经典口语教材. 如&lt;&lt;走遍美国&gt;&gt;, &lt;&lt;英语九○○句&gt;&gt;等. 最近引进的《新世纪走遍美国》也不错。市售很多国人胡拼乱凑的口语教材，错误百出且不说, baobab还曾在某热销的口语教材中看到这样的对话<br>A: You are making me very disappointed!<br>B: What makes you say so?<br>我专门就此请教我的外教, 他们说即使是上级对下级, 这样说话也是非常rude.<br>口语教材最好是附有相应的文化背景介绍, 因为东西方文化差异大, 同样的场景, 用中式思维表达很可能会闹笑话甚至引起误会。记得有个苏格兰女孩曾在英语沙龙抱怨，说很多中国人第一次见她就说: “You are fat.” 我赶快跟她解释，fat在中文里可不是什么严重的词。朋友之间见面常会说:“胖了，生活好过啊！“或“瘦了，是不是太辛苦？”不过是寒暄，跟how are you?差不多。我还跟她解释了一下什么是“福相”。<br>说到这里想起新东方老师说的一个笑话: “你跟一美国女孩吵架，你骂得她体无完肤，她没事；你骂她祖宗十八代，她也没事；但你若说句’You are fat!‘，她就马上倒下了！”<br>这就是文化差异。所幸baobab一开始学口语，好友覃涛就送了本好书，大概叫《实用口语指南》，每一课后均附有相应文化背景，介绍西方风俗礼仪，什么可以说，什么不可以说，什么话题比较敏感。至今还记得第一课就强调“政治此类敏感话题，与不熟悉的外国人交往时应避免提起。” 想起有次英语沙龙，主持人是位美国女士，在座的一大半男士居然对大谈911事件美国活该，让她尴尬无比。Baobab只好用中文请这些男士注意礼节。<br>若所选教材未配有文化背景介绍, 可另外读些相关书籍弥补.<br>在学习过程中, 要特别注意那些与中式思维不同的表达方式. 比如说, ”Would you mind giving me a push?” 很多人会不假思索地答”Yes, of course”. 其实回答应该是”Not at all.”</p><p>我曾亲耳听到某外语学院院长在Out Look 节目里, 当主持人问他是否认为&lt;&lt;甜蜜的事业&gt;&gt;与&lt;&lt;小字辈&gt;&gt;里男女主人公表达感情方式太含蓄时, 他说:”I think they are not traditional.”<br>要不是亲耳听见, 我是怎么也不敢相信这样典型的chinglish会出如此著名外语学院院长之口. 另一方面, 这说明一个人的思维定式是多么难以改变, 这也是学英语需要下大力气的地方.<br>大家可以读一读”胡敏老师谈学英语的六大策略”，这篇文章以“到朋友家做客”为例，说明中西思维差异，对“文化概念”与“思维差异”有精彩论述。.大家可以在新东方的网站上找到这篇文章。<br>二 起步篇 之 教材的学习<br>口语教材选定以后, 接下来就是学习了。不同的教材学习方法略有差异。如果是象《英语900句》这样纯句型的教材，可以自己先听一遍课文看能听懂多少，然后看着书反复跟跟录音模仿至直流利背诵； 象《走遍美国》和《新世纪走遍美国》影视剧教学片，均由专业演员出演，发音含混，语速较快（略慢于普通影视剧），对听力要求较高。想练听力的，不妨不看文本先听一遍，然后反复逐句听清，再对照文本模仿录音；若听力较差，则需要先学习文本，然后再看碟。 象《新世纪走遍美国》字幕有几种模式可选:无字幕，中文字幕，英文字幕，中英文字幕。几种模式均可随时切换。可先不看字幕连续听一遍，第二遍一句暂停一次，先不看字幕模仿出来，然后核对字幕跟读一次，第三遍以后可以直接跟字幕模仿读至流利。最后把字幕关掉再看一遍。如此口语听力都得到练习。<br>如何检验自己对教材的掌握程度呢? 把句型的英文遮住, 对着中文说英文, 再把中文遮住, 对着英文说中文. 能流利做到这两点, 就算过了背诵这一关了.</p><p>三 起步篇 之 我是菜鸟我要飞<br>光是背口语教材是远远不够的，因为你不见得会有那么好运气:每次与人交流时对白都会跟书上一模一样。所以在熟背句型的同时，还要学会如何把这些句型消化吸收，化为己用。 很多人都会说:多开口！其实他们无法想象这对那些从未开口说英语的人来说是多么困难:他们不知道该说什么，有的人会老半天一个字都憋不出，“开口”对他们来说无异于是一种折磨。因此信心屡屡受挫，造成畏难心理。<br>如何才能把所学化为所用呢？复述就是一个好办法。比如自学 《走遍美国》和《新世纪走遍美国》的，可以在学完一节后复述本节内容。也可复述看过的任何文章或电影等。<br>这个过程对有的人会很简单，而有的人就会觉得很难。你让他“用自己的话”来复述，他同样也会老半天憋不出一个字，因为他还没能把所学的句型融会贯通为“自己的话”，这时不要硬来（那样会觉得自己又笨又没用， 更加不想学），要降低难度:选取那些后面附有问题的文章或课文（如新概念2，3），照着问题回答总该会了吧？新概念的问题设计得很合理，把问题答完也就相当于把课文简要复述出来了，而且问题易于回答（都可从文中找到答案，但与原句又不尽相同）。一定要大声回答，光是写在纸上或在脑子里想是远远不够的。<br>这样练习一段时间，逐渐过渡到不须回答问题，但允许看着课文复述；再到不看课文直接用自己的话复述，然后逐渐增加课文难度与长度，限时完成， 一次完成不好就再来一次，直到通顺流利为止。用表计时，就可看到自己的进步。最好录音，那样可以发现自己的错误。当一看完文章就立刻能流利地复述，恭喜你！你已经超额完成起步阶段任务了。</p><p>四 实战篇 之 初试身手<br>句型也背了, 也能用自己的话复述短文了, 现在该走出家门, 到英语角或英语沙龙去试试身手了. 这一阶段的要诀是: 脸皮要厚些, 厚些, 再厚些!!! (难怪baobab学口语快, 天生的好本钱嘛! 真是得天独”厚”啊!!!) 其实，只要你努力地想，一定可以找出表达的方式。大家不妨看厚皮baobab当初是如何操练的: 那时baobab刚刚开始学口语，胆大皮厚，一口破英语就自告奋勇为三位苏格兰朋友充当导游看冰雕。他们问baobab喝的是什么，baobab说“龟苓膏”（不会英文干脆说中文！），又问龟苓膏是什么做的，baobab说“龟板and 茯苓”，解释完茯苓是一种中药以后，龟板就麻烦了，因为baobab忘记tutle怎么说，就只好说: “it is a small animal, live inwater, it has a…..”baobab想说”背后有硬壳“但不知如何用英文表达，只好用手在背后比划，居然他们也猜出了是 tutle！<br>接下来baobab问他们中午吃了什么，他们说“螺蛳粉“（柳州名小吃）。Baobab说自己喜欢炒螺，这下麻烦了，他们问什么是”炒螺“。Baobab只好先说螺蛳:<br>“you know螺蛳粉? it is made of 螺蛳soap。”<br>“soap？！”老外吓了一大跳。baobab知道自己肯定念错了，又不清楚它的发音，只好继续解释:<br>“what is that for english?—–a bowl of water and meat and vegetable?”<br>“oh—-soup.”<br>“螺蛳粉 is made of 螺蛳 soup.”<br>“then what is螺蛳？“（真要命！baobab直冒汗！）<br>“螺蛳is a small animal, lives in water, it has a….(怎么跟刚刚说乌龟差不多？)” 想说”它有个硬壳“又不会说，只好又回到”乌龟“话题上，仨老外全倒！</p><p>这里公开baobab的宿年糗事，不过让大家知道开始说英语时一定会有这个阶段，因此不要去想什么语法, 不要怕自己说错—–如果你总在担心出错, 恐怕你永远也说不出”正确”的英语.<br>As Liyang said ”enjoy losing face!!! The more mistake you make, the more progress you make!!!”<br>鼓起勇气，厚起脸皮，说！说！！说！！！<br>说什么呢？在英语角交新朋友，自然从自我介绍开始: 叫什么名字, 什么专业(工作), 兴趣爱好, 闲暇怎么度过….. (跟相亲差不多! 不妨把它想象成与美女或帅哥相亲!) 同样问题你也可以问你的新朋友, 不时插入些”Why…?” 或”how interesting!” 一旦开了好头, 接下来就顺利了.<br>假如你运气不佳, 到了英语角正碰上大家围着老外或沙龙主持人热烈讨论, 没人理你. 不要傻乎乎地等人家来关照你这个新手(不是没有可能, 但可能会很久, 那样会让你感觉很糟糕). 这时你先找个位子: “Is this seat taken?”(搭讪第一句) 坐下后接着问: ”Excuse me, what’s today’s topic?” (搭讪第二句) 接下来你可以开始听, 可以参与讨论(对新手来说可能有点难), 也可以跟周围的人交换看法.<br>下面谈谈在英语角练口语的一些常见误区:<br>一忌不懂装懂.<br>练口语最忌不懂装懂. 很多人明明没有听懂, 却不好意思让别人重复, 就总在点头微笑. 那样什么也学不到.<br>We learn English for self-improvement, not for showing smiles. 其实没有人会介意, 因为每个人都是从初学者一步一步走过来的，所以都能理解初学者的困难。只要你肯开口问，就一定会得到满意的答案。<br>Baobab到现在还保持这样的习惯:第一次没听清，会说“Pardon？”，还是没听懂，就说“Sorry，but what is …?” , 还不懂就说, “Could you please change another word?”…….一直换到她听懂为止!(看! 脸皮够厚吧?)<br>二忌由始至终查单词.<br>与”不懂装懂”相反, 有的人特认真, 碰到生词不弄清誓不罢休. 于是从一到英语角开始就一直忙着查词典, 记生词一直到离开(因为生词总是层出不穷的), 把英语角当成单词课堂,忘记来英语角的目的是练习的了—–没时间说也没功夫听.<br>那碰到生词怎么办呢? 不是不能不懂装懂吗? 那要看情况了: 如果是集体讨论, 不影响理解大意就继续往下听, 确实有碍理解就问一下旁边的人, 弄懂意思就继续听; 如果是一对一交流, 那就可以请他为你写下来, 最好请他告诉你一个相关句型或造一个句子, 让你明白它的用法. 回到家里再把当天记下的生词整理出来.</p><p>五 实战篇 之 狂练口语班<br>上口语班也是不错的选择: 有老师教授, 有同学交流, 最重要的是它提供了语言环境与氛围。不过假如你运气不佳, 上了一个草台班子(不幸的是，大部分培训班都是骗钱的草台班子—-所以baobab从不花一分钱上任何培训班—-她只会混课!!!) 老师水平很臭, 发音也是烂得一塌糊涂, 同学们也是三天打鱼两天晒网的.这时你也不要气馁. 既然钱都交了, 就算为了这些学费, 你都要学下去. 老师发音糟糕, 就不要跟他学, 跟磁带学好了:同学经常缺课，人少上课，发言的机会就更多了.<br>不过再好的培训班, 你也不要指望每周几个学时的课堂会点石成金。口语班只不过提供一种学习氛围或者说只是让你提高兴趣而已。想要掌握口语，还得多下力气，所谓“功夫在诗外”就是这个道理。<br>首先上课之前一定要预习，最好是先熟记要学的内容。这样在课堂上就可以把学习新句子的时间节省下来练习，课后一定要熟背所学的内容。下面谈一谈课堂练习:<br>我们都知道学口语一定要多练，但在口语班，很多人都不敢开口，这除了口语还不熟练以外，更有可能的是他们不习惯在公众面前发言。李阳的疯狂法之所以有效，是因为他的训练是让学员从在公众面前说话或演讲开始，而一旦能成功地在公众面前发言，自信心就会获得极大的提高，这种成就感会激发更大的学习热情。李阳把学英语与自我激励结合起来，这与卡耐基的训练法则是一致的。（当初卡耐基就是从他的演说班的成功获得启示，才逐步发展出后来的以社交技能为主的成功学教育）<br>但是在没有他人的激励下，自己怎么才能克服这种畏惧心理呢？那只有多作准备了，胸有成竹就没那么胆怯了。<br>当初baobab认识第一位外国朋友david时，每周给他打一次电话。每次打电话前都先参考《实用口语指南》写下要说的内容，自己熟悉几遍才去打电话。每次都很顺利，好几次是他的翻译接的，有次电话结束前他的翻译问baobab“are you an english teacher?” （看baobab能蒙人吧―――准备功夫做足啦！）<br>上口语课前预先把当天要讨论的话题自己先练习几遍，有必要的话可以先写下来。课堂上的即席话题，可以在别人发言时先把自己观点写下来，（刚开始时可能需要写全，逐步过渡到只写要点，最后不需写也可以流利地陈述。）然后在心里念一下，就大胆起来发言吧。<br>归根到底，要争取抓住机会多发言。想想你交的学费吧，沉默一分钟， 就浪费一分钱。练得越多才越划算。想想象baobab之辈一分钱都不交只管混课的无耻之徒都在狂练，你还有什么理由保持沉默呢？<br>七 提高篇:独自练口语<br>练习口语一段时间，当你已经可以比较顺畅地表达自己后，你就会发现在英语角似乎提高不大，就象你跟人打乒乓:如果跟比你水平高的人练，你的水平就会提高；如果跟与你水平一样甚至水平更低的人练，就没什么提高。 这个时候，你就可以试试独自练口语了。<br>呵呵这个方法也是baobab无师自通的:当时在准备演讲比赛，决赛中有个环节是2分钟的即兴演讲。Baobab怕上场结结巴巴，于是自己准备了几十个话题，抄在一张纸上随身携带。 只要有机会就掏出来开讲，掐秒表计时，一遍不好练二遍，直到在规定时间内流利说清为止。（当时给自己规定的时间是一分四十秒，这样习惯后即使上场紧张也不会超过两分钟）可能的话录音听看自己哪个地方还可改进。<br>当时临赛时间紧，baobab只要有机会就会如此旁若无人地大声练习―――无论是在公车上还是在骑车时，一时路人侧目，baobab回头率骤升！甚至baobab在菜市里等待宰鸡杀鸭的闲暇，也会在鸡笼边高声练习，但见“鸡鸭与baobab齐鸣，鹅毛绕baobab一身”。<br>如此疯狂，效果倒还不错:刚开始第一遍都超时，而且结结巴巴错误百出，一个话题要反复练上三四遍才勉强过关；逐渐减少到两遍；最后随便看到话题就可开讲一遍过关。比赛时， baobab即兴演讲完掌声雷动，大家都说是当天最精彩的即兴演讲，还有人专门来找baobab说“你应该去当作家！”<br>吹了半天，现在回正题:如何独自练口语？有以下几个办法，baobab按由易到难顺序排列如下:</p><p>1，  即兴演讲/口头作文。<br>步骤如上所述。跟作文差不多，说明自己所有的观点及理由。最好自己掐表计时并录音校正。<br>其实这个方法非常简单，baobab赛后，在英语角谈起这是练口语的好方法，很多人都觉得太难，baobab当即让一口语新手试，给他话题是friendship，baobab掐表，出乎他意料，他在两分钟内完成了，当即信心大增，呱啦呱啦说个不停（本来一直没什么胆量开口）。（现在回想起来，当时baobab如此试验，也许跟李阳培训班里鼓励学员在公众面前演讲，让学员增强信心有异曲同工之妙）<br>可能有朋友会觉得话题不好找。其实一点不难:英语作文全都可做口头作文，对写作也有好处；报刊杂志话题更是数不胜数。当时baobab在准备比赛，所以大部分选自历届演讲赛，其中有不少好话题，baobab曾提供了其中一些给英语沙龙，很受欢迎。下面baobab提供两个话题，大家不妨现在就开始掐表练习，准备好了吗？开始:<br>your definition of success and why.<br>效果怎样？没有自己想的难吧？<br>除了从书本上找话题，喜欢看英语演讲赛的朋友，不妨在听到即兴演讲题时，先暂停播放，自己先练习，然后听听选手是怎么说的，再暂停自己修正一次。</p><p>2 阅读口译<br>阅读口译是口译基本功。找一本中英对照的书，看着中文口译出来，然后对照原文看看自己有什么地方译得不好，同一篇文章可多练习几遍，反复修改自己的口译。最好录音以校正自己的错误。刚开始可以选用比较简单的材料，根据自己进步不断调整材料的难度。<br>这个方法的好处是，总有书本给你做参考，从比较与反复修正中获得进步。即兴演讲目的是流利表达，阅读口译的目的是表达地道。<br>3 辩论<br>辩论是提高口才的好方法，无论对中文还是英文都是一样的。练习辩论可以使说话富于逻辑性与说服力，也可练习快速反应能力。<br>刚开始，可以选用书本上的辨题自己充当正反方。亚历山大有本《英语辩论技巧》很好，每个辨题都给出正反方的参考意见。大家不妨自己先试着就辨题先充当正方，陈述自己意见后看看书上正方如何说，然后反驳其观点（充当反方）；再看书上反方观点并充当正方反驳其观点；每个辨题可反复练习几次修正，最好每次均计时并录音。 也可选用中文的辩论，如此用英文反驳正反两方观点。最后可将中文辩论做口译练习。<br>这样练习习惯后，便可用英文辩论赛的录音模拟实战了，现以外研社辩论赛为例:<br>听到辨题后暂停录音，自己充当正方一辨做陈述，然后听正方陈述，边记下其要点及漏洞；然后暂停录音，充当反方一辨陈述，再听反方一辨陈述并做相应记录；接下来到自由辩论环节, 先按自己刚才的记录反驳正方，然后听反方的反驳；再反驳反方…..如此循环至总结陈词，自己先充当反方做总结陈词，然后听反方的总结陈词并反驳，再自己做正方的总结陈词，听完正方的总结陈词再反驳。总之，进行角色扮演每个环节都领先一步，并养成边听边做笔记的习惯，自己不满意的部分可以反复修正几次再往下走。<br>这样刚开始会觉得很难，没关系，每个辨题如此反复练习几次，就会越来越好。有全国的顶尖高手陪练，还怕练不好吗？<br>4 口译<br>要想表达地道准确，当然口译教材是最好的选择:从口译教材中能学到很多习语、俚语、术语、谚语、委婉语、略语、诗句等的翻译方法，并且总有书本修正自己。</p><p>现在市面上有很多口译教材，比较权威的有人事部翻译专业资格（水平）考试指定教材《英语口译实务》，上海口译资格证证考试《口译教程》，以及教育部翻译证口译教材。这些书都配有磁带以方便练习口译/听译。<br>口译教材一般结构都为:词汇，课文口译，参考译文，练习。其中，课文口译有对话与语篇，对话的结构为英汉交替，如AB二人对话，A说英文，B答中文，学习时则将A口译成中文，B口译成中文。语篇翻译有英译汉与汉译英，所有课文与练习都有参考译文，因此可以采用口译－回译的方法学习，即口译课文，核对译文，回译译文并对照原文修正。<br>口译教材的学习可用阅读口译与跟录音听译的方法练习，但后者难度更大，因为需要边听边记边译，可复读录音一句一停地练习。无论是阅读口译还是听译，均可用口译－回译的方式学习，同一篇文章可以如此反复练习几次直至熟练正确，最好录音校正自己。<br>电视上常常可以看到新闻发布会的现场口译，baobab很喜欢，边听边自己试着译，然后听听专业口译是如何译的。把新闻发布会录音下来还可反复练习。<br>其实所有看到听到的都可成为口译练习材料，报刊杂志、广告路牌等等，就连听他人闲聊或开会时也在心里做口译，既可打发时间又可提高英语。只要留心，时时处处都可以练习英语。<br>关于学习方法<br>baobab斑竹说得还不够细呀！怎么还有人问题不断？nce1我已经照着听，写，跟读，背的方式完成，前天和隔壁职业学院的外教（拉斯维加斯人）用简单英语聊（武汉二战时期简单的历史，昨晚一起车祸事件，湖北有哪些好玩的地方，在本地衣食出行怎么省钱），偶说的他都听的懂，他也用最简明的话讲，偶一听就明了，语速稍快偶同学就犯迷糊，讲话更是结结巴巴的（他给别人代考四级91分，词汇量8000以上），从职院出来后他有点郁闷。。。同学问偶怎么练的听力口语，偶说是nce1，他完全不信，偶只好详细说了下过程:<br>nce1偶用的是世图版，baobab说的对，的确是bbc播音员朗读，（听写过程就不说了）先对着录音模仿跟读好多遍（最好连语调都模仿到位），然后试着看中文译背，译背熟练后（下面的最重要），由于nce1都是对话，合上书自己想象对话的场景来背，就跟演员背台词一样，第一次会磕碰，慢慢的几次之后脑海里一篇对话如电影场景闪现，同时口中如同字幕一样说出流利的对话，72篇课文就当成是72部小短片好了。  同学听了。。。<br>其实有人说nce1简单要死，可有多少人愿意去练到课文每一句想说都能脱口而出呢？nce2－4册偶会接着学，不想知道结果，只愿享受过程，与滑旱冰，游泳一样，每学会一点都会兴奋，掌握后倒觉得没什么了:）<br>另外，不必执着nce，许国璋等其他教材一样适用，有录音带就行！<br>说了这里，差点忘了跟贴的本意－－向baobab致以崇高的敬意～学英语的动力看了你的贴开始的～</p>]]></content>
      
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巧学千言，聆听万物</title>
      <link href="/2020/03/12/qiao-xue-qian-yan-ling-ting-wan-wu/"/>
      <url>/2020/03/12/qiao-xue-qian-yan-ling-ting-wan-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、巧学千言"><a href="#一、巧学千言" class="headerlink" title="一、巧学千言"></a>一、巧学千言</h1><p>所谓巧学，不是投机取巧的“巧”，而是巧妙的“巧”，就是要用心和认真。</p><p><strong>用心</strong>就是及时分析学习中存在的问题和解决方法，总结成功的经验和失败的教训，用来指导自己的学习，以收到事半功倍之效。</p><p><strong>认真</strong>就是对于学习中遇到的问题要一丝不苟，打破砂锅问到底，直到搞懂为止，以真正提高英语综合水平。</p><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>充分利用工具</p><p>一丝不苟</p><p>处处学，事事学</p><p>总结</p><p>我们天生就会一种语言，母语，又在后来的成长过程中，会遇到形形色色的语言，比如，我们会在学校学习英语，因为英语是全世界使用范围最广的语言；我们会接触到计算机语言，因为我们进入人工智能时代，处处需要和计算机打交道。</p><p>语言就是我们与世界沟通交流的方式，是我们表达自己的方式。从这种角度看来，舞蹈是一种肢体语言，向观众展现姿态美；数学是一种语言，透过数学我们得以与花费千百年建立的数学大厦窥探人类理性的力量……</p><p>我们进入一个领域，需要学习一门语言，和对方取得沟通。比如我们和小朋友交流，不仅要学会童言童语，还要学会儿童的心理语言，他们通过不吃晚饭这种行为向你诉说：“我受委屈了。”；我们和专家沟通，需要对专业有深层次的了解，熟悉常见的词汇。一切皆语言，这是一种懒惰的思想，听起来大而空，可透过这个角度看时间，仿佛走到了《楚门的世界》里的楚门，光芒就在眼前。</p><p>大钧曰，我们需要在生活中巧学千言。首先要构建时代的常识体系。然后要学习谋生的语言，不断钻研。语言之多，穷尽我们的一生也难以学完，我们需要巧学。</p><p><strong>中文</strong>是我们的母语。我们学习语言是为了和万物沟通，在中文里我们可以重点学习如何写作，写作是一种表现力很强的中文沟通方式，可以一对多，一旦成文展示出来以后就可以让很多人与你取得沟通。此外还有大钧曰的曰字所属的文言文。</p><p><em>中文里的文言文是一种语言，我的“钧”字便是古代流传下来的汉字，有</em></p><p><em>钧，三十斤也。——《说文》</em></p><p><em>千钧一发；雷霆万钧</em></p><p><em>独化于陶钧之上。——《史记·邹阳传》</em></p><p><em>大钧播物。——《汉书·贾谊传》</em></p><p><em>钧容直(钧容班。宋代宫廷仪仗中的乐队)；钧天广乐(钧天。神话传说中指天上的音乐)。了解这些是很有意思的一件事。</em></p><p><strong>英语</strong>是我们的第二语言。我们可以重点学习翻译，翻译有口译和笔译，当我们在母语和英语直接来去自如的时候，我们就更懂得了如何用对方的语言讲述自己希望表达的内容，取得更高的效率。</p><p><strong>编程</strong>语言有两种，一种是面向对象OOP的语言，它的世界观是编程等于对象+消息；另外一种是面向过程POP的语言，它的世界观是编程等于数据结构+算法。这里我们先要学习OOP这种语言，以获得万物皆对象的世界观。</p><p>从spc开始，Scratch，Python，C++这三门语言都是面向对象的。面向对象是一种世界观，这个世界里面编程等于对象+消息，说起来面向对象有三个特点：封装，继承和多态，OO发明的时候是为了解决GUI问题，多态才是面向对象的核心要义。那什么是面向对象呢？简单来说，在s里面对象+消息对应下来就是角色+广播。在p里面就是类和对象，在c里面也是类和对象。</p><p>数组：数的组合。</p><p>字典：查询神器</p><p>各种语言我们都可以使用逆向法来学习，逆向法学习很慢，但是成果可视化。</p><h1 id="二、聆听万物"><a href="#二、聆听万物" class="headerlink" title="二、聆听万物"></a>二、聆听万物</h1><p>人与人之间的沟通，聆听是比言语更重要的。它是前提，你必须聆听到，才能言语出。万物皆对象，万物皆有声音，我们需要聆听万物之声，恢复我们的灵性。</p><p>我们首先需要聆听自己内心的声音，</p><p>大钧曰，少言多行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>冰雹猜想</title>
      <link href="/2020/03/11/bing-bao-cai-xiang/"/>
      <url>/2020/03/11/bing-bao-cai-xiang/</url>
      
        <content type="html"><![CDATA[<p>Scratch</p><p>Python</p><p>C++</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一文读懂小鹅通</title>
      <link href="/2020/03/10/yi-wen-du-dong-xiao-e-tong/"/>
      <url>/2020/03/10/yi-wen-du-dong-xiao-e-tong/</url>
      
        <content type="html"><![CDATA[<p><strong>没有天花乱坠的销售话术，小鹅通怎么拿下客户？答案在于“快速响应”和“用解决方案说话”。</strong></p><p>大风起时，选择对所有人而言都是奢侈的，我们不服务这些用户还能做什么？我们只有不撞南墙不回头的冲劲和勇气。未来的事情谁猜想得到？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>疫情之下的求职路</title>
      <link href="/2020/03/10/yi-qing-zhi-xia-de-qiu-zhi-lu/"/>
      <url>/2020/03/10/yi-qing-zhi-xia-de-qiu-zhi-lu/</url>
      
        <content type="html"><![CDATA[<p>如何寻找新的工作呢？</p><p>首先明确自己能提供什么价值。</p><p>其次寻找这部分需要你的公司。</p><p>最后握手。</p><p>简历的撰写能力始终是第一位的，这里面是销售自己的能力，如何通过短短的一页纸来展示自己。总想通过花钱解决是逃避式的简单粗暴处理方法，最了解自己的还是自己，得去认真反思自己，去查看自己的优点与缺点。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用确定性对抗迷茫</title>
      <link href="/2020/03/07/li-yong-que-ding-xing-dui-kang-mi-mang/"/>
      <url>/2020/03/07/li-yong-que-ding-xing-dui-kang-mi-mang/</url>
      
        <content type="html"><![CDATA[<p>我是不太愿意写这种文章的，何况现在还是深夜，该睡觉的时候却不睡觉，总是不好。但有时候，人确实就是处于这一种状态，我无法否认。</p><p>现在说说我为什么迷茫，今天打扫卫生的时候我就觉得，怎么自己又陷入迷茫状态了？很快自己转念一想，也许并不是又陷入而是一直处于迷茫的状态，迷茫也许本来就与我们相伴。</p><p>我写文章不喜欢太长，主题是迷茫了应该怎么办？有很多现存的答案并不适用于我们，因此需要创新性的探究。</p><p>朋友有一句话说的很对。不要看他说了什么，而要看他做了什么。我想我应该去做一些更加精确的事情，来对抗我的迷茫，然后把剩下的交给时间。</p><p>在语言领域，针对English 这门语言，我需要重新利用踏踏实实学英语的逆向学习法对Special English进行深入的研究。针对programming这门语言，我选择Scratch的Pen、Python的Turtle、C++的WebGoC这三门语言的画图工具结合教学这一个细分的领域进行深入研究。</p><p>在运动领域，我要日常进行300练习，即一百个俯卧撑，一百个仰卧起坐和一百个深蹲练习，针对全马PB330和跳绳2000进行深入练习。</p><p>在读书领域，我要读一流书，针对《一流书单》进行研读。</p><p>在写作领域，有两点，一点是一流书单的读书笔记，另外一点是知乎答题。</p><p>那么首当其冲的问题就是继续细分。</p><p><img src="http://q6lsd5k7n.bkt.clouddn.com/%E4%B8%93%E4%B8%9A%E4%B8%BB%E4%B9%89.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈学习</title>
      <link href="/2020/03/05/tan-tan-xue-xi/"/>
      <url>/2020/03/05/tan-tan-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>读一流书系列</title>
      <link href="/2020/03/05/du-yi-liu-shu-xi-lie/"/>
      <url>/2020/03/05/du-yi-liu-shu-xi-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="读书只读一流的书"><a href="#读书只读一流的书" class="headerlink" title="读书只读一流的书"></a>读书只读一流的书</h1><p>偶然的一天，我刷公众号的时候看到了一篇文章，点进去看了里面分享的视频，说到新东方的王强老师读一流书的心得，我深以为然。</p><p><strong>怎样塑造生命的东西，使得我们对知识的渴望超过一切。</strong></p><p>现代社会大家都很浮躁，也许是我们对如此快速发展的现代经济没有准备，大部分人被打的措手不及。趁着这次疫情，我想会有一部分人真正冷静下来，开始反思自己的生活。</p><p>我真正要开始专心读书，可是读什么书呢？怎么读呢？什么时候读呢？不想读的时候怎么办呢？读书笔记怎么做呢？这都是问题，其实也很好回答。</p><p>我们每个人都对读书的本质有不同的认识，有的为功利，有的为心安，有的为解惑。我认为读书就是简单的生活方式，你可以选择，也可以不选择，就像坚持运动，坚持早睡早起一样，都是一种健康的生活方式。真正值得我智力投入、值得我尊重、花费我精力的大概就是这两大类。我觉得读书一定要读一流的书，做人一定要做一流的人。读书真正对读者产生作用的时候，就是读者和真正的生命融汇在一起的时候。</p><p>现在我们生活在信息的海洋里，也算人生有幸，但是要接受的信息太多了。那么什么样的书该读呢？我读书的选择是这样的：畅销书坚决不读，不是我看不起畅销书，而是我知道生命有限，只能读人类历史上大浪淘沙的作品。</p><p>我所读的作品的创作年代越来越早，因为我觉得越是早期的人，他们写下的文字越是生命的写照。</p><p>读一流的书就要衡量这个作家进入书前的状态是什么。他是为满足市场的需要而写，还是倾其鲜血、生命和经历而写。如果你读的不是真文字，遇到的不是真语言，那么最后见到的也一定是虚幻的世界，不是真实的世界。</p><p>读书真正对读者产生作用的时候，就是读者和真正的生命融汇在一起的时候。千百年来，没有被淘汰的著作是人类一代又一代人选择的结果，而不是现在市场的选择，更不是广告词的选择，这是非常关键的。</p><p>为什么读经典能改变我们的生命呢？文学的功能是什么？在我看来，文学的功能就是：真正有力量的文字，一定能够对我们的审美进行奇异的再造，在我们对“真善美”的追求上有奇异的启示，有充电的感觉。</p><p>所以那些人类最高的价值，真的、善的、美的东西就会融入我们的血液。一旦人的身体里有这三样东西，在现实社会中就不会轻易被世俗的、流行的、暂时的甚至非常糟糕的价值观扭转。</p><p>读那些经典的、人类熟悉的甚至很多人因为追求时髦而不屑一读的文字吧。这些文字使我们对生命、审美、真理、语言与世界的关系有了更直接的感觉。我认为我人生最大的捷径就是，用时间和生命阅读和拥抱了世上一流的书。</p><p>一流不是意味着思想绝对超前，而是一个作家的文字状态有多么纯粹。</p><h1 id="什么是一流书呢？"><a href="#什么是一流书呢？" class="headerlink" title="什么是一流书呢？"></a>什么是一流书呢？</h1><p>一手书。不读翻译过来的。</p><p>一流译作。翻译是对原书的再造，超越原书，值得一读。</p><p>创作年代早。经过时间的检验。</p><p>宗教，神学，哲学，历史，心理，文学，</p><p>科学领域</p><h1 id="不读什么"><a href="#不读什么" class="headerlink" title="不读什么"></a>不读什么</h1><p>畅销书</p><p>中国的典籍</p><p>悲惨世界</p>]]></content>
      
      
      <categories>
          
          <category> 读一流书系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生活中的实用Python（三）</title>
      <link href="/2020/03/04/sheng-huo-zhong-de-shi-yong-python-san/"/>
      <url>/2020/03/04/sheng-huo-zhong-de-shi-yong-python-san/</url>
      
        <content type="html"><![CDATA[<p>去</p>]]></content>
      
      
      <categories>
          
          <category> 生活中的实用编程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活中的实用Python（二）</title>
      <link href="/2020/03/04/sheng-huo-zhong-de-shi-yong-python-er/"/>
      <url>/2020/03/04/sheng-huo-zhong-de-shi-yong-python-er/</url>
      
        <content type="html"><![CDATA[<h1 id="用turtle画任何东西"><a href="#用turtle画任何东西" class="headerlink" title="用turtle画任何东西"></a>用turtle画任何东西</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> turtle <span class="token keyword">as</span> te<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> argparse  <span class="token comment" spellcheck="true">#argparse命令行参数解析包</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">import</span> os<span class="token keyword">from</span> win32<span class="token punctuation">.</span>win32api <span class="token keyword">import</span> GetSystemMetrics<span class="token comment" spellcheck="true">#GetSystemMetrics只有一个参数，称之为「索引」，这个索引有75个标识符，可以获取系统分辨率、窗体显示区域的宽度和高度、滚动条的宽度和高度。</span>WriteStep <span class="token operator">=</span> <span class="token number">15</span>  <span class="token comment" spellcheck="true"># 贝塞尔函数的取样次数</span>Speed <span class="token operator">=</span> <span class="token number">1000</span>Width <span class="token operator">=</span> <span class="token number">600</span>  <span class="token comment" spellcheck="true"># 界面宽度</span>Height <span class="token operator">=</span> <span class="token number">600</span>  <span class="token comment" spellcheck="true"># 界面高度</span>Xh <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 记录前一个贝塞尔函数的手柄</span>Yh <span class="token operator">=</span> <span class="token number">0</span>scale <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>first <span class="token operator">=</span> <span class="token boolean">True</span>K <span class="token operator">=</span> <span class="token number">32</span><span class="token keyword">def</span> <span class="token function">Bezier</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 一阶贝塞尔函数</span>    <span class="token keyword">return</span> p1 <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">+</span> p2 <span class="token operator">*</span> t<span class="token keyword">def</span> <span class="token function">Bezier_2</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 二阶贝塞尔函数</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> WriteStep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span>                   Bezier<span class="token punctuation">(</span>x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span>        y <span class="token operator">=</span> Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span>                   Bezier<span class="token punctuation">(</span>y2<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span>        te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Bezier_3</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> x4<span class="token punctuation">,</span> y4<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 三阶贝塞尔函数</span>    x1 <span class="token operator">=</span> <span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x1    y1 <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y1    x2 <span class="token operator">=</span> <span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x2    y2 <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y2    x3 <span class="token operator">=</span> <span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x3    y3 <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y3    x4 <span class="token operator">=</span> <span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x4    y4 <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y4  <span class="token comment" spellcheck="true"># 坐标变换</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> WriteStep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> Bezier<span class="token punctuation">(</span>x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span>                   Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> Bezier<span class="token punctuation">(</span>x3<span class="token punctuation">,</span> x4<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span>        y <span class="token operator">=</span> Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> Bezier<span class="token punctuation">(</span>y2<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span>                   Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>y2<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> Bezier<span class="token punctuation">(</span>y3<span class="token punctuation">,</span> y4<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span>        te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Moveto</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 移动到svg坐标下（x，y）</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">,</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Moveto_r</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">:</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>te<span class="token punctuation">.</span>xcor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> dx<span class="token punctuation">,</span> te<span class="token punctuation">.</span>ycor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> dy<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">line</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 连接svg坐标下两点</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x1<span class="token punctuation">,</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y1<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x2<span class="token punctuation">,</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y2<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Lineto_r</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 连接当前点和相对坐标（dx，dy）的点</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>te<span class="token punctuation">.</span>xcor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> dx<span class="token punctuation">,</span> te<span class="token punctuation">.</span>ycor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> dy<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Lineto</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 连接当前点和svg坐标下（x，y）</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">,</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Curveto</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 三阶贝塞尔曲线到（x，y）</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    X_now <span class="token operator">=</span> te<span class="token punctuation">.</span>xcor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Width <span class="token operator">/</span> <span class="token number">2</span>    Y_now <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> te<span class="token punctuation">.</span>ycor<span class="token punctuation">(</span><span class="token punctuation">)</span>    Bezier_3<span class="token punctuation">(</span>X_now<span class="token punctuation">,</span> Y_now<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token keyword">global</span> Xh    <span class="token keyword">global</span> Yh    Xh <span class="token operator">=</span> x <span class="token operator">-</span> x2    Yh <span class="token operator">=</span> y <span class="token operator">-</span> y2<span class="token keyword">def</span> <span class="token function">Curveto_r</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 三阶贝塞尔曲线到相对坐标（x，y）</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    X_now <span class="token operator">=</span> te<span class="token punctuation">.</span>xcor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Width <span class="token operator">/</span> <span class="token number">2</span>    Y_now <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> te<span class="token punctuation">.</span>ycor<span class="token punctuation">(</span><span class="token punctuation">)</span>    Bezier_3<span class="token punctuation">(</span>X_now<span class="token punctuation">,</span> Y_now<span class="token punctuation">,</span> X_now <span class="token operator">+</span> x1<span class="token punctuation">,</span> Y_now <span class="token operator">+</span> y1<span class="token punctuation">,</span>             X_now <span class="token operator">+</span> x2<span class="token punctuation">,</span> Y_now <span class="token operator">+</span> y2<span class="token punctuation">,</span> X_now <span class="token operator">+</span> x<span class="token punctuation">,</span> Y_now <span class="token operator">+</span> y<span class="token punctuation">)</span>    <span class="token keyword">global</span> Xh    <span class="token keyword">global</span> Yh    Xh <span class="token operator">=</span> x <span class="token operator">-</span> x2    Yh <span class="token operator">=</span> y <span class="token operator">-</span> y2<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>w_attr<span class="token punctuation">)</span><span class="token punctuation">:</span>    funcs <span class="token operator">=</span> w_attr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> func <span class="token keyword">in</span> funcs<span class="token punctuation">:</span>        func_name <span class="token operator">=</span> func<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> func<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> func_name <span class="token operator">==</span> <span class="token string">'scale'</span><span class="token punctuation">:</span>            <span class="token keyword">global</span> scale            scale <span class="token operator">=</span> <span class="token punctuation">(</span>float<span class="token punctuation">(</span>func<span class="token punctuation">[</span>func<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token operator">-</span>float<span class="token punctuation">(</span>func<span class="token punctuation">[</span>func<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">readPathAttrD</span><span class="token punctuation">(</span>w_attr<span class="token punctuation">)</span><span class="token punctuation">:</span>    ulist <span class="token operator">=</span> w_attr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ulist<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print("now cmd:", i)</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">or</span> i<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> float<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> float<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> float<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> float<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawSVG</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> w_color<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> first    SVGFile <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    SVG <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>SVGFile<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    Height <span class="token operator">=</span> float<span class="token punctuation">(</span>SVG<span class="token punctuation">.</span>svg<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    Width <span class="token operator">=</span> float<span class="token punctuation">(</span>SVG<span class="token punctuation">.</span>svg<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    transform<span class="token punctuation">(</span>SVG<span class="token punctuation">.</span>g<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'transform'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> first<span class="token punctuation">:</span>        te<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>height<span class="token operator">=</span>Height<span class="token punctuation">,</span> width<span class="token operator">=</span>Width<span class="token punctuation">)</span>        te<span class="token punctuation">.</span>setworldcoordinates<span class="token punctuation">(</span><span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> Width <span class="token operator">-</span>                               Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span>Height <span class="token operator">+</span> <span class="token number">300</span><span class="token punctuation">)</span>        first <span class="token operator">=</span> <span class="token boolean">False</span>    te<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>speed<span class="token punctuation">(</span>Speed<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>color<span class="token punctuation">(</span>w_color<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> SVG<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        attr <span class="token operator">=</span> i<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span>        f <span class="token operator">=</span> readPathAttrD<span class="token punctuation">(</span>attr<span class="token punctuation">)</span>        lastI <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>                te<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>                Moveto<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                te<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'m'</span><span class="token punctuation">:</span>                te<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>                Moveto_r<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                te<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>                Curveto<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                lastI <span class="token operator">=</span> i            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">:</span>                Curveto_r<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                lastI <span class="token operator">=</span> i            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">:</span>                Lineto<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'l'</span><span class="token punctuation">:</span>                Lineto_r<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                lastI <span class="token operator">=</span> i            <span class="token keyword">elif</span> lastI <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>                Curveto<span class="token punctuation">(</span>i <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> lastI <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">:</span>                Curveto_r<span class="token punctuation">(</span>i <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> lastI <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">:</span>                Lineto<span class="token punctuation">(</span>i <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> lastI <span class="token operator">==</span> <span class="token string">'l'</span><span class="token punctuation">:</span>                Lineto_r<span class="token punctuation">(</span>i <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    SVGFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawBitmap</span><span class="token punctuation">(</span>w_image<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'减少了颜色…'</span><span class="token punctuation">)</span>    Z <span class="token operator">=</span> w_image<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 转换为np.float32</span>    Z <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span>Z<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义 迭代终止准则, 需要的聚类的数量(K) 和使用KMeans聚类函数()</span>    criteria <span class="token operator">=</span> <span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>TERM_CRITERIA_EPS<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> K    ret<span class="token punctuation">,</span> label<span class="token punctuation">,</span> center <span class="token operator">=</span> cv2<span class="token punctuation">.</span>kmeans<span class="token punctuation">(</span>Z<span class="token punctuation">,</span> K<span class="token punctuation">,</span> None<span class="token punctuation">,</span> criteria<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>KMEANS_RANDOM_CENTERS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 现在转换回uint8，并导出原始图像</span>    center <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span>center<span class="token punctuation">)</span>    res <span class="token operator">=</span> center<span class="token punctuation">[</span>label<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> res<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>w_image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    no <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> center<span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\rDrawing: %.2f%% ['</span> <span class="token operator">%</span> <span class="token punctuation">(</span>            no <span class="token operator">/</span> K <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#'</span> <span class="token operator">*</span> no <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">*</span> <span class="token punctuation">(</span>K <span class="token operator">-</span> no<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">)</span>        no <span class="token operator">+=</span> <span class="token number">1</span>        res2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>inRange<span class="token punctuation">(</span>res<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        res2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_not<span class="token punctuation">(</span>res2<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'.tmp.bmp'</span><span class="token punctuation">,</span> res2<span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'potrace.exe .tmp.bmp -s --flat'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用potrace工具将位图转换为矢量图形</span>        <span class="token comment" spellcheck="true"># print(i)</span>        drawSVG<span class="token punctuation">(</span><span class="token string">'.tmp.svg'</span><span class="token punctuation">,</span> <span class="token string">'#%02x%02x%02x'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'.tmp.bmp'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'.tmp.svg'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n\r完成后，关闭窗口退出。'</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    paser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>        description<span class="token operator">=</span><span class="token string">"将位图转换为SVG并使用turtle libray来绘制它。"</span><span class="token punctuation">)</span>    paser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span>                       help<span class="token operator">=</span><span class="token string">'该文件(*.jpg, *.png, *.bmp) 要转换的文件的名称。'</span><span class="token punctuation">)</span>    paser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"--color"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"你想要画多少种颜色。(如果数字太大，程序可能会很慢。)有32、64种"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> paser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    K <span class="token operator">=</span> args<span class="token punctuation">.</span>color    <span class="token keyword">try</span><span class="token punctuation">:</span>        bitmapFile <span class="token operator">=</span> open<span class="token punctuation">(</span>args<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>__file__ <span class="token operator">+</span> <span class="token string">': 错误:文件不存在。'</span><span class="token punctuation">)</span>        quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>args<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span> <span class="token string">'.bmp'</span><span class="token punctuation">,</span> <span class="token string">'.png'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>__file__ <span class="token operator">+</span> <span class="token string">': 错误:该文件不是位图文件。'</span><span class="token punctuation">)</span>        quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    bitmap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>args<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>    <span class="token keyword">if</span> bitmap<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> GetSystemMetrics<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bitmap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>bitmap<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>            <span class="token punctuation">(</span>GetSystemMetrics<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">/</span> bitmap<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GetSystemMetrics<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    drawBitmap<span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python draw_anything.py [xxxx].jpg即可运行</p>]]></content>
      
      
      <categories>
          
          <category> 生活中的实用编程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用C++只要两大步就画好正方形的方法，你确定不来试试吗？</title>
      <link href="/2020/03/03/c-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/"/>
      <url>/2020/03/03/c-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>//准备工作<img src="http://q6mgt5ib5.bkt.clouddn.com/C%2B%2B%E7%94%BB%E6%AD%A3%E6%96%B9%E5%BD%A2.png" alt></p><p>void initialize()<br>    {<br>        pen.cls();<br>        pen.showXY(100, 1, 2);<br>        pen.up();<br>        pen.moveTo(-150, -150);<br>        pen.setAngle(90);<br>        pen.down();<br>    }</p><h1 id="画正方形"><a href="#画正方形" class="headerlink" title="画正方形"></a>画正方形</h1><p>//画正方形<img src="http://q6mgt5ib5.bkt.clouddn.com/C%2B%2B%E7%94%BB%E6%AD%A3%E6%96%B9%E5%BD%A2%E6%88%90%E5%8A%9F.png" alt><br>void draw_square()<br>{<br>    pen.fd(300);<br>    pen.lt(90);<br>    pen.fd(300);<br>    pen.lt(90);<br>    pen.fd(300);<br>    pen.lt(90);<br>    pen.fd(300);<br>    pen.lt(90);<br>}</p><p>int main()<br>{<br>    initialize();<br>    draw_square();<br>    return 0;<br>}</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Python只要两大步就画好正方形的方法，你确定不来试试吗？</title>
      <link href="/2020/03/03/python-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/"/>
      <url>/2020/03/03/python-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p><img src="http://q6mgnrzz2.bkt.clouddn.com/Python%E7%94%BB%E6%AD%A3%E6%96%B9%E5%BD%A2.png" alt></p><p><code>import turtle as t</code><br><code>t.clear()</code><br><code>t.screensize(480,360)</code><br><code>t.pu()</code><br><code>t.goto(-150, -150)</code><br><code>t.pd()</code></p><h1 id="画正方形"><a href="#画正方形" class="headerlink" title="画正方形"></a>画正方形</h1><p><img src="http://q6mgnrzz2.bkt.clouddn.com/python%E7%94%BB%E6%AD%A3%E6%96%B9%E5%BD%A2%E6%88%90%E5%8A%9F.png" alt></p><p><code>t.title(&quot;画正方形&quot;)</code><br><code>t.forward(300)</code><br><code>t.left(90)</code><br><code>t.forward(300)</code><br><code>t.left(90)</code><br><code>t.forward(300)</code><br><code>t.left(90)</code><br><code>t.forward(300)</code><br><code>t.left(90)</code><br><code>t.done()</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具系列</title>
      <link href="/2020/03/03/gong-ju-xi-lie/"/>
      <url>/2020/03/03/gong-ju-xi-lie/</url>
      
        <content type="html"><![CDATA[<p>工具就像我们手里的武器，工欲善其事，必先利其器，让我们准备好我们的工具踏上战场。</p><h4 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h4><p>马拉松pb</p><p>读一流书、做笔记和写作</p><p>少儿编程</p><h4 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h4><p>番茄ToDo</p><h4 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h4><p>To Do</p><h3 id="学习流水线"><a href="#学习流水线" class="headerlink" title="学习流水线"></a>学习流水线</h3><p>方法—逆向法重出江湖</p><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>Marginnote</p><h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><p>Xmind—发散思维</p><p>GoodNotes—电子记录</p><p>Evernote—电子记录</p><h4 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h4><p>Anki的极致记忆</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《信息学奥赛一本通》_算法</title>
      <link href="/2020/03/02/xin-xi-xue-ao-sai-yi-ben-tong-suan-fa/"/>
      <url>/2020/03/02/xin-xi-xue-ao-sai-yi-ben-tong-suan-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 《信息学奥赛一本通》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《信息学奥赛一本通》_程序</title>
      <link href="/2020/03/02/xin-xi-xue-ao-sai-yi-ben-tong-cheng-xu/"/>
      <url>/2020/03/02/xin-xi-xue-ao-sai-yi-ben-tong-cheng-xu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 《信息学奥赛一本通》 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》_第6单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-6-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-6-dan-yuan/</url>
      
        <content type="html"><![CDATA[<p>###### </p><h3 id="第-6单元指针、类-323"><a href="#第-6单元指针、类-323" class="headerlink" title="第 6单元指针、类 323"></a>第 6单元指针、类 323</h3><h6 id="第-80课今雨新知—地址与指针-324"><a href="#第-80课今雨新知—地址与指针-324" class="headerlink" title="第 80课今雨新知—地址与指针      324"></a>第 80课今雨新知—地址与指针      324</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token operator">*</span><span class="token operator">/</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//定义一个指针变量p，p将指向一个内存单元。 *是指针操作符 </span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//&amp;取地址操作符 </span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//--------------------------------</span><span class="token comment" spellcheck="true">//10.</span><span class="token comment" spellcheck="true">//--------------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-81课民主选举—指针与数组-327"><a href="#第-81课民主选举—指针与数组-327" class="headerlink" title="第 81课民主选举—指针与数组      327"></a>第 81课民主选举—指针与数组      327</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MAX<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//候选人的人数</span><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">do</span>     <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">':'</span><span class="token punctuation">;</span>      cin<span class="token operator">>></span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">></span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>MAX<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>n <span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//a[0]统计弃权的票数</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入实到人数："</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>a<span class="token punctuation">;</span>p<span class="token operator">&lt;=</span><span class="token punctuation">(</span>a<span class="token operator">+</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token operator">*</span>p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     p<span class="token operator">=</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指针变量p重新指向数组首元素</span>  <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>MAX<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"弃权:"</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"号票数:"</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-82课编程是一门艺术—类与对象-331"><a href="#第-82课编程是一门艺术—类与对象-331" class="headerlink" title="第 82课编程是一门艺术—类与对象  331"></a>第 82课编程是一门艺术—类与对象  331</h6><p>#include <iostream><br>using namespace std;<br>/*<br> 第80课，今雨新知<br>  –地址与指针<br>  定义整型变量，在编译的时候，系统会开辟一块内存单元用来存放变量的值，<br>  对变量的存取操作就是直接到这个内存单元存取。<br>  内存单元的位置叫：地址<br>  存放a的值的地址可以用取地址操作符&amp;，对a运算得到：&amp;a<br>  在dev-c++中，为整形变量分配4个字节。 </iostream></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 第81课，民主选举   --指针与数组  */</span> <span class="token keyword">const</span> <span class="token keyword">int</span> MAX <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//候选人的人数 </span><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">></span> MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>MAX<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//a[0]统计弃权的票数</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入实到人数："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>a<span class="token punctuation">;</span> p<span class="token operator">&lt;=</span><span class="token punctuation">(</span>a<span class="token operator">+</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> a<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//指针变量p重新指向数组首元素</span>    <span class="token function">count</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>MAX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"弃权："</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" 号票数： "</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//--------------------------------</span><span class="token comment" spellcheck="true">//请输入实到人数：010</span><span class="token comment" spellcheck="true">//1:3</span><span class="token comment" spellcheck="true">//2:4</span><span class="token comment" spellcheck="true">//3:5</span><span class="token comment" spellcheck="true">//4:3</span><span class="token comment" spellcheck="true">//5:2</span><span class="token comment" spellcheck="true">//6:1</span><span class="token comment" spellcheck="true">//7:4</span><span class="token comment" spellcheck="true">//8:5</span><span class="token comment" spellcheck="true">//9:5</span><span class="token comment" spellcheck="true">//10:3</span><span class="token comment" spellcheck="true">//弃权：0</span><span class="token comment" spellcheck="true">//1 号票数： 1</span><span class="token comment" spellcheck="true">//2 号票数： 1</span><span class="token comment" spellcheck="true">//3 号票数： 3</span><span class="token comment" spellcheck="true">//4 号票数： 2</span><span class="token comment" spellcheck="true">//5 号票数： 3</span><span class="token comment" spellcheck="true">//--------------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="拓展阅读：求伯君-335"><a href="#拓展阅读：求伯君-335" class="headerlink" title="拓展阅读：求伯君   335"></a>拓展阅读：求伯君   335</h6><h6 id="参考答案（下册）-337"><a href="#参考答案（下册）-337" class="headerlink" title="参考答案（下册）  337"></a>参考答案（下册）  337</h6><h6 id="参考文献-340"><a href="#参考文献-340" class="headerlink" title="参考文献    340"></a>参考文献    340</h6><h6 id="附录A-字符集-341"><a href="#附录A-字符集-341" class="headerlink" title="附录A 字符集    341"></a>附录A 字符集    341</h6><h6 id="附录B-奖励积分卡—比特童币-342-language"><a href="#附录B-奖励积分卡—比特童币-342-language" class="headerlink" title="附录B 奖励积分卡—比特童币       342```language"></a>附录B 奖励积分卡—比特童币       342```language</h6><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 《小学生C++趣味编程》系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》_第5单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-5-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-5-dan-yuan/</url>
      
        <content type="html"><![CDATA[<p>###### </p><h3 id="第-7单元函数-287"><a href="#第-7单元函数-287" class="headerlink" title="第 7单元函数    287"></a>第 7单元函数    287</h3><pre class="line-numbers language-language"><code class="language-language"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="第-71课一见如故—函数-288"><a href="#第-71课一见如故—函数-288" class="headerlink" title="第 71课一见如故—函数   288"></a>第 71课一见如故—函数   288</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> geshu<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>geshu<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"*"</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> n<span class="token punctuation">;</span>       cout<span class="token operator">&lt;&lt;</span><span class="token string">"лл╩§Б║"</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">show</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-72课函数与最大值—局部变量与全局变量-293"><a href="#第-72课函数与最大值—局部变量与全局变量-293" class="headerlink" title="第 72课函数与最大值—局部变量与全局变量       293"></a>第 72课函数与最大值—局部变量与全局变量       293</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//全局变量，此位置后面的函数都可以使用它</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  ans<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-73课丑数—函数的应用-297"><a href="#第-73课丑数—函数的应用-297" class="headerlink" title="第 73课丑数—函数的应用 297"></a>第 73课丑数—函数的应用 297</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">choushu</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   cout<span class="token operator">&lt;&lt;</span><span class="token string">"个数："</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">choushu</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    n<span class="token operator">/</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    n<span class="token operator">/</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    n<span class="token operator">/</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">choushu</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>          num<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>   cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"个数："</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第74课哥德巴赫猜想—函数的应用-300"><a href="#第74课哥德巴赫猜想—函数的应用-300" class="headerlink" title="第74课哥德巴赫猜想—函数的应用  300"></a>第74课哥德巴赫猜想—函数的应用  300</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sushu</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sushu</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sushu</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">'='</span><span class="token operator">&lt;&lt;</span>j<span class="token operator">&lt;&lt;</span><span class="token string">'+'</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">-</span>j<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"验证失败！"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-75课第-n个大的数—数组名作为实参-304"><a href="#第-75课第-n个大的数—数组名作为实参-304" class="headerlink" title="第 75课第 n个大的数—数组名作为实参  304"></a>第 75课第 n个大的数—数组名作为实参  304</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">maxn</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">bool</span> p<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span>num<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    x<span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span>m<span class="token number">-1</span><span class="token punctuation">)</span>       p<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>n<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token function">maxn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数组名作为实参</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-76课猜猜乐—二分法查找-308"><a href="#第-76课猜猜乐—二分法查找-308" class="headerlink" title="第 76课猜猜乐—二分法查找        308"></a>第 76课猜猜乐—二分法查找        308</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> high<span class="token punctuation">,</span>low<span class="token punctuation">;</span>  high<span class="token operator">=</span>len<span class="token number">-1</span><span class="token punctuation">;</span>  low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> mid<span class="token operator">=</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>high<span class="token operator">>=</span>low<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    mid<span class="token operator">=</span><span class="token punctuation">(</span>high<span class="token operator">+</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>key<span class="token punctuation">)</span>      <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>key<span class="token punctuation">)</span>           high<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>                  <span class="token keyword">else</span>            low<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>max<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>n<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">search</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>max<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>     cout<span class="token operator">&lt;&lt;</span><span class="token string">"成功！"</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"失败！"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-77课交作业啦—递归算法-312"><a href="#第-77课交作业啦—递归算法-312" class="headerlink" title="第 77课交作业啦—递归算法        312"></a>第 77课交作业啦—递归算法        312</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span>                      </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token function">zuoye</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token function">zuoye</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cout<span class="token operator">&lt;&lt;</span><span class="token function">zuoye</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-78课通力合作的-100个数—递归算法及子函数的声明-316"><a href="#第-78课通力合作的-100个数—递归算法及子函数的声明-316" class="headerlink" title="第 78课通力合作的 100个数—递归算法及子函数的声明      316"></a>第 78课通力合作的 100个数—递归算法及子函数的声明      316</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>  <span class="token function">show</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">show</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-79课谁是老大—递归求最大值-319"><a href="#第-79课谁是老大—递归求最大值-319" class="headerlink" title="第 79课谁是老大—递归求最大值    319"></a>第 79课谁是老大—递归求最大值    319</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> t<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    t<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">></span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>      t<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      t<span class="token operator">=</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//为了便于理解，a[0]不用。</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入5个数："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"最大的数是："</span><span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="拓展阅读：世界上第一个微处理器-322"><a href="#拓展阅读：世界上第一个微处理器-322" class="headerlink" title="拓展阅读：世界上第一个微处理器 322"></a>拓展阅读：世界上第一个微处理器 322</h6>]]></content>
      
      
      <categories>
          
          <category> 《小学生C++趣味编程》系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》_第4单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-4-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-4-dan-yuan/</url>
      
        <content type="html"><![CDATA[<p>###### </p><h3 id="第-6单元数组-24"><a href="#第-6单元数组-24" class="headerlink" title="第 6单元数组    24"></a>第 6单元数组    24</h3><pre class="line-numbers language-language"><code class="language-language"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="第-61课查分程序—数组-244"><a href="#第-61课查分程序—数组-244" class="headerlink" title="第 61课查分程序—数组   244"></a>第 61课查分程序—数组   244</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>i<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//为了使用a[5]</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"号成绩:"</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"输入学号1-5:"</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"输入的学号不存在！"</span><span class="token punctuation">;</span>   <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-62课捉迷藏—数组越界-248"><a href="#第-62课捉迷藏—数组越界-248" class="headerlink" title="第 62课捉迷藏—数组越界 248"></a>第 62课捉迷藏—数组越界 248</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">bool</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> i<span class="token punctuation">,</span>cishu<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  cishu<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cishu<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    i<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">+</span>cishu<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>     cishu<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-63课老鹰捉小鸡—循环移位-252"><a href="#第-63课老鹰捉小鸡—循环移位-252" class="headerlink" title="第 63课老鹰捉小鸡—循环移位      252"></a>第 63课老鹰捉小鸡—循环移位      252</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出第1次的位置</span>  i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">":  "</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>      cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//移动位置</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出位置</span>    cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">":  "</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-64课跳绳比赛—排序-256"><a href="#第-64课跳绳比赛—排序-256" class="headerlink" title="第 64课跳绳比赛—排序   256"></a>第 64课跳绳比赛—排序   256</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"输入5个整数:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>                                       t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>  <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-65课采访报道—字符数组的输入与输出-261"><a href="#第-65课采访报道—字符数组的输入与输出-261" class="headerlink" title="第 65课采访报道—字符数组的输入与输出 261"></a>第 65课采访报道—字符数组的输入与输出 261</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>num<span class="token punctuation">,</span>numa<span class="token punctuation">;</span>   num<span class="token operator">=</span>numa<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   cout<span class="token operator">&lt;&lt;</span><span class="token string">"字符个数 ："</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   cout<span class="token operator">&lt;&lt;</span><span class="token string">".的个数："</span><span class="token operator">&lt;&lt;</span>numa<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-66课恺撒加密术—字符串的输入与输出-265"><a href="#第-66课恺撒加密术—字符串的输入与输出-265" class="headerlink" title="第 66课恺撒加密术—字符串的输入与输出 265"></a>第 66课恺撒加密术—字符串的输入与输出 265</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> s<span class="token punctuation">;</span>  string str1<span class="token punctuation">,</span>str2<span class="token punctuation">;</span>  <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  str2<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//str1.szie()返回str1中字符个数</span>  <span class="token punctuation">{</span>        s<span class="token operator">=</span>str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>s<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>s<span class="token operator">>=</span><span class="token string">'A'</span><span class="token operator">&amp;&amp;</span>s<span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>       s<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">></span><span class="token string">'Z'</span><span class="token operator">&amp;&amp;</span>s<span class="token operator">&lt;</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token operator">||</span>s<span class="token operator">></span><span class="token string">'z'</span><span class="token punctuation">)</span>        s<span class="token operator">-</span><span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str2<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">;</span>   <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>str2<span class="token punctuation">;</span>  <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-67课快速求素数—筛选法-269"><a href="#第-67课快速求素数—筛选法-269" class="headerlink" title="第 67课快速求素数—筛选法        269"></a>第 67课快速求素数—筛选法        269</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span> </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>num<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>   i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   <span class="token keyword">do</span>  <span class="token punctuation">{</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token operator">/</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>i<span class="token operator">*</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>       num<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"100以内素数个数："</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-68课谁大谁小—逻辑判断与推理-273"><a href="#第-68课谁大谁小—逻辑判断与推理-273" class="headerlink" title="第 68课谁大谁小—逻辑判断与推理  273"></a>第 68课谁大谁小—逻辑判断与推理  273</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> make<span class="token punctuation">,</span>boli<span class="token punctuation">,</span>mani<span class="token punctuation">,</span>nike<span class="token punctuation">;</span>  <span class="token keyword">bool</span> tj<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>make<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>make<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>make<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>boli<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>boli<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>boli<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>mani<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>mani<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>mani<span class="token operator">++</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        nike<span class="token operator">=</span><span class="token number">10</span><span class="token operator">-</span>make<span class="token operator">-</span>boli<span class="token operator">-</span>mani<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>make<span class="token operator">*</span>boli<span class="token operator">*</span>mani<span class="token operator">*</span>nike<span class="token operator">==</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          tj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>make<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>boli<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>mani<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>nike<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>boli<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>make<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>mani<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>nike<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>boli<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>make<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tj<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>make<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>nike<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>boli<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>mani<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>tj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>tj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>tj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>tj<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"马克："</span><span class="token operator">&lt;&lt;</span>make<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"波力："</span><span class="token operator">&lt;&lt;</span>boli<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"马尼："</span><span class="token operator">&lt;&lt;</span>mani<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"尼克："</span><span class="token operator">&lt;&lt;</span>nike<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>                   <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-69课胡萝卜与骨头—模拟法-276"><a href="#第-69课胡萝卜与骨头—模拟法-276" class="headerlink" title="第 69课胡萝卜与骨头—模拟法      276"></a>第 69课胡萝卜与骨头—模拟法      276</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">15</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>                                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>      k<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"骨头所在的位置："</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-70课读心术—二进制数的应用-280"><a href="#第-70课读心术—二进制数的应用-280" class="headerlink" title="第 70课读心术—二进制数的应用    280"></a>第 70课读心术—二进制数的应用    280</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">;</span>  string t<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"1,2,3,4,5,6,7"</span><span class="token punctuation">;</span>  t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"1,3,5,7"</span><span class="token punctuation">;</span>  t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"2,3,6,7"</span><span class="token punctuation">;</span>  t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"4,5,6,7"</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"读心术猜数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   cout<span class="token operator">&lt;&lt;</span><span class="token string">"请你在下面7个数中，选一个并记在心里。"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//暂停 </span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//清屏 </span>    cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"问：下面的数中有吗? 0:没有, 1:有"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">do</span>    <span class="token punctuation">{</span>      cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  ans<span class="token operator">=</span><span class="token number">4</span><span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"你心中想的数是:"</span> <span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="拓展阅读：数据结构-286"><a href="#拓展阅读：数据结构-286" class="headerlink" title="拓展阅读：数据结构  286"></a>拓展阅读：数据结构  286</h6>]]></content>
      
      
      <categories>
          
          <category> 《小学生C++趣味编程》系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》_第3单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-3-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-3-dan-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="第-3单元-循环结构"><a href="#第-3单元-循环结构" class="headerlink" title="第 3单元 循环结构"></a>第 3单元 循环结构</h1><h2 id="一、for循环"><a href="#一、for循环" class="headerlink" title="一、for循环"></a>一、for循环</h2><h3 id="第-27课老狼老狼几点钟—for语句"><a href="#第-27课老狼老狼几点钟—for语句" class="headerlink" title="第 27课老狼老狼几点钟—for语句"></a>第 27课老狼老狼几点钟—for语句</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  1点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  2点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  3点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  4点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  5点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  6点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  7点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  8点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  9点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  10点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  11点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老狼老狼几点钟?  12点钟。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"狼来了，快跑！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-28课叮叮当当—for语句与-if语句的结合"><a href="#第-28课叮叮当当—for语句与-if语句的结合" class="headerlink" title="第 28课叮叮当当—for语句与 if语句的结合"></a>第 28课叮叮当当—for语句与 if语句的结合</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//' '中有1个空格 </span>       <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"叮叮"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"当当"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-29课布纳特老师出的难题—累加求和"><a href="#第-29课布纳特老师出的难题—累加求和" class="headerlink" title="第 29课布纳特老师出的难题—累加求和"></a>第 29课布纳特老师出的难题—累加求和</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    sum<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1+2+3+...+100="</span><span class="token punctuation">;</span>  cout  <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-30课棋盘上的学问—超长整型与数据溢出"><a href="#第-30课棋盘上的学问—超长整型与数据溢出" class="headerlink" title="第 30课棋盘上的学问—超长整型与数据溢出"></a>第 30课棋盘上的学问—超长整型与数据溢出</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token punctuation">,</span>n<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// long long为长整型</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">64</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     n<span class="token operator">*</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>       sum<span class="token operator">+</span><span class="token operator">=</span>n<span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"总数："</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-31课-3721数—continue语句"><a href="#第-31课-3721数—continue语句" class="headerlink" title="第 31课 3721数—continue语句"></a>第 31课 3721数—continue语句</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">200</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>   <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">!=</span><span class="token number">2</span><span class="token operator">||</span>i<span class="token operator">%</span><span class="token number">7</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token keyword">continue</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第 32课 26个兄弟姐妹—循环变量为字符型   128</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token string">'Z'</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token string">'A'</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-33课打擂台—for语句的另一种形式"><a href="#第-33课打擂台—for语句的另一种形式" class="headerlink" title="第 33课打擂台—for语句的另一种形式"></a>第 33课打擂台—for语句的另一种形式</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">float</span> max<span class="token punctuation">,</span>x<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入第1个数:"</span><span class="token punctuation">;</span>               cin<span class="token operator">>></span>x<span class="token punctuation">;</span>  max<span class="token operator">=</span>x<span class="token punctuation">;</span>  i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个数:"</span><span class="token punctuation">;</span>       cin<span class="token operator">>></span>x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>max<span class="token punctuation">)</span> max<span class="token operator">=</span>x<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大的数："</span> <span class="token operator">&lt;&lt;</span> max<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-34课生命周期与素数—break语句"><a href="#第-34课生命周期与素数—break语句" class="headerlink" title="第 34课生命周期与素数—break语句"></a>第 34课生命周期与素数—break语句</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>   <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"n="</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//是素数</span>  <span class="token comment" spellcheck="true">//不是素数</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-35课水仙花数—数位分离"><a href="#第-35课水仙花数—数位分离" class="headerlink" title="第 35课水仙花数—数位分离"></a>第 35课水仙花数—数位分离</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> ge<span class="token punctuation">,</span>shi<span class="token punctuation">,</span>bai<span class="token punctuation">,</span>i<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"水仙花数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    bai<span class="token operator">=</span>i<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>      shi<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>      ge<span class="token operator">=</span>i<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>bai<span class="token operator">*</span>bai<span class="token operator">*</span>bai<span class="token operator">+</span>shi<span class="token operator">*</span>shi<span class="token operator">*</span>shi<span class="token operator">+</span>ge<span class="token operator">*</span>ge<span class="token operator">*</span>ge<span class="token operator">==</span>i<span class="token punctuation">)</span>       cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"     "</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-36课天连碧水碧连天—回文数"><a href="#第-36课天连碧水碧连天—回文数" class="headerlink" title="第 36课天连碧水碧连天—回文数"></a>第 36课天连碧水碧连天—回文数</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span>    </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>num<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//是回文数</span>  <span class="token comment" spellcheck="true">//不是回文数</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-37课神奇的大自然—斐波那契数列及长整型-long"><a href="#第-37课神奇的大自然—斐波那契数列及长整型-long" class="headerlink" title="第 37课神奇的大自然—斐波那契数列及长整型 long"></a>第 37课神奇的大自然—斐波那契数列及长整型 long</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> i<span class="token punctuation">,</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a3<span class="token punctuation">;</span>  a2<span class="token operator">=</span>a1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> a1<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> a2<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a3<span class="token operator">=</span>a1<span class="token operator">+</span>a2<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> a3<span class="token punctuation">;</span>    a1<span class="token operator">=</span>a2<span class="token punctuation">;</span>    a2<span class="token operator">=</span>a3<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-38课-警察抓小偷—逻辑判断与推理"><a href="#第-38课-警察抓小偷—逻辑判断与推理" class="headerlink" title="第 38课 警察抓小偷—逻辑判断与推理"></a>第 38课 警察抓小偷—逻辑判断与推理</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span>      </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> x<span class="token punctuation">;</span>  <span class="token keyword">char</span> xiaotou<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      xiaotou<span class="token operator">=</span><span class="token number">64</span><span class="token operator">+</span>x<span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"С͵ˇú"</span> <span class="token operator">&lt;&lt;</span> xiaotou<span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-39课-口算大师—for语句的应用"><a href="#第-39课-口算大师—for语句的应用" class="headerlink" title="第 39课 口算大师—for语句的应用"></a>第 39课 口算大师—for语句的应用</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;ctime></span>  </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span>  </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>symbol<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      x<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      y<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">9</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      symbol<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span>y<span class="token operator">&amp;&amp;</span>symbol<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>           temp<span class="token operator">=</span>x<span class="token punctuation">;</span>        x<span class="token operator">=</span>y<span class="token punctuation">;</span>        y<span class="token operator">=</span>temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">switch</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>          ans<span class="token operator">=</span>x<span class="token operator">+</span>y<span class="token punctuation">;</span>          cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">'+'</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">'='</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>          ans<span class="token operator">=</span>x<span class="token operator">-</span>y<span class="token punctuation">;</span>          cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span>  <span class="token string">'-'</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">'='</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      cin<span class="token operator">>></span>n<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>ans<span class="token punctuation">)</span>     <span class="token punctuation">{</span>      sum<span class="token operator">+</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>       cout <span class="token operator">&lt;&lt;</span> <span class="token string">"    对! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"    错! "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"得分："</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、while和do-while循环结构"><a href="#二、while和do-while循环结构" class="headerlink" title="二、while和do-while循环结构"></a>二、while和do-while循环结构</h2><h3 id="第-40课-儿歌《打老虎》—while语句"><a href="#第-40课-儿歌《打老虎》—while语句" class="headerlink" title="第 40课 儿歌《打老虎》—while语句"></a>第 40课 儿歌《打老虎》—while语句</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> gongji<span class="token punctuation">,</span>muji<span class="token punctuation">,</span>xiaoji<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"公鸡"</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"母鸡"</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"小鸡"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>gongji<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>gongji<span class="token operator">&lt;=</span><span class="token number">33</span><span class="token punctuation">;</span>gongji<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>muji<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>muji<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>muji<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      xiaoji<span class="token operator">=</span><span class="token number">100</span><span class="token operator">-</span>gongji<span class="token operator">-</span>muji<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>gongji<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>muji<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>xiaoji<span class="token operator">/</span><span class="token number">3.0</span><span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>gongji<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>muji<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>xiaoji<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-41课-蜗牛与葡萄树—死循环"><a href="#第-41课-蜗牛与葡萄树—死循环" class="headerlink" title="第 41课 蜗牛与葡萄树—死循环"></a>第 41课 蜗牛与葡萄树—死循环</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>t<span class="token punctuation">;</span>  t<span class="token operator">=</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>     t<span class="token operator">++</span><span class="token punctuation">;</span>     i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>     t<span class="token operator">++</span><span class="token punctuation">;</span>     i<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"需"</span><span class="token operator">&lt;&lt;</span>t<span class="token operator">&lt;&lt;</span><span class="token string">"分钟"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-42课-最小公倍数—枚举算法"><a href="#第-42课-最小公倍数—枚举算法" class="headerlink" title="第 42课 最小公倍数—枚举算法"></a>第 42课 最小公倍数—枚举算法</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>s<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入两个自然数："</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>x<span class="token operator">>></span>y<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    temp<span class="token operator">=</span>x<span class="token punctuation">;</span>    x<span class="token operator">=</span>y<span class="token punctuation">;</span>    y<span class="token operator">=</span>temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  s<span class="token operator">=</span>y<span class="token operator">*</span>i<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">%</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    s<span class="token operator">=</span>y<span class="token operator">*</span>i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"最小公倍数："</span><span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-43课-最大公约数—辗转相除"><a href="#第-43课-最大公约数—辗转相除" class="headerlink" title="第 43课 最大公约数—辗转相除"></a>第 43课 最大公约数—辗转相除</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span>  m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>r<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"输入两个正整数："</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>m<span class="token operator">>></span>n<span class="token punctuation">;</span>   r<span class="token operator">=</span>m<span class="token operator">%</span>n<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      m<span class="token operator">=</span>n<span class="token punctuation">;</span>      n<span class="token operator">=</span>r<span class="token punctuation">;</span>      r<span class="token operator">=</span>m<span class="token operator">%</span>n<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"最大公约数："</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-44课-角谷猜想—while语句的应用"><a href="#第-44课-角谷猜想—while语句的应用" class="headerlink" title="第 44课 角谷猜想—while语句的应用"></a>第 44课 角谷猜想—while语句的应用</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span>  x<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"x="</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>x<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">"---->"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> x<span class="token operator">=</span>x<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> x<span class="token operator">/</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    s<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"步数:"</span><span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-45课-蝴蝶效应—双精度实数-double及科学计数法"><a href="#第-45课-蝴蝶效应—双精度实数-double及科学计数法" class="headerlink" title="第 45课 蝴蝶效应—双精度实数 double及科学计数法"></a>第 45课 蝴蝶效应—双精度实数 double及科学计数法</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">;</span>  <span class="token keyword">double</span>  n1<span class="token punctuation">,</span>n2<span class="token punctuation">;</span>  n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  n1<span class="token operator">=</span>n<span class="token number">-0.1</span><span class="token punctuation">;</span>  n2<span class="token operator">=</span>n<span class="token operator">+</span><span class="token number">0.1</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"   "</span><span class="token operator">&lt;&lt;</span>n1<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"   "</span><span class="token operator">&lt;&lt;</span>n2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    n1<span class="token operator">*</span><span class="token operator">=</span>n1<span class="token punctuation">;</span>    n2<span class="token operator">*</span><span class="token operator">=</span>n2<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>n1<span class="token operator">&lt;&lt;</span><span class="token string">"   "</span><span class="token operator">&lt;&lt;</span>n2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-46课-精益求精—分数化为小数"><a href="#第-46课-精益求精—分数化为小数" class="headerlink" title="第 46课 精益求精—分数化为小数"></a>第 46课 精益求精—分数化为小数</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>i<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"0."</span><span class="token punctuation">;</span>  i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token operator">*</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    b<span class="token operator">=</span>a<span class="token operator">/</span><span class="token number">7</span><span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">;</span>    a<span class="token operator">%</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-47课-称心如意的输入—do-while语句"><a href="#第-47课-称心如意的输入—do-while语句" class="headerlink" title="第 47课 称心如意的输入—do-while语句"></a>第 47课 称心如意的输入—do-while语句</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">float</span> x<span class="token punctuation">;</span>   <span class="token keyword">do</span>  <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入成绩:"</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>x<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>x<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"成绩:"</span><span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-48课-加加乐—各数位之和"><a href="#第-48课-加加乐—各数位之和" class="headerlink" title="第 48课 加加乐—各数位之和"></a>第 48课 加加乐—各数位之和</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">;</span>   <span class="token keyword">int</span> a<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   cout<span class="token operator">&lt;&lt;</span><span class="token string">"n="</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    a<span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    sum<span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">;</span>    n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"各个数位之和："</span><span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-49课-大大大—纯小数变整数"><a href="#第-49课-大大大—纯小数变整数" class="headerlink" title="第 49课 大大大—纯小数变整数"></a>第 49课 大大大—纯小数变整数</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入一个纯小数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token keyword">do</span>  <span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"x="</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>x<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">||</span>x<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    num<span class="token operator">*</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    y<span class="token operator">=</span>x<span class="token operator">*</span>num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>y<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-50课-书香阁的座位数—数学计算"><a href="#第-50课-书香阁的座位数—数学计算" class="headerlink" title="第 50课 书香阁的座位数—数学计算"></a>第 50课 书香阁的座位数—数学计算</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> sum<span class="token punctuation">,</span>p<span class="token punctuation">,</span>x<span class="token punctuation">;</span>  p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  x<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span>  sum<span class="token operator">=</span>x<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>x<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token keyword">do</span>   <span class="token punctuation">{</span>    p<span class="token operator">++</span><span class="token punctuation">;</span>    x<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    sum<span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>sum <span class="token operator">!=</span><span class="token number">312</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"最后一排的座位数："</span><span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"排数："</span><span class="token operator">&lt;&lt;</span>p<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-51课-拍手游戏—模拟法"><a href="#第-51课-拍手游戏—模拟法" class="headerlink" title="第 51课 拍手游戏—模拟法"></a>第 51课 拍手游戏—模拟法</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> time<span class="token punctuation">,</span> count<span class="token punctuation">,</span>teacher<span class="token punctuation">,</span>nike<span class="token punctuation">,</span> glair<span class="token punctuation">;</span>  <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>      time<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>   teacher<span class="token operator">=</span>nike<span class="token operator">=</span>glair<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      time<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>teacher<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      teacher<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>nike<span class="token operator">&lt;</span><span class="token number">9</span><span class="token operator">&amp;&amp;</span>time<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      nike<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>glair<span class="token operator">&lt;</span><span class="token number">9</span><span class="token operator">&amp;&amp;</span>time<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>          glair<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>teacher<span class="token operator">+</span>nike<span class="token operator">+</span>glair<span class="token operator">&lt;</span><span class="token number">9</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>count<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-52课-报数游戏—模拟法"><a href="#第-52课-报数游戏—模拟法" class="headerlink" title="第 52课 报数游戏—模拟法"></a>第 52课 报数游戏—模拟法</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>nike<span class="token punctuation">,</span>glair<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  nike<span class="token operator">=</span>glair<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    nike<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nike<span class="token operator">></span><span class="token number">20</span><span class="token punctuation">)</span> nike<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    glair<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>glair<span class="token operator">></span><span class="token number">30</span><span class="token punctuation">)</span> glair<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nike<span class="token operator">==</span>glair<span class="token punctuation">)</span> num<span class="token operator">++</span><span class="token punctuation">;</span>    n<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>num<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-53课-化功大法—纯小数转化为最简分数"><a href="#第-53课-化功大法—纯小数转化为最简分数" class="headerlink" title="第 53课 化功大法—纯小数转化为最简分数"></a>第 53课 化功大法—纯小数转化为最简分数</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">double</span> x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入一个纯小数"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"x="</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>x<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">1</span><span class="token operator">||</span>x<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>y<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//纯小数化成整数</span>  <span class="token punctuation">{</span>    a<span class="token operator">*</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    y<span class="token operator">=</span>x<span class="token operator">*</span>a<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  b<span class="token operator">=</span>y<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">'/'</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>b<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//求出a和b的最大公约</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>      j<span class="token operator">=</span>i<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//找出最大公约数后，赋值给j</span>      <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//退出循环</span>    <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"最简分数为："</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>b<span class="token operator">/</span>j<span class="token operator">&lt;&lt;</span><span class="token string">'/'</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">/</span>j<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、双重循环"><a href="#三、双重循环" class="headerlink" title="三、双重循环"></a>三、双重循环</h2><h3 id="第-54课-有规律的图形—循环的嵌套"><a href="#第-54课-有规律的图形—循环的嵌套" class="headerlink" title="第 54课 有规律的图形—循环的嵌套"></a>第 54课 有规律的图形—循环的嵌套</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>       cout<span class="token operator">&lt;&lt;</span><span class="token string">'*'</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-55课-图形的窍门—双重循环的应用"><a href="#第-55课-图形的窍门—双重循环的应用" class="headerlink" title="第 55课 图形的窍门—双重循环的应用"></a>第 55课 图形的窍门—双重循环的应用</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span>    </span><span class="token comment" spellcheck="true">//为了使用setw()来设置域宽</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//外循环控制行数</span>  <span class="token punctuation">{</span>     cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//占位，右对齐，每行位置</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//内层循环控制每行的个数</span>      cout<span class="token operator">&lt;&lt;</span><span class="token string">'*'</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//输出的内容</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//换行</span>  <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-56课-九九乘法表—双重循环的应用"><a href="#第-56课-九九乘法表—双重循环的应用" class="headerlink" title="第 56课 九九乘法表—双重循环的应用"></a>第 56课 九九乘法表—双重循环的应用</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span> </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">'*'</span><span class="token operator">&lt;&lt;</span>j<span class="token operator">&lt;&lt;</span><span class="token string">'='</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">*</span>j<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-57课-鸡兔同笼—双重循环的应用"><a href="#第-57课-鸡兔同笼—双重循环的应用" class="headerlink" title="第 57课 鸡兔同笼—双重循环的应用"></a>第 57课 鸡兔同笼—双重循环的应用</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> ji<span class="token punctuation">,</span>tu<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>ji<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>ji<span class="token operator">&lt;=</span><span class="token number">34</span><span class="token punctuation">;</span>ji<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>tu<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>tu<span class="token operator">&lt;=</span><span class="token number">23</span><span class="token punctuation">;</span>tu<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>ji<span class="token operator">+</span>tu<span class="token operator">==</span><span class="token number">35</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ji<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>tu<span class="token operator">*</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">94</span><span class="token punctuation">)</span>          cout<span class="token operator">&lt;&lt;</span><span class="token string">"ผฆฃบ"</span><span class="token operator">&lt;&lt;</span>ji<span class="token operator">&lt;&lt;</span><span class="token string">"  อรฃบ"</span><span class="token operator">&lt;&lt;</span>tu<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、三重循环"><a href="#四、三重循环" class="headerlink" title="四、三重循环"></a>四、三重循环</h2><h3 id="第-58课-百钱买百鸡—三重循环与程序的优化"><a href="#第-58课-百钱买百鸡—三重循环与程序的优化" class="headerlink" title="第 58课 百钱买百鸡—三重循环与程序的优化"></a>第 58课 百钱买百鸡—三重循环与程序的优化</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> gongji<span class="token punctuation">,</span>muji<span class="token punctuation">,</span>xiaoji<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"公鸡"</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"母鸡"</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"小鸡"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>gongji<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>gongji<span class="token operator">&lt;=</span><span class="token number">33</span><span class="token punctuation">;</span>gongji<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>muji<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>muji<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">;</span>muji<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      xiaoji<span class="token operator">=</span><span class="token number">100</span><span class="token operator">-</span>gongji<span class="token operator">-</span>muji<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>gongji<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>muji<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>xiaoji<span class="token operator">/</span><span class="token number">3.0</span><span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>gongji<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>muji<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>xiaoji<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、四重循环"><a href="#五、四重循环" class="headerlink" title="五、四重循环"></a>五、四重循环</h2><h3 id="第-59课-比特童币—四重循环"><a href="#第-59课-比特童币—四重循环" class="headerlink" title="第 59课 比特童币—四重循环"></a>第 59课 比特童币—四重循环</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a3<span class="token punctuation">,</span>a4<span class="token punctuation">,</span>n<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>a4<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a4<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>a4<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>a3<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a3<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>a3<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token keyword">for</span><span class="token punctuation">(</span>a2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a2<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>a2<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>a1<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>a1<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>a1<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           n<span class="token operator">=</span>a4<span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>a3<span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>a2<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>a1<span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">;</span>           cout<span class="token operator">&lt;&lt;</span>a4<span class="token operator">&lt;&lt;</span>a3<span class="token operator">&lt;&lt;</span>a2<span class="token operator">&lt;&lt;</span>a1<span class="token operator">&lt;&lt;</span><span class="token string">"B    "</span><span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-60课-比特超市—超市收费程序"><a href="#第-60课-比特超市—超市收费程序" class="headerlink" title="第 60课 比特超市—超市收费程序"></a>第 60课 比特超市—超市收费程序</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">float</span> n<span class="token punctuation">,</span>sumone<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>  <span class="token keyword">bool</span>  flag<span class="token punctuation">;</span>   flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  sum<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      sumone <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>      <span class="token keyword">do</span>      <span class="token punctuation">{</span>          cin <span class="token operator">>></span> n<span class="token punctuation">;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>              flag <span class="token operator">=</span> flase<span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          sumone <span class="token operator">+</span><span class="token operator">=</span> n<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"当前顾客应付的货款: "</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> sumone <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>sumone <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>          num<span class="token operator">++</span><span class="token punctuation">;</span>          sum <span class="token operator">+</span><span class="token operator">=</span> sumone<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"今天的营业额："</span><span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"今天的顾客人数："</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">float</span> n<span class="token punctuation">,</span>sumone<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>  <span class="token keyword">bool</span>  flag<span class="token punctuation">;</span>   flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  sum<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     sumone<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>      <span class="token keyword">do</span>      <span class="token punctuation">{</span>      cin<span class="token operator">>></span>n<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>          n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>          flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        sumone<span class="token operator">+</span><span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"当前顾客应付的货款:"</span> <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span>sumone<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    num<span class="token operator">++</span><span class="token punctuation">;</span>    sum<span class="token operator">+</span><span class="token operator">=</span>sumone<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"今天的营业额："</span><span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"今天的顾客人数："</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>### </p>]]></content>
      
      
      <categories>
          
          <category> 《小学生C++趣味编程》系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》_第1单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-1-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-1-dan-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="第1单元-顺序结构"><a href="#第1单元-顺序结构" class="headerlink" title="第1单元 顺序结构"></a>第1单元 顺序结构</h1><h3 id="第-1课编程是一门技术——认识-Dev-C"><a href="#第-1课编程是一门技术——认识-Dev-C" class="headerlink" title="第 1课编程是一门技术——认识 Dev-C++"></a>第 1课编程是一门技术——认识 Dev-C++</h3><p>对于编程，学习者首先接触到就是编译器</p><p><strong>编译器</strong></p><p>DEV-C++，折腾少<br>language</p><p><strong>集成开发环境</strong></p><p>Code Blocks，麻烦</p><p>Visual Studio，开发工具集，全面</p><p>Vim + gcc 推荐</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习</p><p>1.C++编写的源程序扩展名为<u>.cpp</u></p><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-2课春晓——cout语句"><a href="#第-2课春晓——cout语句" class="headerlink" title="第 2课春晓——cout语句"></a>第 2课春晓——cout语句</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout  <span class="token operator">&lt;&lt;</span>  <span class="token string">"春 晓"</span>  <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>     cout  <span class="token operator">&lt;&lt;</span>  <span class="token string">"春眠不觉晓，"</span>  <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>    cout  <span class="token operator">&lt;&lt;</span>  <span class="token string">"处处蚊子咬。"</span>  <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>    cout  <span class="token operator">&lt;&lt;</span>  <span class="token string">"夜来嗡嗡声，"</span>  <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>    cout  <span class="token operator">&lt;&lt;</span>  <span class="token string">"脓包知多少。"</span>  <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编码问题还是要注意到</p><p>然后编写程序的时候，一定要注意格式，注意分行，注意空格，注意程序的美观。</p><p>写完要拿笔拿纸自己重新默写</p><p>课后练习</p><p>1.计算机系统由<u>硬件系统和软件系统组成</u></p><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"99 + 1 = "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"大家好!我是大钧老师,很高兴认识你们!"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-3课天安门广场——变量、表达式与赋值语句"><a href="#第-3课天安门广场——变量、表达式与赋值语句" class="headerlink" title="第 3课天安门广场——变量、表达式与赋值语句"></a>第 3课天安门广场——变量、表达式与赋值语句</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>  a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">880</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"天安门广场面积："</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">"平方米"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习</p><p>1.<u>3y</u>是非法的标识符</p><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-4课列朋波骨——计数器"><a href="#第-4课列朋波骨——计数器" class="headerlink" title="第 4课列朋波骨——计数器"></a>第 4课列朋波骨——计数器</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习<br>1.x = ++b; 等价于<br><u>x = b;</u><br><u>++x;</u></p><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">--</span>i<span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">++</span>i<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*尼克爷爷的岁数、爸爸的岁数和他自己的岁数是3个等差的自然数，每两个数相差25.已知尼克是11岁，那么请输出他们的岁数。 output:113661 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//爸爸的 </span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//爷爷的 </span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-5课-雪花——累加器"><a href="#第-5课-雪花——累加器" class="headerlink" title="第 5课 雪花——累加器"></a>第 5课 雪花——累加器</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1 + 2 + 3 + 4 = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习</p><p>1.</p><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: output:s = 18*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> s <span class="token operator">+</span> a<span class="token punctuation">;</span>    s <span class="token operator">=</span> s <span class="token operator">+</span> b<span class="token punctuation">;</span>    s <span class="token operator">=</span> s <span class="token operator">+</span> c<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s = "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: 向日葵班43人，苹果班42人，草莓班45人，问共多少人？ output:sum = 130*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化 </span>    n <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-6课-细胞分裂——复合运算符"><a href="#第-6课-细胞分裂——复合运算符" class="headerlink" title="第 6课 细胞分裂——复合运算符"></a>第 6课 细胞分裂——复合运算符</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>  n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: output:i = 16, sum = 31*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sum = 1, i = 1</span>    i <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// i = 2</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sum = 3</span>    i <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// i = 4</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sum = 7</span>    i <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// i = 8</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sum = 15</span>    i <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// i = 16</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sum = 31</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i = "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">", sum = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: 格莱尔买来30根骨头，第一天吃掉一半后又吃了一根， 第二天吃掉一半后又吃了一根，第三天仍然如此。 问第三天吃完后还剩下多少根骨头？ output:2*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//14 </span>    n <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//6 </span>    n <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2 </span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第三天吃完后还剩下 = "</span> <span class="token operator">&lt;&lt;</span> n  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-7课-阿布拉卡达布拉——交换两个变量的值及注释符"><a href="#第-7课-阿布拉卡达布拉——交换两个变量的值及注释符" class="headerlink" title="第 7课 阿布拉卡达布拉——交换两个变量的值及注释符"></a>第 7课 阿布拉卡达布拉——交换两个变量的值及注释符</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">"  b="</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出交换前a、b的值</span>    t<span class="token operator">=</span>a<span class="token punctuation">;</span>    a<span class="token operator">=</span>b<span class="token punctuation">;</span>    b<span class="token operator">=</span>t<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">"  b="</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出交换后a、b的值</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习</p><p>1.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: output:a = 200, b = 100*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//a = 100, b = 200</span>    b <span class="token operator">-</span><span class="token operator">=</span> a<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//b = 100, a = 100</span>    a <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//a = 200, b = 100</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">", b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: output:数 = 438*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ge<span class="token punctuation">,</span> shi<span class="token punctuation">,</span> bai<span class="token punctuation">,</span> shu<span class="token punctuation">;</span>    shi <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    bai <span class="token operator">=</span> shi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//百位 </span>    ge <span class="token operator">=</span> bai <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//个位 </span>    shu <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> bai <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> shi <span class="token operator">+</span> ge<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"数 = "</span> <span class="token operator">&lt;&lt;</span> shu <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-8课-竖式计算——设置域宽-setw"><a href="#第-8课-竖式计算——设置域宽-setw" class="headerlink" title="第 8课 竖式计算——设置域宽 setw"></a>第 8课 竖式计算——设置域宽 setw</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>  a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">870</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'+'</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">" -----------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习</p><p>1.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: output:数 = 438*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ge<span class="token punctuation">,</span> shi<span class="token punctuation">,</span> bai<span class="token punctuation">,</span> shu<span class="token punctuation">;</span>    shi <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    bai <span class="token operator">=</span> shi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//百位 </span>    ge <span class="token operator">=</span> bai <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//个位 </span>    shu <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> bai <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> shi <span class="token operator">+</span> ge<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"数 = "</span> <span class="token operator">&lt;&lt;</span> shu <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.</p><h3 id="第-9课-植树造林——cin语句"><a href="#第-9课-植树造林——cin语句" class="headerlink" title="第 9课 植树造林——cin语句"></a>第 9课 植树造林——cin语句</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span>  a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入人数和平均每人种的棵数:"</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token punctuation">;</span>   cin<span class="token operator">>></span>b<span class="token punctuation">;</span>   sum<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"总的棵数:"</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: cin >> 流提取运算符，使用cin重新编写了“阿布拉卡达布拉” output:a, b = 34 76a = 34, b = 76a = 76, b = 34*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a, b = "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">", b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出交换前a,b的值 </span>    t <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> t<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">", b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出交换后a,b的值 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-10课-古埃及金字塔——单精度实数-float"><a href="#第-10课-古埃及金字塔——单精度实数-float" class="headerlink" title="第 10课 古埃及金字塔——单精度实数 float"></a>第 10课 古埃及金字塔——单精度实数 float</h3><p>第一种解法</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>h<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a, h ="</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> h<span class="token punctuation">;</span>    s <span class="token operator">=</span> a <span class="token operator">*</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s="</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种解法</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: 单精度实数 float output:a, h = 3 5s = 7.5*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> h<span class="token punctuation">;</span>    <span class="token keyword">float</span> s<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a, h = "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> h<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> h<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//这里要写成实数2.0，不能写成整数2 </span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s = "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-11课-尼克与强盗——整除及整除求余运算符的应用"><a href="#第-11课-尼克与强盗——整除及整除求余运算符的应用" class="headerlink" title="第 11课 尼克与强盗——整除及整除求余运算符的应用"></a>第 11课 尼克与强盗——整除及整除求余运算符的应用</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>ge<span class="token punctuation">,</span>shi<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入一个两位数："</span><span class="token punctuation">;</span>   cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  shi<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>  ge<span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>  n<span class="token operator">=</span>ge<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>shi<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-12课-小写变大写——ASCII码与字符型"><a href="#第-12课-小写变大写——ASCII码与字符型" class="headerlink" title="第 12课 小写变大写——ASCII码与字符型"></a>第 12课 小写变大写——ASCII码与字符型</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span>  n<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入a~z:"</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  n<span class="token operator">=</span>n<span class="token number">-32</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 《小学生C++趣味编程》系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》_第2单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-2-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-2-dan-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2单元-选择结构"><a href="#第-2单元-选择结构" class="headerlink" title="第 2单元 选择结构"></a>第 2单元 选择结构</h1><h2 id="第-13课-智商问题—if语句"><a href="#第-13课-智商问题—if语句" class="headerlink" title="第 13课 智商问题—if语句"></a>第 13课 智商问题—if语句</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> iq<span class="token punctuation">;</span>   cout <span class="token operator">&lt;&lt;</span> <span class="token string">"IQ:"</span><span class="token punctuation">;</span>                           cin<span class="token operator">>></span>iq<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>iq<span class="token operator">></span><span class="token number">140</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"天才"</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-14课跳绳达人—if-else语句"><a href="#第-14课跳绳达人—if-else语句" class="headerlink" title="第 14课跳绳达人—if-else语句"></a>第 14课跳绳达人—if-else语句</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入1分钟跳绳次数："</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">200</span><span class="token punctuation">)</span>     cout <span class="token operator">&lt;&lt;</span> <span class="token string">"跳绳达人!"</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"继续努力！"</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-15课比尔庄园—if语句嵌套"><a href="#第-15课比尔庄园—if语句嵌套" class="headerlink" title="第 15课比尔庄园—if语句嵌套"></a>第 15课比尔庄园—if语句嵌套</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> USER<span class="token operator">=</span><span class="token number">201701</span><span class="token punctuation">,</span>PSW<span class="token operator">=</span><span class="token number">135790</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> user<span class="token punctuation">,</span>psw<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Username："</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>user<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Password："</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>psw<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token operator">==</span>USER<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>psw<span class="token operator">==</span>PSW<span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Welcome, My Dear Friends!"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Wrong Password!"</span><span class="token punctuation">;</span>     <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Wrong Username!"</span> <span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-16课-开灯关灯—逻辑变量"><a href="#第-16课-开灯关灯—逻辑变量" class="headerlink" title="第 16课 开灯关灯—逻辑变量"></a>第 16课 开灯关灯—逻辑变量</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> light<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    light<span class="token operator">=</span><span class="token operator">!</span>light<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    light<span class="token operator">=</span><span class="token operator">!</span>light<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    light<span class="token operator">=</span><span class="token operator">!</span>light<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    light<span class="token operator">=</span><span class="token operator">!</span>light<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>    light<span class="token operator">=</span><span class="token operator">!</span>light<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>light<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"light on"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"light off"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-17课-欧耶欧耶—逻辑运算符"><a href="#第-17课-欧耶欧耶—逻辑运算符" class="headerlink" title="第 17课 欧耶欧耶—逻辑运算符"></a>第 17课 欧耶欧耶—逻辑运算符</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入一个整数："</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"欧耶欧耶"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-18课闰年与平年—逻辑运算符的优先级"><a href="#第-18课闰年与平年—逻辑运算符的优先级" class="headerlink" title="第 18课闰年与平年—逻辑运算符的优先级"></a>第 18课闰年与平年—逻辑运算符的优先级</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>  <span class="token keyword">int</span> year<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入一个年份："</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>year<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>                  cout <span class="token operator">&lt;&lt;</span> year <span class="token operator">&lt;&lt;</span> <span class="token string">"是闰年"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout <span class="token operator">&lt;&lt;</span> year <span class="token operator">&lt;&lt;</span> <span class="token string">"是平年"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-19课比大小—复合语句"><a href="#第-19课比大小—复合语句" class="headerlink" title="第 19课比大小—复合语句"></a>第 19课比大小—复合语句</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*#include&lt;iostream>using namespace std;int main(){  int a,b,t;  cout &lt;&lt; "a,b=";  cin>>a>>b;  if(a&lt;=b)    cout &lt;&lt; a &lt;&lt; "  " &lt;&lt; b &lt;&lt; endl;   else    cout &lt;&lt; b &lt;&lt; "  " &lt;&lt; a &lt;&lt; endl;  return 0;} */</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a,b= "</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t<span class="token operator">=</span>a<span class="token punctuation">;</span>        a<span class="token operator">=</span>b<span class="token punctuation">;</span>        b<span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-20课孔融让梨—求-3个整数中最小值"><a href="#第-20课孔融让梨—求-3个整数中最小值" class="headerlink" title="第 20课孔融让梨—求 3个整数中最小值"></a>第 20课孔融让梨—求 3个整数中最小值</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>min<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a b c="</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>  min<span class="token operator">=</span>a<span class="token punctuation">;</span>  <span class="token keyword">else</span>  min<span class="token operator">=</span>b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span>min<span class="token punctuation">)</span>  min<span class="token operator">=</span>c<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"min="</span> <span class="token operator">&lt;&lt;</span> min <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-21课田忌赛马—3个数排序"><a href="#第-21课田忌赛马—3个数排序" class="headerlink" title="第 21课田忌赛马—3个数排序"></a>第 21课田忌赛马—3个数排序</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">float</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a,b,c="</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    temp<span class="token operator">=</span>a<span class="token punctuation">;</span>              a<span class="token operator">=</span>b<span class="token punctuation">;</span>      b<span class="token operator">=</span>temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>c<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      temp<span class="token operator">=</span>a<span class="token punctuation">;</span>      a<span class="token operator">=</span>c<span class="token punctuation">;</span>      c<span class="token operator">=</span>temp<span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">></span>c<span class="token punctuation">)</span>   <span class="token punctuation">{</span>      temp<span class="token operator">=</span>b<span class="token punctuation">;</span>      b<span class="token operator">=</span>c<span class="token punctuation">;</span>      c<span class="token operator">=</span>temp<span class="token punctuation">;</span>   <span class="token punctuation">}</span>  cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//' '中间有一个空格</span>  <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-22课抽奖—随机函数-rand"><a href="#第-22课抽奖—随机函数-rand" class="headerlink" title="第 22课抽奖—随机函数 rand()"></a>第 22课抽奖—随机函数 rand()</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;ctime></span>      </span><span class="token comment" spellcheck="true">//需要调用time()函数 </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdlib></span>    </span><span class="token comment" spellcheck="true">//需要调用srand()和rand()函数</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>a<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"抽奖程序"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入1-5:"</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//随机种子</span>  a<span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//随机产生1至5的整数</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>a<span class="token punctuation">)</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"恭喜您，中奖了！奖金10元"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"没中奖，请付费2元"</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"中奖号码是"</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-23课打车费用—if语句的应用"><a href="#第-23课打车费用—if语句的应用" class="headerlink" title="第 23课打车费用—if语句的应用"></a>第 23课打车费用—if语句的应用</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> lucheng<span class="token punctuation">,</span>shijian<span class="token punctuation">;</span>  <span class="token keyword">float</span> feiyong<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   cin<span class="token operator">>></span>lucheng<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>lucheng<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span>    feiyong<span class="token operator">=</span><span class="token number">6</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.8</span><span class="token operator">+</span><span class="token punctuation">(</span>lucheng<span class="token number">-10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.8</span><span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">;</span>   <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>lucheng<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span> feiyong<span class="token operator">=</span><span class="token number">6</span><span class="token operator">+</span><span class="token punctuation">(</span>lucheng<span class="token number">-2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.8</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>  feiyong<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>shijian<span class="token punctuation">;</span>  feiyong<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>shijian<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> feiyong <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-24课体质指数-BMI—bug与-debug"><a href="#第-24课体质指数-BMI—bug与-debug" class="headerlink" title="第 24课体质指数 BMI—bug与 debug"></a>第 24课体质指数 BMI—bug与 debug</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">float</span> height<span class="token punctuation">,</span>weight<span class="token punctuation">,</span>bmi<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"身体(米)："</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>height<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"体重(公斤)："</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>weight<span class="token punctuation">;</span>  bmi<span class="token operator">=</span>weight<span class="token operator">/</span><span class="token punctuation">(</span>height<span class="token operator">*</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>bmi<span class="token operator">&lt;</span><span class="token number">18.5</span><span class="token punctuation">)</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"偏瘦"</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bmi<span class="token operator">&lt;</span><span class="token number">24</span><span class="token punctuation">)</span>          cout <span class="token operator">&lt;&lt;</span> <span class="token string">"正常"</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bmi<span class="token operator">&lt;</span><span class="token number">28</span><span class="token punctuation">)</span>               cout <span class="token operator">&lt;&lt;</span> <span class="token string">"偏胖"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bmi<span class="token operator">&lt;</span><span class="token number">40</span><span class="token punctuation">)</span>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"肥胖"</span><span class="token punctuation">;</span>                  <span class="token keyword">else</span>                     cout <span class="token operator">&lt;&lt;</span> <span class="token string">"极重度肥胖"</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-25课成绩等级—switch语句"><a href="#第-25课成绩等级—switch语句" class="headerlink" title="第 25课成绩等级—switch语句"></a>第 25课成绩等级—switch语句</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span>  n<span class="token punctuation">;</span>  <span class="token keyword">char</span> score<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入分数："</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">90</span><span class="token punctuation">)</span>  score<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">70</span><span class="token punctuation">)</span> score<span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">;</span>       <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">)</span> score<span class="token operator">=</span><span class="token string">'C'</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>  score<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> score<span class="token punctuation">;</span>  <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第-26课王宅六味—switch语句的应用"><a href="#第-26课王宅六味—switch语句的应用" class="headerlink" title="第 26课王宅六味—switch语句的应用"></a>第 26课王宅六味—switch语句的应用</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入编号："</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"寿仙菇"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"酒糟芋"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"下山笋"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"太师豆腐"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"孝子鱼"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"猪全福"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"无此编号的菜"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="101-拓展阅读：冯·诺依曼"><a href="#101-拓展阅读：冯·诺依曼" class="headerlink" title="101 拓展阅读：冯·诺依曼"></a>101 拓展阅读：冯·诺依曼</h2>]]></content>
      
      
      <categories>
          
          <category> 《小学生C++趣味编程》系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读一流书之《The C++ Programming Language》(Fourth Edition)</title>
      <link href="/2020/03/01/du-yi-liu-shu-zhi-the-c-programming-language-fourth-edition/"/>
      <url>/2020/03/01/du-yi-liu-shu-zhi-the-c-programming-language-fourth-edition/</url>
      
        <content type="html"><![CDATA[<p>测试</p>]]></content>
      
      
      <categories>
          
          <category> 读一流书系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《深入浅出程序设计竞赛》</title>
      <link href="/2020/03/01/shen-ru-qian-chu-cheng-xu-she-ji-jing-sai/"/>
      <url>/2020/03/01/shen-ru-qian-chu-cheng-xu-she-ji-jing-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="第一章-简简单单写程序"><a href="#第一章-简简单单写程序" class="headerlink" title="第一章 简简单单写程序"></a>第一章 简简单单写程序</h2><h2 id="第二章-顺序结构程序设计"><a href="#第二章-顺序结构程序设计" class="headerlink" title="第二章 顺序结构程序设计"></a>第二章 顺序结构程序设计</h2><h2 id="第三章-分支结构程序设计"><a href="#第三章-分支结构程序设计" class="headerlink" title="第三章 分支结构程序设计"></a>第三章 分支结构程序设计</h2><h2 id="第四章-循环结构程序设计"><a href="#第四章-循环结构程序设计" class="headerlink" title="第四章 循环结构程序设计"></a>第四章 循环结构程序设计</h2><h2 id="第五章-数组与数据批量存储"><a href="#第五章-数组与数据批量存储" class="headerlink" title="第五章 数组与数据批量存储"></a>第五章 数组与数据批量存储</h2><h2 id="第六章-字符串与文件操作"><a href="#第六章-字符串与文件操作" class="headerlink" title="第六章 字符串与文件操作"></a>第六章 字符串与文件操作</h2><h2 id="第七章-函数与结构体"><a href="#第七章-函数与结构体" class="headerlink" title="第七章 函数与结构体"></a>第七章 函数与结构体</h2><p>开始简单介绍了数学运算，常量变量；然后就到了语法结构，无外乎顺序、分支和循环三种；数据多了要用数组来处理；然后要处理一下简单的字符串以及整体的文件；最后就到了一个一个功能的函数与结构体。</p>]]></content>
      
      
      <categories>
          
          <category> 《深入浅出程序设计竞赛》系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生活中的实用C++</title>
      <link href="/2020/03/01/sheng-huo-zhong-de-shi-yong-c/"/>
      <url>/2020/03/01/sheng-huo-zhong-de-shi-yong-c/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 生活中的实用编程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活中的实用Python（一）</title>
      <link href="/2020/03/01/sheng-huo-zhong-de-shi-yong-python-yi/"/>
      <url>/2020/03/01/sheng-huo-zhong-de-shi-yong-python-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="做一个软件-恋爱纪念日"><a href="#做一个软件-恋爱纪念日" class="headerlink" title="做一个软件-恋爱纪念日"></a>做一个软件-恋爱纪念日</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token punctuation">,</span> timeturtle<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"恋爱纪念日"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawGap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#绘制数码管间隔</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawLine</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#绘制单段数码管</span>    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> draw <span class="token keyword">else</span> turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawDigit</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#根据数字绘制七段数码管</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> date<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'年'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'月'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'日'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            drawDigit<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">all</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'总共'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> day<span class="token punctuation">:</span>        drawDigit<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'天'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token operator">=</span>t1<span class="token operator">*</span><span class="token number">365</span>    <span class="token keyword">if</span> t2 <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span>t2<span class="token operator">*</span><span class="token number">30</span>    <span class="token keyword">if</span> t2 <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        t<span class="token operator">=</span>t<span class="token operator">+</span><span class="token number">91</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">122</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">152</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">183</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">213</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">244</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">275</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">303</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">334</span>    t<span class="token operator">+=</span>t3    <span class="token keyword">return</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">370</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'今天是：'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    drawDate<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m=%d+'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'大钧和琦悦在一起：'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    drawDate<span class="token punctuation">(</span><span class="token string">'2019-11=3+'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'我们一起度过了：'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    text<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#    drawDate('2019-10=10+')</span>    t1<span class="token operator">=</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>t1<span class="token punctuation">.</span>tm_year<span class="token number">-2019</span>    t3<span class="token operator">=</span>t1<span class="token punctuation">.</span>tm_mon<span class="token number">-11</span>    <span class="token keyword">if</span> t3<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>        t2<span class="token operator">-=</span><span class="token number">1</span>        t3<span class="token operator">+=</span><span class="token number">12</span>    t4<span class="token operator">=</span>t1<span class="token punctuation">.</span>tm_mday<span class="token number">-3</span>    <span class="token keyword">if</span> t4<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>        t3<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">if</span> t1<span class="token punctuation">.</span>tm_mon<span class="token number">-1</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            t4<span class="token operator">+=</span><span class="token number">31</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            t4<span class="token operator">+=</span><span class="token number">30</span>    total<span class="token operator">=</span>count<span class="token punctuation">(</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">,</span>t4<span class="token punctuation">)</span>    drawDate<span class="token punctuation">(</span>str<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>t4<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'+'</span><span class="token punctuation">)</span>    all<span class="token punctuation">(</span>total<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-在命令行用pip安装-pyinstaller包"><a href="#1-在命令行用pip安装-pyinstaller包" class="headerlink" title="1. 在命令行用pip安装 pyinstaller包"></a>1. 在命令行用pip安装 pyinstaller包</h2><pre class="line-numbers language-python"><code class="language-python">pip install pyinstaller<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-下载安装pyinstaler运行时所需要的windows扩展pywin32"><a href="#2-下载安装pyinstaler运行时所需要的windows扩展pywin32" class="headerlink" title="2.下载安装pyinstaler运行时所需要的windows扩展pywin32"></a>2.下载安装pyinstaler运行时所需要的windows扩展pywin32</h2><p><a href="https://github.com/mhammond/pywin32/releases" target="_blank" rel="noopener">mhammond/pywin32</a></p><p>选择最新版的下载，<strong>注意要选择对应的python版本(version)和python位数(bittedness)</strong></p><p>通过在命令行输入python查看python版本和位数</p><p>如下所示为python3.7的64位，需要下载<a href="https://github.com/mhammond/pywin32/releases/download/b227/pywin32-227.win32-py3.7.exe" target="_blank" rel="noopener">pywin32-227.win32-py3.7.exe</a></p><pre class="line-numbers language-text"><code class="language-text">Python 3.7.3 ... [MSC v.1900 64 bit (AMD64)] on win32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-在命令行中直接输入下面的指令即可"><a href="#3-在命令行中直接输入下面的指令即可" class="headerlink" title="3.在命令行中直接输入下面的指令即可"></a>3.在命令行中直接输入下面的指令即可</h2><pre class="line-numbers language-python"><code class="language-python">pyinstaller <span class="token punctuation">[</span>opts<span class="token punctuation">]</span> yourprogram<span class="token punctuation">.</span>py <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数opts含义</p><p>-D –onedir 创建一个目录，包含exe文件，但会依赖很多文件（默认）</p><p>-c –console, –nowindowed 使用控制台，无界面(默认)</p><p>-F 指定打包后只生成一个exe格式的文件(必备)</p><p>-w –windowed, –noconsole 使用窗口，无控制台</p><p>-p 添加搜索路径，让其找到对应的库。</p><p>-i 改变生成程序的icon图标 </p><p>准备好图片，打开制作ico的网站<a href="http://www.bitbug.net/" target="_blank" rel="noopener">ico</a></p><h2 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h2><ul><li>比如你有个python程序叫test.py，绝对路径在[D:\project]，一行命令，软件做好</li></ul><pre class="line-numbers language-text"><code class="language-text">pyinstaller -F D:\project\test.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果希望更换程序图标</li></ul><pre class="line-numbers language-python"><code class="language-python">pyinstaller <span class="token operator">-</span>F <span class="token operator">-</span>w <span class="token operator">-</span>i       D<span class="token punctuation">:</span>\project\test<span class="token punctuation">.</span>ico        D<span class="token punctuation">:</span>\project\test<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p>然后就会生成<strong>build</strong>和<strong>dist</strong>文件夹，如果是选择了-F参数，那么dist文件夹下就是你要的程序，<del>build文件夹可以删除</del></p><p><strong>注意</strong>，路径用英文，不要中文。</p>]]></content>
      
      
      <categories>
          
          <category> 生活中的实用编程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活中的实用Scratch</title>
      <link href="/2020/03/01/sheng-huo-zhong-de-shi-yong-scratch/"/>
      <url>/2020/03/01/sheng-huo-zhong-de-shi-yong-scratch/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 生活中的实用编程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scratch,Python,C++里的数学奥妙</title>
      <link href="/2020/03/01/scratch-python-c-li-de-shu-xue-ao-miao/"/>
      <url>/2020/03/01/scratch-python-c-li-de-shu-xue-ao-miao/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言串起来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C++ </tag>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷新手村</title>
      <link href="/2020/03/01/luo-gu-xin-shou-cun/"/>
      <url>/2020/03/01/luo-gu-xin-shou-cun/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Scratch,Python,C++串联</title>
      <link href="/2020/03/01/scratch-python-c-chuan-lian/"/>
      <url>/2020/03/01/scratch-python-c-chuan-lian/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言串起来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C++ </tag>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scratch打怪升级之高级</title>
      <link href="/2020/03/01/scratch-da-guai-sheng-ji-zhi-gao-ji/"/>
      <url>/2020/03/01/scratch-da-guai-sheng-ji-zhi-gao-ji/</url>
      
        <content type="html"><![CDATA[<p>面向过程编程的程序设计方法：消息的广播和接收、分治法、自顶向下、自底向上</p><p>变量</p><p>字符比较、字符串处理</p><p>列表：动态列表、数字列表</p><p>算法：线性搜索、冒泡排序</p>]]></content>
      
      
      <categories>
          
          <category> Scratch打怪升级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scratch打怪升级之中级</title>
      <link href="/2020/03/01/scratch-da-guai-sheng-ji-zhi-zhong-ji/"/>
      <url>/2020/03/01/scratch-da-guai-sheng-ji-zhi-zhong-ji/</url>
      
        <content type="html"><![CDATA[<p>中级任务：认识认识算数运算符、函数、变量、坐标</p><p>比较运算符：比较、逻辑</p><p>程序结构：顺序、分支、循环</p>]]></content>
      
      
      <categories>
          
          <category> Scratch打怪升级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scratch打怪升级之初级</title>
      <link href="/2020/03/01/scratch-da-guai-sheng-ji-zhi-chu-ji/"/>
      <url>/2020/03/01/scratch-da-guai-sheng-ji-zhi-chu-ji/</url>
      
        <content type="html"><![CDATA[<p>初级任务：认识Scratch3.0软件的各个部分，能够制作简单的动画和游戏</p><p>代码标签页、造型标签页、声音标签页、背景标签页</p><p>舞台区、角色区、积木区、代码区</p>]]></content>
      
      
      <categories>
          
          <category> Scratch打怪升级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程百例</title>
      <link href="/2020/03/01/c-bian-cheng-bai-li/"/>
      <url>/2020/03/01/c-bian-cheng-bai-li/</url>
      
        <content type="html"><![CDATA[<p>q</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程百例</title>
      <link href="/2020/03/01/python-bian-cheng-bai-li/"/>
      <url>/2020/03/01/python-bian-cheng-bai-li/</url>
      
        <content type="html"><![CDATA[<p>无</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Scratch只要两大步就画好正方形的方法，你确定不来试试吗？</title>
      <link href="/2020/03/01/scratch-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/"/>
      <url>/2020/03/01/scratch-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q6lsd5k7n.bkt.clouddn.com/scratch%E7%94%BB%E5%9B%BE40%E5%85%B3.jpg" alt="开始闯关吧!"></p><p>先来看看Figura 1，正方形。先自顶向下分析一遍，正方形的四个角都是90°，那就是四个角加四条边。</p><p>准备好了以后就开始拿笔画，擦干净黑板，提笔和落笔都算做一种工作。</p><p>那就可以分为两步，一步是“初始化”，另外一步是“画正方形”。那么我们就可以找到更多积木，先从语义上确定好两个步骤。</p><h3 id="【材料】"><a href="#【材料】" class="headerlink" title="【材料】"></a>【材料】</h3><p><strong>“画笔”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E7%94%BB%E7%AC%94.png" alt></p><p><strong>“白板”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E7%99%BD%E6%9D%BF.png" alt></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h3 id="【准备工作】"><a href="#【准备工作】" class="headerlink" title="【准备工作】"></a>【准备工作】<img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.png" alt></h3><p><strong>“擦干净白板”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E6%93%A6%E5%B9%B2%E5%87%80%E7%99%BD%E6%9D%BF.png" alt></p><p><strong>“抬笔”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E6%8A%AC%E7%AC%94.png" alt></p><p><strong>“移到开始的位置”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E7%A7%BB%E5%88%B0%E5%BC%80%E5%A7%8B%E7%9A%84%E4%BD%8D%E7%BD%AE.png" alt></p><p><strong>“转90度”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%B7%A6%E8%BD%AC90%E5%BA%A6.png" alt></p><p><strong>“落笔”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E8%90%BD%E7%AC%94.png" alt></p><p><strong>“准备工作连起来”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%E8%BF%9E%E8%B5%B7%E6%9D%A5.png" alt></p><h3 id="【画正方形】"><a href="#【画正方形】" class="headerlink" title="【画正方形】"></a>【画正方形】<img src="http://q6lsd5k7n.bkt.clouddn.com/%E7%94%BB%E6%AD%A3%E6%96%B9%E5%BD%A2.png" alt></h3><p><strong>“往前移动300步”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%BE%80%E5%89%8D%E7%A7%BB%E5%8A%A8300%E6%AD%A5.png" alt></p><p><strong>“左转90度”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%B7%A6%E8%BD%AC90%E5%BA%A6.png" alt></p><p><strong>“往前移动300步”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%BE%80%E5%89%8D%E7%A7%BB%E5%8A%A8300%E6%AD%A5.png" alt></p><p><strong>“左转90度”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%B7%A6%E8%BD%AC90%E5%BA%A6.png" alt></p><p><strong>“往前移动300步”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%BE%80%E5%89%8D%E7%A7%BB%E5%8A%A8300%E6%AD%A5.png" alt></p><p><strong>“左转90度”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%B7%A6%E8%BD%AC90%E5%BA%A6.png" alt></p><p><strong>“往前移动300步”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%BE%80%E5%89%8D%E7%A7%BB%E5%8A%A8300%E6%AD%A5.png" alt></p><p><strong>“左转90度”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%B7%A6%E8%BD%AC90%E5%BA%A6.png" alt></p><p><strong>“画正方形连起来”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E6%AD%A3%E6%96%B9%E5%BD%A2%E8%BF%9E%E8%B5%B7%E6%9D%A5.png" alt></p><h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图<img src="http://q6lsd5k7n.bkt.clouddn.com/%E8%A1%A8%E6%BC%94.png" alt></h1><h3 id="【画图成功】"><a href="#【画图成功】" class="headerlink" title="【画图成功】"></a>【画图成功】<img src="http://q6lsd5k7n.bkt.clouddn.com/%E8%A1%A8%E6%BC%94%E6%88%90%E5%8A%9F.png" alt></h3><p><img src="http://q6lsd5k7n.bkt.clouddn.com/%E6%80%BB.png" alt></p><p><strong>谢谢收看！撒花！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之GoC画图系列一</title>
      <link href="/2020/03/01/c-zhi-goc-hua-tu-xi-lie-yi/"/>
      <url>/2020/03/01/c-zhi-goc-hua-tu-xi-lie-yi/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> C++之GoC画图系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之Turtle画图系列一</title>
      <link href="/2020/03/01/python-zhi-turtle-hua-tu-xi-lie-yi/"/>
      <url>/2020/03/01/python-zhi-turtle-hua-tu-xi-lie-yi/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> Python之Turtle画图系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课</title>
      <link href="/2020/03/01/ji-suan-ji-ke-xue-su-cheng-ke/"/>
      <url>/2020/03/01/ji-suan-ji-ke-xue-su-cheng-ke/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2091656333,1578141615&fm=15&gp=0.jpg" alt="img"></p><p><a href="https://www.bilibili.com/video/av21376839/?redirectFrom=h5" target="_blank" rel="noopener">https://www.bilibili.com/video/av21376839/?redirectFrom=h5</a></p><h2 id="第-1-集：计算机早期历史"><a href="#第-1-集：计算机早期历史" class="headerlink" title="第 1 集：计算机早期历史"></a>第 1 集：计算机早期历史</h2><p>提到的设备：算盘 → 步进计算器 → 差分机 → 分析机 → 打孔卡片制表机<br>提到的人名：Charles Babbage, Ada Lovelace</p><p>02:27 最早的计算设备是算盘，举例如何使用<br>04:31 Computer 从指代职业变成指代机器<br>04:57 机器里有名的是：步进计算器。第一个可以做加减乘除的机器<br>06:44 炮弹为了精准，要计算弹道，二战是查表来做。但每次改设计了就需要做一张新表<br>07:30 Charles Babbage 提出了 “差分机”, 在构造差分机期间，想出了分析机, 分析机是通用计算机<br>08:50 Lovelace 给分析机写了假想程序，因此成为了第一位程序员<br>09:25 人口普查 10 年一次. Herman Hollerith 的打孔卡片制表机大大提升了效率</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332470&idx=1&sn=81c3a54311c9cc9824127cbe64a9942e&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-2-集：电子计算机"><a href="#第-2-集：电子计算机" class="headerlink" title="第 2 集：电子计算机"></a>第 2 集：电子计算机</h2><p>提到的设备：继电器 → 真空管 → 晶体管</p><p>00:17 20世纪的发展要求更强的计算能力。柜子大小的计算机发展到房间大小<br>01:06 哈佛 Mark 1 号，IBM 1944 年做的<br>02:25 继电器，继电器一秒最多 50 次开关<br>03:24 继电器出 bug<br>03:49 1904 年，热电子管出现，第一个真空管。改进后变成和继电器的功能一样<br>05:34 “巨人1号” 计算机在英国 布莱切利园 首次大规模使用真空管。但编程麻烦，还要配置<br>06:40 1946 年，宾夕法尼亚大学的 ENIAC 是第一个通用可编程计算机<br>07:36 1947 年，贝尔实验室做出了晶体管，晶体管有诸多好处，IBM 很快全面转向晶体管<br>09:27 硅谷的典故：很多晶体管和半导体的开发都是这里做的。而生产半导体最常见的材料是硅<br>09:41 肖克利半导体 → 仙童半导体 → 英特尔</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332483&idx=1&sn=81b8c41e6aed65f3e1cf162ac43a4eb5&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-3-集：布尔逻辑和逻辑门"><a href="#第-3-集：布尔逻辑和逻辑门" class="headerlink" title="第 3 集：布尔逻辑和逻辑门"></a>第 3 集：布尔逻辑和逻辑门</h2><p>01:00 什么是二进制, 为什么用二进制, 布尔逻辑<br>02:46 3个基本操作：NOT，AND，OR<br>02:51 解释3个基本操作<br>07:11 XOR 异或</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332495&idx=1&sn=e8158a0af256d87941faf64a2046f8fd&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-4-集：二进制"><a href="#第-4-集：二进制" class="headerlink" title="第 4 集：二进制"></a>第 4 集：二进制</h2><p>00:46 用十进制举例二进制的原理，演示二进制加法。存储单位 MB GB TB 等<br>05:30 正数，负数，整数，浮点数的表示<br>07:20 美国信息交换标准代码 - ASCII, 用来表示字符<br>09:00 UNICODE 1992 年诞生，是字符编码标准， 解决 ASCII 不够表达所有语言的问题</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332499&idx=1&sn=50d16e626d3105f923ed35e066b0957a&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-5-集：算数逻辑单元-ALU"><a href="#第-5-集：算数逻辑单元-ALU" class="headerlink" title="第 5 集：算数逻辑单元 - ALU"></a>第 5 集：算数逻辑单元 - ALU</h2><p>00:03 简单介绍 ALU ，英特尔 74181<br>01:24 ALU 有 2 个单元，1 个算术单元和 1 个逻辑单元</p><p>01:32 算术单元<br>半加器 (处理1个 bit，2个输入)<br>全加器 (处理1个 bit，3个输入)<br>8 bit 加法 (1个半加器，7个全加器）<br>溢出的概念，吃豆人的例子<br>乘法除法</p><p>07:32 逻辑单元<br>检测数字是否为 0 的电路（一堆 OR 门最后加个 NOT 门）<br>ALU 抽象成一个 V 符号<br>Flag 标志（是否相等，是否小于，是否溢出等等）</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332508&idx=1&sn=468c6039ec2024a1912cea410c6a242a&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-6-集：寄存器和内存"><a href="#第-6-集：寄存器和内存" class="headerlink" title="第 6 集：寄存器和内存"></a>第 6 集：寄存器和内存</h2><p>本集重点是 Memory （存储 / 内存 两种含义）</p><p>03:30 存 1 位 (Gated Latch - 锁存器）<br>04:48 存 8 位 (Register - 寄存器)</p><p>05:46 16x16 的矩阵存 256 位<br>数据选择器/多路复用器 (Multiplexer) 解码 8 位地址，定位到单个锁存器</p><p>07:38 4 位代表行， 4 位代表列</p><p>08:16 组合 256 位内存 + 多路复用器<br>09:01 可寻址的 256 字节 内存<br>一条1980年代的内存，1M 大小</p><p>10:14 8个模块，每个模块有32个小方块，<br>每个小方块有 4 个小块，每个小块是 128 位 x 64 位</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332546&idx=1&sn=04731d656e147fcf28a86aefca6fc783&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-7-集：中央处理器（CPU"><a href="#第-7-集：中央处理器（CPU" class="headerlink" title="第 7 集：中央处理器（CPU)"></a>第 7 集：中央处理器（CPU)</h2><p>重点</p><ol><li>拼个 CPU 出来</li><li>CPU 怎么执行命令</li></ol><p>01:00 RAM + 寄存器 + ALU 做个 CPU<br>04:00 解释 “取指令→解释→执行” 这个循环<br>08:00 时钟是什么, 时钟速度和赫兹<br>10:00 超频提升性能, 降频省电</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332548&idx=1&sn=cee51da6b285df82093a5b3f0f85e52e&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-8-集：指令和程序"><a href="#第-8-集：指令和程序" class="headerlink" title="第 8 集：指令和程序"></a>第 8 集：指令和程序</h2><p>本集重点：一步步带你运行一遍程序</p><p>00:45 回顾上集的例子程序，一步步讲解。介绍”指令集”的概念<br>LOAD_A，LOAD_B，SUB，JUMP，ADD，HALT 等指令<br>05:16 带条件跳转，JUMP NEGATIVE 是负数才跳转，还有其他类型的 JUMP<br>08:00 真正现代 CPU 用更多指令集。位数更长。<br>09:07 1971年的英特尔 4004 处理器，有 46 个指令<br>09:36 如今英特尔酷睿 i7, 有上千条指令</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332550&idx=1&sn=95ca6367fd33be3345872ed05f5f09a8&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-9-集：高级-CPU-设计"><a href="#第-9-集：高级-CPU-设计" class="headerlink" title="第 9 集：高级 CPU 设计"></a>第 9 集：高级 CPU 设计</h2><p>00:24 早期是加快晶体管切换速度，来提升 CPU 速度<br>01:20 给 CPU 专门的除法电路 + 其他电路来做复杂操作，比如游戏，视频解码<br>02:28 给 CPU 加缓存，提高数据存取速度，更快喂给 CPU，用计算餐馆销售额举例<br>05:13 脏位 - Dirty bit<br>05:33 流水线设计，用 1 个洗衣机和 1 个干燥机举例<br>06:01 并行处理 - parallelize<br>07:33 乱序执行 - out-of-order execution<br>08:21 推测执行 - speculative execution<br>08:50 分支预测 - branch prediction<br>09:34 多个 ALU<br>09:54 多核 (Core)<br>10:11 多个独立 CPU<br>10:52 超级计算机，中国的”神威 太湖之光”</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=1&sn=45df22c5b11c5855ae8422b774810310&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-10-集：早期的编程方式"><a href="#第-10-集：早期的编程方式" class="headerlink" title="第 10 集：早期的编程方式"></a>第 10 集：早期的编程方式</h2><p>本集重点：早期计算机如何编程<br>打孔纸卡 → 插线板 → 面板拨开关</p><p>00:00 开头说本集重点：程序如何进入计算机<br>00:53 拿纺织业举例，给机器编程的需求远在计算机出现前就有了<br>01:41 打孔纸卡 - Punched card<br>02:36 插线板 - Plugboard<br>04:20 冯诺依曼架构 - Von Neumann Architecture<br>07:00 面板编程 - Panel programming<br>07:29 第一款取得商业成功的家用计算机: Altair 8800<br>08:15 编程依然很困难，人们需要更友好更简单的方式编程<br>08:44 下周主题：编程语言</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=2&sn=500b9c261b5ab97a86f336363acb4311&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-11-集：编程语言发展史"><a href="#第-11-集：编程语言发展史" class="headerlink" title="第 11 集：编程语言发展史"></a>第 11 集：编程语言发展史</h2><p>编程：二进制 → 助记符（汇编器）→ A-0（编译器）→ FORTRAIN</p><p>01:45 二进制写程序，先纸上写伪代码，手工转二进制，很快就烦了<br>02:28 用 “助记符” 写代码（LOAD_A 14）为了把助记符转二进制，汇编器诞生 (Assembler)<br>04:32 葛丽丝·霍普 (Grace Hopper) - 哈佛1号计算机首批程序员, 海军军官<br>05:13 Grace 设计了编程语言 A-0<br>05:29 Grace 1952 年做了第一个编译器 (Compiler)，实现 A-0<br>06:29 变量 (Variables)<br>07:01 FORTRAN<br>08:18 COBOL<br>09:25 新语言<br>1960 年代：ALGOL，LISP，BASIC<br>1970 年代：Pascal，C，Smalltalk<br>1980 年代：C++，Objective-C，Perl<br>1990 年代：Python，Ruby，Java</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=3&sn=2cf6960ed1e3509cf924d0bb0238b554&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-12-集：编程基础-语句和函数"><a href="#第-12-集：编程基础-语句和函数" class="headerlink" title="第 12 集：编程基础 - 语句和函数"></a>第 12 集：编程基础 - 语句和函数</h2><p>00:50 变量, 赋值语句<br>02:08 Grace Hopper 拍虫子游戏<br>02:52 if 判断<br>04:19 while 循环<br>05:48 for 循环<br>07:00 函数<br>11:11 下集介绍算法</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=4&sn=65357a1f0d58662fd065a2d557939e5f&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-13-集：算法入门"><a href="#第-13-集：算法入门" class="headerlink" title="第 13 集：算法入门"></a>第 13 集：算法入门</h2><p>03:00 选择排序 - Selection sort<br>03:52 大 O 表示法 - Big O notation<br>04:31 归并排序 - Merge sort<br>08:03 Dijkstra 算法</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=5&sn=7ef80af31708f62b0b436e9550510f09&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-14-集：数据结构"><a href="#第-14-集：数据结构" class="headerlink" title="第 14 集：数据结构"></a>第 14 集：数据结构</h2><p>00:39 数组 - Array<br>02:06 字符串 - String<br>03:12 矩阵 - Matrix<br>04:05 结构体 - Struct<br>04:46 指针 - Pointer<br>04:44 节点 - Node<br>04:53 链表 - Linked List<br>06:21 队列 - Queue<br>06:21 栈 - Stack<br>07:31 树 - Tree<br>08:01 二叉树 - Binary Tree<br>08:26 图 - Graph<br>08:50 没时间讲红黑树和堆, 不同数据结构适用不同场景</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=6&sn=5092a9435c9533cffd67e06e1ce5da52&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-15-集：阿兰·图灵"><a href="#第-15-集：阿兰·图灵" class="headerlink" title="第 15 集：阿兰·图灵"></a>第 15 集：阿兰·图灵</h2><p>00:33 介绍图灵<br>00:52 可判定性问题<br>01:14 阿隆佐·丘奇，Lambda 算子<br>01:38 图灵机<br>04:54 停机问题<br>08:09 破解德军英格玛加密机<br>10:40 图灵测试<br>11:18 图灵的个人生活<br>12:07 图灵奖</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=7&sn=e9515c7da4f57ac35ea7fa300b239268&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-16-集：软件工程"><a href="#第-16-集：软件工程" class="headerlink" title="第 16 集：软件工程"></a>第 16 集：软件工程</h2><p>01:31 对象 Object<br>02:39 面向对象编程 Object Oriented Programming.<br>03:55 API Application Programming Interface<br>04:33 public, private<br>05:36 集成开发环境, IDE - Integrated Development Environments<br>06:09 调试 debugging<br>06:31 文档和注释 - readme, comment<br>07:33 版本控制 Version control<br>08:50 质量控制 Quality Assurance testing，QA<br>09:21 Beta, Alpha</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=8&sn=923cba8109aa2a1eb05c234a21c8fe2c&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-17-集：集成电路与摩尔定律"><a href="#第-17-集：集成电路与摩尔定律" class="headerlink" title="第 17 集：集成电路与摩尔定律"></a>第 17 集：集成电路与摩尔定律</h2><p>本集重点：晶圆的制作流程：光刻 (04:21~07:42)</p><p>00:51 分立元件 Discrete components<br>01:09 数字暴政 Tyranny of Numbers - 是 1960 年代工程师碰到的问题<br>意思是如果想加强电脑性能，就要更多部件，这导致更多线路，更复杂。所以很难做<br>04:21 光刻 Photolithography<br>04:26 晶圆 Wafer<br>04:57 光刻胶 Photoresist<br>05:08 光掩膜 Photomask<br>06:00 掺杂 Doping<br>09:09 摩尔定律 Moore’s Law.<br>09:38 英特尔 Intel<br>10:20 晶体管数量大幅度增长, 1980年三万个，1990年一百万个，2000年三千万个，2010年十亿个<br>11:44 进一步小型化会碰到 2 个问题 1. 光的波长不足以制作更精细的设计 2. 量子隧穿效应</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=1&sn=a24c3b6816a7e3086a588b2e76ba7d0d&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-18-集：操作系统"><a href="#第-18-集：操作系统" class="headerlink" title="第 18 集：操作系统"></a>第 18 集：操作系统</h2><p>00:48 操作系统 Operating systems<br>01:34 批处理 Batch processing<br>01:58 计算机变便宜变多，有不同配置，写程序处理不同硬件细节很痛苦，因此操作系统负责抽象硬件<br>02:12 外部设备 Peripherals<br>02:48 设备驱动程序 Device drivers<br>04:43 多任务处理 Multitasking<br>05:54 虚拟内存 Virtual Memory<br>07:09 动态内存分配 Dynamic memory allocation<br>07:31 内存保护 Memory Protection<br>07:54 1970年代，计算机足够便宜，大学买了让学生用，多个学生用多个 “终端” 连接到主机<br>08:29 多用户分时操作系统，Multics<br>09:32 Unix<br>11:02 MS-DOS<br>12:09 下集是内存&amp;存储介质</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=2&sn=0534a2703dc2d70dd81b11e2ef58a721&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-19-集：内存-amp-储存介质"><a href="#第-19-集：内存-amp-储存介质" class="headerlink" title="第 19 集：内存&amp;储存介质"></a>第 19 集：内存&amp;储存介质</h2><p>本集重点：存储技术的发展</p><p>01:01 纸卡 Paper punch cards<br>02:01 延迟线存储器 Delay Line Memory<br>04:06 磁芯 Magnetic Core Memory<br>06:08 磁带 Magnetic Tape<br>07:08 磁鼓 Magnetic Drum Memory<br>07:43 硬盘 Hard Disk Drives<br>08:53 内存层次结构 Memory Hierarchy<br>09:36 软盘 Floppy Disk<br>10:09 光盘 Compact Disk<br>10:51 固态硬盘 Solid State Drives</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=3&sn=84dd99e5986fbdd69fc29dd8dd382cdc&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-20-集：文件系统"><a href="#第-20-集：文件系统" class="headerlink" title="第 20 集：文件系统"></a>第 20 集：文件系统</h2><p>00:47 文件格式：可以随便存文件数据，但按格式存会更方便<br>01:00 TXT 文本文件：ASCII<br>01:31 WAV 音频文件：每秒上千次的音频采样数字<br>02:47 BMP 图片文件：像素的红绿蓝 RGB 值<br>04:43 文件系统：很早期时空间小，整个存储器就像一整个文件。后来随容量增长，多文件非常必要<br>05:37 目录文件：用来解决多文件问题，存其他文件的信息，比如开头，结尾，创建时间等</p><p>06:39 平面文件系统 - Flat File System：文件都在同一个层次，早期空间小，只有十几个文件，平面系统够用</p><p>06:57 如果文件紧密的一个个前后排序会造成问题，所以文件系统会：1. 把空间划分成一块块 2. 文件拆分存在多个块里</p><p>08:30 文件的增删改查会不可避免的造成文件散落在各个块里，<br>如果是磁带这样的存储介质就会造成问题，所以做碎片整理</p><p>09:46 分层文件系统 - Hierarchical File System：有不同文件夹，文件夹可以层层嵌套</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=4&sn=c1aae0a42beba1e06dbaac6fd6298727&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-21-集：压缩"><a href="#第-21-集：压缩" class="headerlink" title="第 21 集：压缩"></a>第 21 集：压缩</h2><p>00:26 压缩的好处是能存更多文件，传输也更快<br>01:52 游程编码 Run-Length Encoding<br>02:45 无损压缩 Lossless compression<br>03:55 霍夫曼树 Huffman Tree<br>05:56 “消除冗余”和”用更紧凑的表示方法”，这两种方法通常会组合使用<br>06:07 字典编码 Dictionary coders, 游程编码 和 字典编码 都是无损压缩<br>08:03 感知编码 Perceptual coding<br>08:09 有损压缩 jpeg 格式<br>09:39 时间冗余 Temporal redundancy<br>10:30 MPEG-4 视频编码</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=5&sn=15db85347ba7350267398c6d808556d6&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-22-集：命令行界面"><a href="#第-22-集：命令行界面" class="headerlink" title="第 22 集：命令行界面"></a>第 22 集：命令行界面</h2><p>本集重点：计算机早期同时输入程序和数据（用纸卡/纸带）<br>运行开始直到结束，中间没有人类进行操作，<br>原因是计算机很贵，不能等人类慢慢输入，执行完结果打印到纸上 (02:34)</p><p>到1950年代，计算机足够便宜+快，人类和计算机交互式操作变得可行<br>为了让人类输入到计算机，改造之前就有的打字机，变成电传打字机 (02:44~05:38)</p><p>到1970年代末，屏幕成本足够低，屏幕代替电传打字机，屏幕成为标配 (07:24)</p><p>00:32 人机交互 Human-Computer Interaction<br>00:50 早期输出数据是打印到纸上，而输入是用纸卡/纸带一次性把程序和数据都给进去<br>03:00 QWERTY 打字机的发展，克里斯托弗·莱瑟姆·肖尔斯 发明于 1868 年<br>05:38 电传打字机 Teletype machine<br>06:32 命令行界面 Command line interface<br>06:38 ls 命令<br>08:22 早期文字游戏 Zork (1977年)<br>08:47 cd 命令</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=6&sn=f28a991af18239819e366685132db3ae&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-23-集：屏幕与-2D-图形显示"><a href="#第-23-集：屏幕与-2D-图形显示" class="headerlink" title="第 23 集：屏幕与 2D 图形显示"></a>第 23 集：屏幕与 2D 图形显示</h2><p>00:05 PDP-1 计算机。键盘和显示器分开，屏幕显示临时值<br>01:14 阴极射线管 Cathode Ray Tube (CRT)<br>01:38 CRT 有两种绘图方式：<br>矢量扫描 Vector Scanning<br>光栅扫描 Raster Scanning</p><p>02:14 液晶显示器 Liquid Crystal Displays (LCD)，像素 (Pixel)<br>03:32 字符生成器 Character generator<br>03:45 屏幕缓冲区 Screen buffer<br>05:09 矢量命令画图<br>06:34 Sketchpad, 光笔 (Light pen)<br>09:00 函数画线，矩形</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=7&sn=6bf33eb1a6ad59844ab3a83abf8ad209&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-24-集：冷战和消费主义"><a href="#第-24-集：冷战和消费主义" class="headerlink" title="第 24 集：冷战和消费主义"></a>第 24 集：冷战和消费主义</h2><p>本集重点：冷战导致美国往计算机领域投入大量资源 (00:00~01:43)</p><p>范内瓦·布什 预见了计算机的潜力，提出假想机器 Memex<br>帮助建立 国家科学基金会，给科学研究提供资金 (01:43~03:43)</p><p>1950 年代消费者开始买晶体管设备，收音机大卖<br>日本取得晶体管授权后，索尼做了晶体管收音机，为日本半导体行业崛起埋下种子 (03:43~04:29）</p><p>苏联 1961 年把宇航员加加林送上太空，导致美国提出登月<br>NASA 预算大大增加，用集成电路来制作登月计算机 (04:29~06:27)</p><p>集成电路的发展实际上是由军事应用大大推进的，阿波罗登月毕竟只有 17 次<br>美国造超级计算机进一步推进集成电路 (04:29~07:11)</p><p>美国半导体行业一开始靠政府高利润合同活着，忽略消费者市场，1970年代冷战渐消，行业开始衰败<br>很多公司倒闭，英特尔转型处理器 (07:11~08:23)</p><p>末尾总结：政府和消费者推动了计算机的发展<br>早期靠政府资金，让技术发展到足够商用，然后消费者购买商用产品继续推动产品发展 (08:23~10:41)</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=8&sn=194d09c419655694c7c9c06665b9333d&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-25-集：个人计算机革命"><a href="#第-25-集：个人计算机革命" class="headerlink" title="第 25 集：个人计算机革命"></a>第 25 集：个人计算机革命</h2><p>本集：全是历史故事<br>00:18 1970年代初成本下降，个人计算机变得可行<br>01:51 Altair 8800<br>02:32 比尔·盖茨 和 保罗·艾伦写 BASIC 解释器<br>03:45 乔布斯提议卖组装好的计算机，Apple-I 诞生<br>04:40 1977年出现3款开箱即用计算机：<br>“Apple-II”，”TRS-80 Model I”，”Commodore PET 2001”</p><p>06:26 IBM 意识到个人计算机市场<br>IBM PC 发布，采用开放架构，兼容的机器都叫 IBM Compatible (IBM 兼容)<br>生态系统产生雪球效应：<br>因为用户多，软硬件开发人员更愿意花精力在这个平台<br>因为软硬件多，用户也更乐意买 “IBM 兼容” 的计算机</p><p>08:44 苹果选封闭架构，一切都自己来，只有苹果在非 “IBM 兼容” 下保持了足够市场份额</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=1&sn=cf11b7f28a6d2da2821c4eb85fa94ba3&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-26-集：图形用户界面-GUI"><a href="#第-26-集：图形用户界面-GUI" class="headerlink" title="第 26 集：图形用户界面 (GUI)"></a>第 26 集：图形用户界面 (GUI)</h2><p>01:10 图形界面先驱：道格拉斯·恩格尔巴特（Douglas Engelbart）<br>03:20 1970年成立 帕洛阿尔托研究中心（Palo Alto Research Center）<br>03:29 1973年完成 Xerox Alto(施乐奥托) 计算机<br>04:42 举例：写一个简单的 GUI 程序<br>06:38 1981年的 Xerox Star system(施乐之星系统)<br>08:18 史蒂夫·乔布斯去施乐参观<br>07:45 所见即所得 WYSIWYG<br>09:15 1983年推出 Apple Lisa<br>09:31 1984年推出 Macintosh<br>10:12 1985年推出 Windows 1.0，之后出到 3.1<br>10:43 1995年推出 Windows 95 提供图形界面<br>11:08 1995年微软做失败的 Microsoft Bob</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=2&sn=27c8e90c107b36488428b3c658b05606&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-27-集：3D-图形"><a href="#第-27-集：3D-图形" class="headerlink" title="第 27 集：3D 图形"></a>第 27 集：3D 图形</h2><p>01:15 线框渲染 Wireframe Rendering<br>01:39 正交投影 Orthographic Projection<br>01:50 透视投射 Perspective Projection<br>02:14 网格 Mesh<br>02:37 三角形更常用因为能定义唯一的平面<br>03:09 扫描线渲染 Scanline Rendering<br>05:04 遮挡 Occlusion<br>05:19 画家算法 Painter’s Algorithm<br>06:09 深度缓冲 Z Buffering<br>07:45 Z Fighting 错误<br>07:51 背面剔除 Back Face Culling<br>08:53 表面法线 Surface Normal<br>09:33 平面着色 Flat Shading<br>09:43 高洛德着色 Gouraud shading, 冯氏着色 Phong Shading<br>10:06 纹理映射 Texture Mapping<br>11:24 图形处理单元 GPU, Graphics Processing Unit</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=3&sn=1d89424d005bf9e9e517428ee8c51898&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-28-集：计算机网络"><a href="#第-28-集：计算机网络" class="headerlink" title="第 28 集：计算机网络"></a>第 28 集：计算机网络</h2><p>02:05 局域网 Local Area Networks - LAN<br>02:36 媒体访问控制地址 Media Access Control address - MAC<br>02:55 载波侦听多路访问 Carrier Sense Multiple Access - CSMA<br>05:18 指数退避 Exponential Backoff<br>05:36 冲突域 Collision Domain<br>07:08 电路交换 Circuit Switching<br>07:36 报文交换 Message Switching<br>10:20 分组交换 Packet Switching</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=4&sn=54e4857e78c0bc4d4eea7e28544a8274&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-29-集：互联网"><a href="#第-29-集：互联网" class="headerlink" title="第 29 集：互联网"></a>第 29 集：互联网</h2><p>02:23 IP - 互联网协议 - Internet Protocol<br>03:00 UDP - 用户数据报协议 - User Datagram Protocol<br>03:41 校验和 - Checksum<br>05:26 TCP - 传输控制协议 - Transmission Control Protocol<br>08:21 DNS - 域名系统 - Domain Name System<br>10:47 OSI - 开放式系统互联通信参考模型 - Open System Interconnection</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=5&sn=f9b9e92e1e143fb9bb0dfcafcb89b3fe&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-30-集：万维网"><a href="#第-30-集：万维网" class="headerlink" title="第 30 集：万维网"></a>第 30 集：万维网</h2><p>01:01 超链接 Hyperlinks<br>02:20 URL - 统一资源定位器 - Uniform Resource Locator<br>03:01 HTTP - 超文本传输协议 - HyperText Transfer Protocol<br>04:13 HTML - 超文本标记语言 - HyperText Markup Language<br>04:24 写一个简单网页，用到了 </p><h1> <a> <h2> <ol> <li> 标签<br>06:04 第一个浏览器和服务器是 Tim Berners-Lee 花了 2 个月在 CERN 写的<br>06:32 1991年正式发布，万维网就此诞生<br>07:19 开始讲搜索引擎的故事<br>07:40 Jerry 和 David 的万维网指南 后来改名成 Yahoo<br>07:52 搜索引擎 JumpStation<br>09:07 搜索引擎 Google<br>09:20 网络中立性<p></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=6&sn=fceb1f237508e4c5ca5bcf4adfde0b02&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-31-集：计算机安全"><a href="#第-31-集：计算机安全" class="headerlink" title="第 31 集：计算机安全"></a>第 31 集：计算机安全</h2><p>01:00 Secrecy, Integrity, Availability<br>保密性, 完整性, 可用性<br>01:49 Threat Model 威胁模型</p><p>03:14 身份验证 (Authentication) 的三种方式：<br>What you know, 你知道什么<br>What you have, 你有什么<br>What you are, 你是什么</p><p>07:34 访问控制 Access Control<br>08:48 Bell LaPadula model 不能向上读取，不能向下写入<br>11:00 隔离 Isolation, 沙盒 Sandbox</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=7&sn=7d37278bf449da76a277d6074372a927&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-32-集：黑客与攻击"><a href="#第-32-集：黑客与攻击" class="headerlink" title="第 32 集：黑客与攻击"></a>第 32 集：黑客与攻击</h2><p>01:28 社会工程学 Social Engineering<br>01:38 钓鱼 Phishing<br>02:06 假托 Pretexting<br>02:50 木马 Trojan Horses<br>03:32 NAND镜像 NAND Mirroring<br>04:12 漏洞利用 Exploit<br>04:16 缓冲区溢出 Buffer Overflow<br>05:45 边界检查 Bounds Checking<br>06:16 代码注入 Code Injection<br>09:32 零日漏洞 Zero Day Vulnerability<br>09:53 计算机蠕虫 Worms<br>09:58 僵尸网络 Botnet<br>10:11 拒绝服务攻击 DDoS</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=8&sn=f998cdfd5db8942aa6702a844d657a3a&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-33-集：加密"><a href="#第-33-集：加密" class="headerlink" title="第 33 集：加密"></a>第 33 集：加密</h2><p>00:16 多层防御 Defence in depth<br>01:00 加密 - Encryption，解密 - Decryption<br>01:11 凯撒加密 Caesar cipher<br>01:27 替换加密 Substitution cipher<br>01:59 移位加密 Permutation cipher<br>02:03 列移位加密 Columnar transposition cipher<br>02:37 德国 Enigma 加密机<br>04:54 1977年”数据加密标准” - Data Encryption Standard (DES)<br>05:24 2001年”高级加密标准” - Advanced Encryption Standard (AES)<br>07:06 密钥交换 - Key exchange<br>07:33 用颜色来举例”单向函数”和”密钥加密”的原理<br>08:24 迪菲-赫尔曼密钥交换 - Diffie-Hellman Key Exchange<br>10:18 非对称加密 - Asymmetric encryption<br>11:22 非对称加密算法 RSA</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=1&sn=79010cc0f310a8e35d87493470bd033a&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-34-集：机器学习与人工智能"><a href="#第-34-集：机器学习与人工智能" class="headerlink" title="第 34 集：机器学习与人工智能"></a>第 34 集：机器学习与人工智能</h2><p>01:23 分类 Classification<br>01:25 分类器 Classifier<br>01:34 特征 Feature<br>02:03 标记数据 Labeled data<br>02:38 决策边界 Decision boundaries<br>03:00 混淆矩阵 Confusion matrix<br>03:39 未标签数据 Unlabeled data<br>03:49 决策树 Decision tree<br>04:25 支持向量机 Support Vector Machines<br>05:52 人工神经网络 Artificial Neural Network<br>08:34 深度学习 Deep learning<br>09:21 弱AI, 窄AI Weak AI, Narrow AI<br>09:43 强AI Strong AI<br>10:42 强化学习 Reinforcement Learning</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=2&sn=fa75d481b03123eb08d4f79a7cf8ba46&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-35-集：计算机视觉"><a href="#第-35-集：计算机视觉" class="headerlink" title="第 35 集：计算机视觉"></a>第 35 集：计算机视觉</h2><p>02:41 检测垂直边缘的算法<br>03:26 核/过滤器 kernel or filter<br>03:56 卷积 convolution<br>04:23 Prewitt 算子 Prewitt Operators<br>05:34 维奥拉·琼斯 人脸检测 Viola-Jones Face Detection<br>05:35 卷积神经网络 Convolutional Neural Networks<br>07:33 识别出脸之后，可以进一步用其他算法定位面部标志，如眼睛和眉毛具体位置，从而判断心情等信息<br>08:52 跟踪全身的标记点，如肩部，手臂等</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=3&sn=248eb9f5a97465c466364145217f8109&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-36-集：自然语言处理"><a href="#第-36-集：自然语言处理" class="headerlink" title="第 36 集：自然语言处理"></a>第 36 集：自然语言处理</h2><p>01:50 词性 Parts of speech<br>02:15 短语结构规则 Phrase structure rules<br>02:32 分析树 Parse tree<br>05:30 语音识别 Speech recognition<br>07:26 谱图 Spectrogram<br>07:44 快速傅立叶变换 Fast Fourier Transform<br>08:42 音素 Phonemes<br>09:29 语音合成 Speech Synthesis</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=4&sn=66ce52c92b9ffcaa7edbfeee25798a0c&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-37-集：机器人"><a href="#第-37-集：机器人" class="headerlink" title="第 37 集：机器人"></a>第 37 集：机器人</h2><p>02:08 法国吃饭鸭 - Digesting Duck, Canard Digerateur<br>02:23 土耳其行棋傀儡, 下国际象棋<br>02:43 第一台计算机控制的机器出现在1940年代晚期，叫数控机器, Computer Numerical Control(CNC)<br>03:32 1960年 Unimate，第一个商业贩卖的 可编程工业机器人<br>03:47 简单控制回路 simple control loop<br>04:08 负反馈回路 negative feedback loop<br>05:17 比例-积分-微分控制器 Proportional–Integral–Derivative controller PID 控制器<br>10:48 机器人三定律 Three Laws of Robotics</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=5&sn=b323f8ad0e5bb934edf0da32c8e21451&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-38-集：计算机心理学"><a href="#第-38-集：计算机心理学" class="headerlink" title="第 38 集：计算机心理学"></a>第 38 集：计算机心理学</h2><p>00:45 我们需要了解人类心理学，做出更好的计算机<br>01:12 易用度 - Usability<br>01:31 颜色强度排序 和 颜色排序<br>02:30 分组更好记，电话号码 317-555-3897 比 3175553897 好记<br>03:25 直观功能 - Affordances<br>04:33 认出 vs 回想 Recognition vs Recall<br>05:45 让机器有一定情商以及 Facebook 的研究<br>08:40 用软件修正注视位置。让视频通话时看起来像盯着对方，而不是盯着下方<br>09:58 把机器人做的像人，恐怖谷理论<br>11:35 有很多开放式的问题，心理学帮助我们明白不同选择可能带来的影响</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=6&sn=038ee84642f021ee686b618a26c93d07&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-39-集：教育科技"><a href="#第-39-集：教育科技" class="headerlink" title="第 39 集：教育科技"></a>第 39 集：教育科技</h2><p>02:15 通过调速，暂停等技巧，加强学习效率<br>03:15 大型开放式在线课程 - Massive Open Online Courses (MOOC)<br>05:08 智能辅导系统 - Intelligent Tutoring Systems<br>05:22 判断规则 - Production rule<br>06:10 域模型 - Domain Model<br>06:46 贝叶斯知识追踪 Bayesian knowledge tracing</p><ol><li><p>学生已经学会的概率</p></li><li><p>瞎猜的概率</p></li><li><p>失误的概率</p></li><li><p>做题过程中学会的概率<br>09:27 教育数据挖掘 Educational Data Mining</p></li></ol><p>   <a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=7&sn=7504c049625737c4c670bfa1e923fde7&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-40-集：奇点，天网，计算机的未来"><a href="#第-40-集：奇点，天网，计算机的未来" class="headerlink" title="第 40 集：奇点，天网，计算机的未来"></a>第 40 集：奇点，天网，计算机的未来</h2><p>01:21 普适计算 Ubiquitous Computing<br>04:55 奇点 Singularity<br>06:51 把工作分为4个象限，讨论自动化带来的影响<br>10:15 机器人的存在时间可能长过人类，可以长时间探索宇宙</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=8&sn=95e969c4ae14e015977eb0b804804d88&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a>](<a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&amp;mid=2458332470&amp;idx=1&amp;sn=81c3a54311c9cc9824127cbe64a9942e&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&amp;mid=2458332470&amp;idx=1&amp;sn=81c3a54311c9cc9824127cbe64a9942e&amp;scene=21#wechat_redirect</a>)</p></li></ol></h2></a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一文讲通少儿编程</title>
      <link href="/2020/03/01/yi-wen-jiang-tong-shao-er-bian-cheng/"/>
      <url>/2020/03/01/yi-wen-jiang-tong-shao-er-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、编程语言"><a href="#一、编程语言" class="headerlink" title="一、编程语言"></a>一、编程语言</h2><p>小朋友最先接触的编程是语言，使用母语进行日常生活的交流，课里课外学习着第二语言——英语。除了这两门语言之外，在信息时代，小朋友有必要学习第三门语言，编程语言。进入信息时代，免不了跟计算机打交道，而编程语言就是跟电脑交流的语言。</p><p>小朋友最适合学习图像类的编程语言，调动起丰富的想象力的同时，也锻炼了逻辑思维能力，这背后我们把它归结为计算思维与形象思维这两种能力。计算思维让我们用人类的理性面对这个世界，形象思维让我们可以脱离这个世界到想象的时空遨游。家里有不听话的小孩，让他来学编程吧。</p><p>学习编程语言首当其冲的就是遇到工具的选择，每种工具有其特定的场景和使用范围，入门陪小猫玩Scratch，提高找蟒蛇Python，上战场竞赛找C++。从蒟蒻到神犇，编程语言带你走进神奇的计算机科学世界。</p><p>我们需要定义少儿的年龄范围，从六岁到十八岁是一个合理的范围。</p><p>根据少儿的思维发展特性来看，很适合从画图切入，形象生动，可以和同伴互相比较。Scratch以下统称sc，sc可以练经典40图；Python以下统称py，py可以练turtle画图；C++以下统称cpp，cpp可以练goc画图。一旦小朋友学了一遍以后，就会很快理解语言这是外壳，用数据结构组织的内在的算法都是相通的。</p><h2 id="二、算法"><a href="#二、算法" class="headerlink" title="二、算法"></a>二、算法</h2><p>通过锻炼虚拟世界问题的方法，来解决现实世界问题的方法</p><h2 id="三、数据结构"><a href="#三、数据结构" class="headerlink" title="三、数据结构"></a>三、数据结构</h2><p>生命是非平衡系统并以负熵为生</p><h2 id="四、数学"><a href="#四、数学" class="headerlink" title="四、数学"></a>四、数学</h2><p>万道归一</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>慧通教育C++闯关第4关</title>
      <link href="/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-4-guan/"/>
      <url>/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-4-guan/</url>
      
        <content type="html"><![CDATA[<p>for循环二，数学知识，贪心，模拟</p><h3 id="926-最大值"><a href="#926-最大值" class="headerlink" title="926.最大值"></a><strong>926.</strong>最大值</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入N个整数，求其中最大值。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行1个整数N：范围在[1,200]。<br> 第二行N个整数：每个整数范围在[-10000000,100000000]。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数。</p><h3 id="输入-输出例子1"><a href="#输入-输出例子1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4<br>3  6  1  9</p><p>输出：</p><p>9</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;limits.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxVal <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>        cin <span class="token operator">>></span> num<span class="token punctuation">;</span>        maxVal <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> maxVal <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 慧通教育C++闯关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慧通教育C++闯关第3关</title>
      <link href="/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-3-guan/"/>
      <url>/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-3-guan/</url>
      
        <content type="html"><![CDATA[<h3 id="912-买水果"><a href="#912-买水果" class="headerlink" title="912.买水果"></a><strong>912.</strong>买水果</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>萌萌和瞳瞳各拿N元去买苹果和西瓜，已知每个苹果的价格是a、每个西瓜的价格是b。萌萌要求N元买苹果全部正好用完；瞳瞳的要求N元买西瓜后正好剩3元作为请人运输的费用。<br>如果N至少是100，请问N最少是多少？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行2个正整数：a和b，a范围在[1,20], b范围在[4,20]</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个不小于100的正整数。</p><h3 id="输入-输出例子1"><a href="#输入-输出例子1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>7  13</p><p>输出：</p><p>133</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> b <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="913-1或2"><a href="#913-1或2" class="headerlink" title="913.1或2"></a><strong>913.</strong>1或2</h3><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>萌萌才2岁，观看NBA时，对队员身上的号码感兴趣，可她只认识数字’1’和’2’，如果号码中有数字’1’或数字’2’，萌萌就会兴奋的大叫。现在，萌萌看到电视画面上有N个队员的号码，请问哪些号码会让萌萌大叫？</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行1个正整数：N，范围在[1,10]。<br> 第二行N个整数：每个整数范围在[1,99]</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行，包含’1’或’2’的整数。</p><h3 id="输入-输出例子1-1"><a href="#输入-输出例子1-1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>5<br>3  11  4  44  25</p><p>输出：</p><p>11  25</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n为n个正整数 //i为遍历n个正整数 //m为接受输入的n个正整数</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> m<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> m <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> m <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> m <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="914-and和or"><a href="#914-and和or" class="headerlink" title="914.and和or"></a><strong>914.</strong>and和or</h3><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入2个正整数a和b。如果a和b都是偶数，或者a和b都是3的倍数，就输出’1’；否则输出’0’。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行2个正整数：a和b，范围在[1,100]。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行，1或0。</p><h3 id="输入-输出例子1-2"><a href="#输入-输出例子1-2" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 24  7</p><p>输出：</p><p>0</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="915-在区间里"><a href="#915-在区间里" class="headerlink" title="915.在区间里"></a><strong>915.</strong>在区间里</h3><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个正整数a、b和c，如果c在区间[a, b]内输出”in”，否则输出”out”。<br>注意：方括号表示的是闭区间，[a, b]是包括a和b的。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、b和c，范围在[1, 1000000]，a ≤ b。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p> in或out。</p><h3 id="输入-输出例子1-3"><a href="#输入-输出例子1-3" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4  8  5</p><p>输出：</p><p>in</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span>b<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"in"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"out"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="916-区间交集"><a href="#916-区间交集" class="headerlink" title="916.区间交集"></a><strong>916.</strong>区间交集</h3><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入5个正整数a1、b1、a2、b2和c，如果c在区间[a1, b1]内 并且 c也在区间[a2, b2]内 输出”in”，否则输出”out”。<br>注意：方括号表示的是闭区间，[a, b]是包括a和b的。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行5个正整数：a1、b1、a2、b2和c，范围在[1, 1000000]，a1 ≤ b1，a2 ≤ b2。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p>in或out。</p><h3 id="输入-输出例子1-4"><a href="#输入-输出例子1-4" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4  8  6  10  5</p><p>输出：</p><p>out</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a1 <span class="token operator">>></span> b1 <span class="token operator">>></span> a2 <span class="token operator">>></span> b2 <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> a1 <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> b1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> a2 <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> b2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"in"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"out"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="917-区间并集"><a href="#917-区间并集" class="headerlink" title="917.区间并集"></a><strong>917.</strong>区间并集</h3><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入5个正整数a1、b1、a2、b2和c，如果c在区间[a1, b1]内 或者 在区间[a2, b2]内 输出”in”，否则输出”out”。<br>注意：方括号表示的是闭区间，[a, b]是包括a和b的。</p><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行5个正整数：a1、b1、a2、b2和c，范围在[1, 1000000]，a1 ≤ b1，a2 ≤ b2。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p>in或out。</p><h3 id="输入-输出例子1-5"><a href="#输入-输出例子1-5" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 4  8  6  10  5</p><p>输出：</p><p>in</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a1 <span class="token operator">>></span> b1 <span class="token operator">>></span> a2 <span class="token operator">>></span> b2 <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> a1 <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> b1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> a2 <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> b2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"in"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"out"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="918-最大值"><a href="#918-最大值" class="headerlink" title="918.最大值"></a><strong>918.</strong>最大值</h3><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个整数a、b和c，输出其中的最大值。</p><h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行3个正整数：a、b和c，范围在[1,10000]。</p><h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个正整数。</p><h3 id="输入-输出例子1-6"><a href="#输入-输出例子1-6" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 5  10  6</p><p>输出：</p><p>10</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> max<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        max <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        max <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">></span> max<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        max <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> max<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="919-3数排序"><a href="#919-3数排序" class="headerlink" title="919.3数排序"></a><strong>919.</strong>3数排序</h3><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个整数a、b和c，按从大到小输出。</p><h3 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行3个正整数：a、b和c，范围在[1,10000]。</p><h3 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h3><p>排序后的3个数。</p><h3 id="输入-输出例子1-7"><a href="#输入-输出例子1-7" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>5  10  6</p><p>输出：</p><p>10  6  5</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> temp <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> c<span class="token punctuation">,</span> c <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span>  b <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="920-求最小值"><a href="#920-求最小值" class="headerlink" title="920.求最小值"></a><strong>920.</strong>求最小值</h3><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入 4 个整数，求它们之中最小的。</p><h3 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行4个整数，范围在[1,30]。</p><h3 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h3><p>只一个整数。</p><h3 id="输入-输出例子1-8"><a href="#输入-输出例子1-8" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>12  8  5  6</p><p>输出：</p><p>5</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> min<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c <span class="token operator">>></span> d<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> min <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> min<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="921-排名"><a href="#921-排名" class="headerlink" title="921.排名"></a><strong>921.</strong>排名</h3><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个整数a、b和c表示3名运动员操场跑3圈用的时间，按到达的先后，输出这3个数。</p><h3 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、b和c，范围在[1,10000]。</p><h3 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h3><p>排序后的3个数。</p><h3 id="输入-输出例子1-9"><a href="#输入-输出例子1-9" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>500  1000  600</p><p>输出：</p><p>500  600  1000</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">></span> c<span class="token punctuation">)</span> temp <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> c<span class="token punctuation">,</span> c <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span>  b <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="922-中间数"><a href="#922-中间数" class="headerlink" title="922.中间数"></a><strong>922.</strong>中间数</h3><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个不同的整数a、b和c，输出中间大小的数。</p><h3 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行3个正整数：a、b和c，范围在[1,10000]。</p><h3 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出中间大小的数</p><h3 id="输入-输出例子1-10"><a href="#输入-输出例子1-10" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>500  1000  600</p><p>输出：</p><p>600</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> temp <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> c<span class="token punctuation">,</span> c <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="923-判断闰年"><a href="#923-判断闰年" class="headerlink" title="923.判断闰年"></a><strong>923.</strong>判断闰年</h3><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><p>闰年(Leap Year)是为了弥补因人为历法规定造成的年度天数与地球实际公转周期的时间<br>差而设立的。补上时间差的年份为闰年。闰年有 366 天!<br>闰年计算<br>① 普通年能被 4 整除且不能被 100 整除的为闰年。<br>② 世纪年（整百年）能被 400 整除的是闰年。(如 2000 年是闰年，1900 年不是闰年)<br>现在输入一个表示年的整数 y，判断是不是闰年。是输出“yes” ，不是输出“no” 。</p><h3 id="输入格式-11"><a href="#输入格式-11" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行 1 个正整数：y，范围在[1,100000000]。</p><h3 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式"></a>输出格式</h3><p>yes 或 no。</p><h3 id="输入-输出例子1-11"><a href="#输入-输出例子1-11" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>3512</p><p>输出：</p><p>yes</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>  <span class="token keyword">int</span> year<span class="token punctuation">;</span>  cin<span class="token operator">>></span>year<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>                  cout<span class="token operator">&lt;&lt;</span><span class="token string">"yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"no"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="924-天数"><a href="#924-天数" class="headerlink" title="924.天数"></a><strong>924.</strong>天数</h3><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><p>每年的12月份，因为到年底，大家就想知道今年已经度过了多少天(包括d号)。<br>输入2 个正整数y、和d，表示y年12月d日，问这个日期是当年的第几天？</p><h3 id="输入格式-12"><a href="#输入格式-12" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行1个整数y，范围在[1,100000000]。<br> 第二行1个整数d，范围在[1,31]。</p><h3 id="输出格式-12"><a href="#输出格式-12" class="headerlink" title="输出格式"></a>输出格式</h3><p>只一个整数。</p><h3 id="输入-输出例子1-12"><a href="#输入-输出例子1-12" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>2016  17</p><p>输出：</p><p>352</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>  <span class="token keyword">int</span> year<span class="token punctuation">,</span> day<span class="token punctuation">;</span>  cin <span class="token operator">>></span> year <span class="token operator">>></span> day<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>      day <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">335</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>      day <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">334</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> day<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 慧通教育C++闯关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慧通教育C++闯关第2关</title>
      <link href="/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-2-guan/"/>
      <url>/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-2-guan/</url>
      
        <content type="html"><![CDATA[<p>for循环一，循环变量的应用</p><h3 id="897-a到b"><a href="#897-a到b" class="headerlink" title="897.a到b"></a><strong>897.</strong>a到b</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入2个1000以内的正整数a和b，a &lt; b，输出从a到b的所有整数，数字之间留一个空格。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行2个正整数：a和b，a &lt; b，范围在[1,1000]。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行，从a到b的正整数。</p><h3 id="输入-输出例子1"><a href="#输入-输出例子1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 4  6</p><p>输出：</p><p> 4 5 6</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="898-2位偶数"><a href="#898-2位偶数" class="headerlink" title="898.2位偶数"></a><strong>898.</strong>2位偶数</h3><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>输出所有的2位偶数，数字之间留一个空格。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行，所有2位数偶数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">98</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="899-从0开始"><a href="#899-从0开始" class="headerlink" title="899.从0开始"></a>899.从0开始</h3><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>C语言编程中，数数喜欢从0开始。比如数数5次为: 0,1,2,3,4，其中的妙处只有高级的C程序员知道。<br>现在输入n，要你按照C程序员的方式数数。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行1个正整数：n，范围在[1,1000]。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行n个整数：0 1 2…。</p><h3 id="输入-输出例子1-1"><a href="#输入-输出例子1-1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4</p><p>输出：</p><p> 0 1 2 3</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> n<span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="900-前面数"><a href="#900-前面数" class="headerlink" title="900.前面数"></a><strong>900.</strong>前面数</h3><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>如果你知道一个整数a，想输出a前面的N个数，怎么办？</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行2个正整数：a和N，范围在[1,10000]。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行n个整数：……a-2  a-1</p><h3 id="输入-输出例子1-2"><a href="#输入-输出例子1-2" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 10  5</p><p>输出：</p><p> 5 6 7 8 9</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>N<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>N<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token operator">-</span>N<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="901-奇数"><a href="#901-奇数" class="headerlink" title="901.奇数"></a><strong>901.</strong>奇数</h3><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定N，输出1到N之间的奇数。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行1个正整数：N，范围在[1,10000]。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p> [1…N]内的正奇数。</p><h3 id="输入-输出例子1-3"><a href="#输入-输出例子1-3" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>10</p><p>输出：</p><p> 1 3 5 7 9</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>  cin<span class="token operator">>></span>N<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="902-7的倍数"><a href="#902-7的倍数" class="headerlink" title="902.7的倍数"></a><strong>902.</strong>7的倍数</h3><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>从小到大输出所有3位数中7的倍数的数。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行整数，之间用空格隔开。</p><h3 id="输入-输出例子1-4"><a href="#输入-输出例子1-4" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>输出：</p><p> 105  112……</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">999</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">7</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="903-k的幂"><a href="#903-k的幂" class="headerlink" title="903.k的幂"></a><strong>903.</strong>k的幂</h3><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个正整数k，输出:k  k<em>k  k</em>k*k……，当超过8位数时停止。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行1个整数k，范围在[2,15]。</p><h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行，多个k的幂。</p><h3 id="输入-输出例子1-5"><a href="#输入-输出例子1-5" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>15</p><p>输出：</p><p> 15  225  3375  50625  759375  11390625</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> k<span class="token punctuation">;</span>  cin<span class="token operator">>></span>k<span class="token punctuation">;</span>  <span class="token keyword">long</span> result<span class="token operator">=</span>k<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//超过8位数，即变成9位数或以上</span>  <span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>result<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    result<span class="token operator">*</span><span class="token operator">=</span>k<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="904-等差数列"><a href="#904-等差数列" class="headerlink" title="904.等差数列"></a><strong>904.</strong>等差数列</h3><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>一列数，如果相邻2个的差都相等，就叫等差数列。例如：2,5,8,11,14….。<br>现在给定开始数a和差d，输出第n项。</p><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、d和n，范围在[-100,100]。</p><h3 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行n个整数。</p><h3 id="输入-输出例子1-6"><a href="#输入-输出例子1-6" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4 5 6</p><p>输出：</p><p>29</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>d<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">long</span> result<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token operator">+</span><span class="token operator">=</span>d<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="905-双等差数列"><a href="#905-双等差数列" class="headerlink" title="905.双等差数列"></a><strong>905.</strong>双等差数列</h3><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>求下列双等差数列的第N项。<br>1 2 4 7 11 16 22…</p><h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行1个正整数：N，范围在[1,100]。</p><h3 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h3><p> 1个整数。</p><h3 id="输入-输出例子1-7"><a href="#输入-输出例子1-7" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4</p><p>输出：</p><p>7</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>  cin<span class="token operator">>></span>N<span class="token punctuation">;</span>  <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token operator">+</span><span class="token operator">=</span>d<span class="token punctuation">;</span>    d<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="906-打印数列1"><a href="#906-打印数列1" class="headerlink" title="906.打印数列1"></a><strong>906.</strong>打印数列1</h3><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>打印下面数列的前N项。<br>1  4  10  19  31  46….</p><h3 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行1个整数n，范围在[1,100]。</p><h3 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行，N个整数。</p><h3 id="输入-输出例子1-8"><a href="#输入-输出例子1-8" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4</p><p>输出：</p><p> 1  4  10  19</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>  cin<span class="token operator">>></span>N<span class="token punctuation">;</span>  <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token operator">+</span><span class="token operator">=</span>d<span class="token punctuation">;</span>    d<span class="token operator">+</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 慧通教育C++闯关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慧通教育C++闯关第1关</title>
      <link href="/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-1-guan/"/>
      <url>/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-1-guan/</url>
      
        <content type="html"><![CDATA[<h3 id="第1关"><a href="#第1关" class="headerlink" title="第1关"></a>第1关</h3><p>余数和条件语句的应用</p><h3 id="888-哪个大？"><a href="#888-哪个大？" class="headerlink" title="888.哪个大？"></a>888.哪个大？</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入2个1000000以内的正整数a和b，输出它们中的较大的数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行2个正整数：a和b，范围在[1,1000000]。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一个正整数。</p><h3 id="输入-输出例子1"><a href="#输入-输出例子1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>5    6</p><p>输出：</p><p>6</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="889-余数大小"><a href="#889-余数大小" class="headerlink" title="889.余数大小"></a><strong>889.</strong>余数大小</h3><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个1000000以内的正整数a、b和c，输出a%c和b%c中的较小的数。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、b和c，范围在[1,1000000]。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一个整数。</p><h3 id="输入-输出例子1-1"><a href="#输入-输出例子1-1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>5  6  3</p><p>输出：</p><p>0</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> c <span class="token operator">></span> b <span class="token operator">%</span> c<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">%</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">%</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="890-三角形判断"><a href="#890-三角形判断" class="headerlink" title="890.三角形判断"></a><strong>890.</strong>三角形判断</h3><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个1000000以内的正整数a、b和c（a&lt; b &lt; c），判断能否以a、b和c为长度画出一个三角形？可以输出“yes”，否则输出“no”。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、b和c，范围在[1,1000000]。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p> yes或no。</p><h3 id="输入-输出例子1-2"><a href="#输入-输出例子1-2" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>5  6  10</p><p>输出：</p><p>yes</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">></span> c<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="891-数的奇偶"><a href="#891-数的奇偶" class="headerlink" title="891.数的奇偶"></a><strong>891.</strong>数的奇偶</h3><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入1个正整数a，如果是奇数打印1，是偶数打印0。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行1个正整数：a，范围在[1,100000000]。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>1个整数：1或0。</p><h3 id="输入-输出例子1-3"><a href="#输入-输出例子1-3" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>430512</p><p>输出：</p><p>0</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="892-同奇偶"><a href="#892-同奇偶" class="headerlink" title="892.同奇偶"></a><strong>892.</strong>同奇偶</h3><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入2个1000000以内的正整数a和b，如果a和b的奇偶性相同输出“yes”，否则输出“no”。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行2个正整数：a和b，范围在[1,1000000]。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p> yes或no。</p><h3 id="输入-输出例子1-4"><a href="#输入-输出例子1-4" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 6  10</p><p>输出：</p><p>yes</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> b <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="893-奇数个数"><a href="#893-奇数个数" class="headerlink" title="893.奇数个数"></a><strong>893.</strong>奇数个数</h3><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入4个1000000以内的正整数，统计其中奇数的个数。</p><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行4个正整数：范围在[1,1000000]。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一个整数。</p><h3 id="输入-输出例子1-5"><a href="#输入-输出例子1-5" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 6  7  10  121</p><p>输出：</p><p>2</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> num<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>num<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>       cnt<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>cnt<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="894-数的因子"><a href="#894-数的因子" class="headerlink" title="894.数的因子"></a><strong>894.</strong>数的因子</h3><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入2个正整数a和b，如果a是b的因子打印”yes”，否则打印”no”。</p><h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行2个正整数：a和b，范围在[1,100000000]。</p><h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><p>yes或no。</p><h3 id="输入-输出例子1-6"><a href="#输入-输出例子1-6" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 6  120</p><p>输出：</p><p>yes</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>b<span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"no"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="895-地砖"><a href="#895-地砖" class="headerlink" title="895.地砖"></a><strong>895.</strong>地砖</h3><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>有个房间，a公分长，b公分宽，现在地砖是边长c公分的正方形，问能不能在不切割地砖的情况下，正好铺满这个房间。能打印”yes”，否则打印”no”。<br>注：不考虑地砖的缝隙问题。</p><h3 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、b和c，范围在[1,1000000]。</p><h3 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h3><p>yes或no。</p><h3 id="输入-输出例子1-7"><a href="#输入-输出例子1-7" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 320  1024  8</p><p>输出：</p><p> yes</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"no"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="896-糖果分堆"><a href="#896-糖果分堆" class="headerlink" title="896.糖果分堆"></a><strong>896.</strong>糖果分堆</h3><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>有N颗相同的糖果要分成几堆相同个数的。小明希望每堆是a颗糖，小丁希望每堆是b颗糖。但只有一种方案是成立的，请问正确的方案能分成几堆？</p><h3 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：n、a和b，范围在[1,1000000]。</p><h3 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一个整数。</p><h3 id="输入-输出例子1-8"><a href="#输入-输出例子1-8" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>30  7  6</p><p>输出：</p><p>5</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">/</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">/</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 慧通教育C++闯关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到这里!</title>
      <link href="/2020/02/28/huan-ying-lai-dao-zhe-li/"/>
      <url>/2020/02/28/huan-ying-lai-dao-zhe-li/</url>
      
        <content type="html"><![CDATA[<h3 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h3><p>有些事情当时做的时候，并不理解。比如两年前我就会建立自己的网站，可是当时并没有坚持下来，以至于今天看来自己仿佛都忘记了全部，可做过的事情怎么可能忘记。大脑有两种路径模式，一种是形成具体清晰的路径，一种是模糊不清的路径。前者成为我们谋生的技能，后者进入我们的知识库里面成为可以快速检索，再次建立联系的技能。</p><p>对于我来说，搜索技能是我的核心技能之一。在初阶的时候，搜索只是一种工具，慢慢上升为一种技能，最后变成一种思想。对于这个技能的学习，我主要从虫部落的课程中学习。网络上的主要工具还是Google。开始我还是要认真地对搜索运算符进行记忆，然后多加练习。本地的主要工具还是Everything。有时精通一种技能，强过熟悉十种技能。既然现在已经知道这一点，我就不希望下一次检索记忆的时候还会花费很多的时间，那便需要采用记录的方式进行。</p><p>写文章的记录方式很不错，可大多时候适用于对于生活和学习的反思，而且这属于单向的记录方式。首先有更简单的记录方式的时候就不用难的，我们趋利避害的本能总是在大脑中喊，“好累”，“休息一下”，简单的记录方式我当然推荐便签类的APP，这是对于短内容记忆的，对于长内容的记忆推荐语音输入自动转文字。当然上述提到的两类工具还是单向记录的，什么是双向呢？第一种就是对话式的记录，比如微信聊天，第二种就是邮件，email承载的内容更多。</p><p>记录下成长历程的好处很多，我们与时间为伴的时候，相信时间的力量的时候，很多个人品质就显山露水。比如长久的耐心，比如良好的习惯。</p><p>这个博客主要是记录我的学习和生活，有些时候心里面有很多话想说出来，可又不知到哪里表达，公众号是表达的好地方，博客也是。学习上主要是继续钻研Scratch，Python，C++三门语言。Scratch侧重于计算机科学的启蒙和制作动画游戏；Python侧重于Turtle的画图；C++从GoC画图切入侧,重于信息学奥林匹克竞赛的题目练习。各有侧重点，风帆已挂，势必踏破那万重山。</p><p>一开始还不清楚博客的主要定位，但我心里已经有大致的方向，相信再多写一些文字我就可以做成型。这些文章我会同步到微信公众号。</p><h3 id="个人主要技能"><a href="#个人主要技能" class="headerlink" title="个人主要技能"></a>个人主要技能</h3><ul><li>科学上网</li><li>超级搜索术</li><li>马拉松选手</li><li>写作</li><li>创新</li><li>编程</li><li>逆向法</li><li>ANKI</li><li>XMIND</li><li>读一流书</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
