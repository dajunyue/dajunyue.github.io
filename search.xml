<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《发哨子的人》里的语言</title>
      <link href="/2020/03/12/fa-shao-zi-de-ren-li-de-yu-yan/"/>
      <url>/2020/03/12/fa-shao-zi-de-ren-li-de-yu-yan/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160844.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160900.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160902.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160903.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160905.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160905.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160908.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160909.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160911.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160912.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160914.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160915.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160917.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160919.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160920.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160924.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160922.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160927.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160928.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160930.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160939.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160940.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160942.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160943.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160944.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160946.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160947.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160949.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160950.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160950.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160953.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312160955.jpg" alt></p><p><img src="http://q72m5uxf3.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200312161010.jpg" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网站建设</title>
      <link href="/2020/03/12/wang-zhan-jian-she/"/>
      <url>/2020/03/12/wang-zhan-jian-she/</url>
      
        <content type="html"><![CDATA[<h1 id="问题大集合"><a href="#问题大集合" class="headerlink" title="问题大集合"></a>问题大集合</h1><p>1.hexo sever端口占用，localhost:4000无响应</p><p>解法1:重启</p><p>解法2:更改端口号为5000</p><pre class="line-numbers language-javascript"><code class="language-javascript">hexo s <span class="token operator">-</span>p <span class="token number">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解法3:在站点配置文件加入新端口</p><pre class="line-numbers language-javascript"><code class="language-javascript">server<span class="token punctuation">:</span>  port<span class="token punctuation">:</span> <span class="token number">5000</span>  compress<span class="token punctuation">:</span> <span class="token boolean">true</span>  header<span class="token punctuation">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解法4:</p><pre class="line-numbers language-javascript"><code class="language-javascript">netstat <span class="token operator">-</span>ant <span class="token operator">|</span>grep <span class="token number">4000</span> kill<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言之网站 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学马拉松</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-ma-la-song/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-ma-la-song/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 语言之马拉松 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Marathon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学视频剪辑</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-shi-pin-jian-ji/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-shi-pin-jian-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 语言之视频 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Video clip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学摄影</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-she-ying/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-she-ying/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 语言之摄影 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Photography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学语言之逆向法</title>
      <link href="/2020/03/12/xue-yu-yan-zhi-ni-xiang-fa/"/>
      <url>/2020/03/12/xue-yu-yan-zhi-ni-xiang-fa/</url>
      
        <content type="html"><![CDATA[<p>大道至简，逆向法之所以有效，是因为从最底层来讲，逆向法就是踏踏实实，刻苦努力的学习方法。</p><p>先来看看为什么我们的学习收效不大，原因有很多，智商低，毅力差，决心小，主观不努力，学习方法上，陷入怪圈，急躁浮躁，基本功不扎实，得不到鼓励，得不到指导。频繁改变学习方法和途径，老是在教材和方法上兜圈子。学习三天打鱼，两天晒网。急于求成。</p><p>逆向法特点：</p><p>1.想快也快不起来，彻底消除速成思想。</p><p>2.全面暴露基础知识不足，自觉防止好高骛远。</p><p>3.进步可视化，促进良性循环。</p><p>“学习如逆水行舟，不进则退”</p><p>英语的逆向学习法，调动眼，耳，手，口，脑，具体化为“听、写、说、背、想”。</p><p>学习英语主要问题是“急躁浮夸”和“基础不牢”。</p><h1 id="基本理念："><a href="#基本理念：" class="headerlink" title="基本理念："></a>基本理念：</h1><h2 id="1-逆急躁浮躁"><a href="#1-逆急躁浮躁" class="headerlink" title="1.逆急躁浮躁"></a>1.逆急躁浮躁</h2><h3 id="语言学习的规律"><a href="#语言学习的规律" class="headerlink" title="语言学习的规律"></a>语言学习的规律</h3><h3 id="1-学习不可能速成"><a href="#1-学习不可能速成" class="headerlink" title="1.学习不可能速成"></a>1.学习不可能速成</h3><h3 id="2-只有在不断的反复中才能学会"><a href="#2-只有在不断的反复中才能学会" class="headerlink" title="2.只有在不断的反复中才能学会"></a>2.只有在不断的反复中才能学会</h3><h2 id="2-逆凭空的强化和提高"><a href="#2-逆凭空的强化和提高" class="headerlink" title="2.逆凭空的强化和提高"></a>2.逆凭空的强化和提高</h2><h2 id="3-逆纯应试教学"><a href="#3-逆纯应试教学" class="headerlink" title="3.逆纯应试教学"></a>3.逆纯应试教学</h2><h2 id="4-逆学习中的苦恼"><a href="#4-逆学习中的苦恼" class="headerlink" title="4.逆学习中的苦恼"></a>4.逆学习中的苦恼</h2><h2 id="5-逆学科和专业"><a href="#5-逆学科和专业" class="headerlink" title="5.逆学科和专业"></a>5.逆学科和专业</h2><h1 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求:"></a>基本要求:</h1><p>以最严格的要求，从最基础的地方做起</p><p>不可一词无来历，不可一词不讲究，力求“词词懂、句句懂”</p><h1 id="三个注重："><a href="#三个注重：" class="headerlink" title="三个注重："></a>三个注重：</h1><p>注重精神和思想</p><p>注重方法</p><p>注重工具</p><p>优点：</p><p>调动学习积极性</p><p>引人入胜</p><p>提高学习能力</p><p>全面提高水平</p><h1 id="巧学"><a href="#巧学" class="headerlink" title="巧学"></a>巧学</h1><p>刻苦努力第一条</p><p>结合自己的情况</p><p>吸取其它方法的优点</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学写作</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-xie-zuo/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-xie-zuo/</url>
      
        <content type="html"><![CDATA[<p>写作的两种世界观</p><p>一、OOP</p><p>一切都是对象。</p><p>写作 = 对象 + 消息</p><p>二、POP</p><p>写作 = 结构 + 算法</p>]]></content>
      
      
      <categories>
          
          <category> 语言之写作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学数学</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-shu-xue/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-shu-xue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 语言之数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向法巧学英语</title>
      <link href="/2020/03/12/ni-xiang-fa-qiao-xue-ying-yu/"/>
      <url>/2020/03/12/ni-xiang-fa-qiao-xue-ying-yu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 语言之英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巧学千言，聆听万物</title>
      <link href="/2020/03/12/qiao-xue-qian-yan-ling-ting-wan-wu/"/>
      <url>/2020/03/12/qiao-xue-qian-yan-ling-ting-wan-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="一、巧学千言"><a href="#一、巧学千言" class="headerlink" title="一、巧学千言"></a>一、巧学千言</h1><p>我们天生就会一种语言，在后来的成长过程中也会遇到形形色色的语言，我们会在学校学习英语，因为英语是全世界使用范围最广的语言；我们会接触到计算机语言，因为我们进入人工智能时代，处处需要和计算机打交道。</p><p>语言就是我们与世界沟通交流的方式，是我们表达自己的方式。从这种角度看来，舞蹈是一种肢体语言，向观众展现姿态美；数学是一种语言，透过数学我们得以与花费千百年建立的数学大厦窥探人类理性的力量……</p><p>我们进入一个领域，需要学习一门语言，和对方取得沟通。比如我们和小朋友交流，不仅要学会童言童语，还要学会儿童的心理语言，他们通过不吃晚饭这种行为向你诉说：“我受委屈了。”；我们和专家沟通，需要对专业有深层次的了解，熟悉常见的词汇。一切皆语言，这是一种懒惰的思想，听起来大而空，可透过这个角度看时间，仿佛走到了《楚门的世界》里的楚门，光芒就在眼前。</p><p>大钧曰，我们需要在生活中巧学千言。首先要构建时代的常识体系。然后要学习谋生的语言，不断钻研。语言之多，穷尽我们的一生也难以学完，我们需要巧学。</p><p>中文是我们的母语。</p><p>中文里的文言文是一种语言，我的“钧”字便是古代流传下来的汉字，有</p><p>钧，三十斤也。——《说文》</p><p>千钧一发；雷霆万钧</p><p>独化于陶钧之上。——《史记·邹阳传》</p><p>大钧播物。——《汉书·贾谊传》</p><p>钧容直(钧容班。宋代宫廷仪仗中的乐队)；钧天广乐(钧天。神话传说中指天上的音乐)。</p><p>了解这些是很有意思的一件事。</p><p>英语是我们必备的第二语言。</p><p>编程语言有两种，一种是面向对象的语言，它的世界观是编程等于对象+消息；另外一种是面向过程的语言，它的世界观是编程等于数据结构+算法。我们先要学习OOP这种语言，以获得万物皆对象的世界观。</p><p>各种语言我们都可以使用逆向法。</p><h1 id="二、聆听万物"><a href="#二、聆听万物" class="headerlink" title="二、聆听万物"></a>二、聆听万物</h1><p>人与人之间的沟通，聆听是比言语更重要的。它是前提，你必须聆听到，才能言语出。万物皆对象，万物皆有声音，我们需要聆听万物之声，恢复我们的灵性。</p><p>我们首先需要聆听自己内心的声音，</p><p>大钧曰，少言多行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>冰雹猜想</title>
      <link href="/2020/03/11/bing-bao-cai-xiang/"/>
      <url>/2020/03/11/bing-bao-cai-xiang/</url>
      
        <content type="html"><![CDATA[<p>Scratch</p><p>Python</p><p>C++</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一文读懂小鹅通</title>
      <link href="/2020/03/10/yi-wen-du-dong-xiao-e-tong/"/>
      <url>/2020/03/10/yi-wen-du-dong-xiao-e-tong/</url>
      
        <content type="html"><![CDATA[<p><strong>没有天花乱坠的销售话术，小鹅通怎么拿下客户？答案在于“快速响应”和“用解决方案说话”。</strong></p><p>大风起时，选择对所有人而言都是奢侈的，我们不服务这些用户还能做什么？我们只有不撞南墙不回头的冲劲和勇气。未来的事情谁猜想得到？</p>]]></content>
      
      
      <categories>
          
          <category> 语言之创业 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>疫情之下的求职路</title>
      <link href="/2020/03/10/yi-qing-zhi-xia-de-qiu-zhi-lu/"/>
      <url>/2020/03/10/yi-qing-zhi-xia-de-qiu-zhi-lu/</url>
      
        <content type="html"><![CDATA[<p>如何寻找新的工作呢？</p><p>首先明确自己能提供什么价值。</p><p>其次寻找这部分需要你的公司。</p><p>最后握手。</p><p>简历的撰写能力始终是第一位的，这里面是销售自己的能力，如何通过短短的一页纸来展示自己。总想通过花钱解决是逃避式的简单粗暴处理方法，最了解自己的还是自己，得去认真反思自己，去查看自己的优点与缺点。</p>]]></content>
      
      
      <categories>
          
          <category> 语言之工作 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用确定性对抗迷茫</title>
      <link href="/2020/03/07/li-yong-que-ding-xing-dui-kang-mi-mang/"/>
      <url>/2020/03/07/li-yong-que-ding-xing-dui-kang-mi-mang/</url>
      
        <content type="html"><![CDATA[<p>我是不太愿意写这种文章的，何况现在还是深夜，该睡觉的时候却不睡觉，总是不好。但有时候，人确实就是处于这一种状态，我无法否认。</p><p>现在说说我为什么迷茫，今天打扫卫生的时候我就觉得，怎么自己又陷入迷茫状态了？很快自己转念一想，也许并不是又陷入而是一直处于迷茫的状态，迷茫也许本来就与我们相伴。</p><p>我写文章不喜欢太长，主题是迷茫了应该怎么办？有很多现存的答案并不适用于我们，因此需要创新性的探究。</p><p>朋友有一句话说的很对。不要看他说了什么，而要看他做了什么。我想我应该去做一些更加精确的事情，来对抗我的迷茫，然后把剩下的交给时间。</p><p>在语言领域，针对English 这门语言，我需要重新利用踏踏实实学英语的逆向学习法对Special English进行深入的研究。针对programming这门语言，我选择Scratch的Pen、Python的Turtle、C++的WebGoC这三门语言的画图工具结合教学这一个细分的领域进行深入研究。</p><p>在运动领域，我要日常进行300练习，即一百个俯卧撑，一百个仰卧起坐和一百个深蹲练习，针对全马PB330和跳绳2000进行深入练习。</p><p>在读书领域，我要读一流书，针对《一流书单》进行研读。</p><p>在写作领域，有两点，一点是一流书单的读书笔记，另外一点是知乎答题。</p><p>那么首当其冲的问题就是继续细分。</p><p><img src="http://q6lsd5k7n.bkt.clouddn.com/%E4%B8%93%E4%B8%9A%E4%B8%BB%E4%B9%89.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 语言之心理 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈学习</title>
      <link href="/2020/03/05/tan-tan-xue-xi/"/>
      <url>/2020/03/05/tan-tan-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 语言之学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读一流书系列</title>
      <link href="/2020/03/05/du-yi-liu-shu-xi-lie/"/>
      <url>/2020/03/05/du-yi-liu-shu-xi-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="读书只读一流的书"><a href="#读书只读一流的书" class="headerlink" title="读书只读一流的书"></a>读书只读一流的书</h1><p>偶然的一天，我刷公众号的时候看到了一篇文章，点进去看了里面分享的视频，说到新东方的王强老师读一流书的心得，我深以为然。</p><p><strong>怎样塑造生命的东西，使得我们对知识的渴望超过一切。</strong></p><p>现代社会大家都很浮躁，也许是我们对如此快速发展的现代经济没有准备，大部分人被打的措手不及。趁着这次疫情，我想会有一部分人真正冷静下来，开始反思自己的生活。</p><p>我真正要开始专心读书，可是读什么书呢？怎么读呢？什么时候读呢？不想读的时候怎么办呢？读书笔记怎么做呢？这都是问题，其实也很好回答。</p><p>我们每个人都对读书的本质有不同的认识，有的为功利，有的为心安，有的为解惑。我认为读书就是简单的生活方式，你可以选择，也可以不选择，就像坚持运动，坚持早睡早起一样，都是一种健康的生活方式。真正值得我智力投入、值得我尊重、花费我精力的大概就是这两大类。我觉得读书一定要读一流的书，做人一定要做一流的人。读书真正对读者产生作用的时候，就是读者和真正的生命融汇在一起的时候。</p><p>现在我们生活在信息的海洋里，也算人生有幸，但是要接受的信息太多了。那么什么样的书该读呢？我读书的选择是这样的：畅销书坚决不读，不是我看不起畅销书，而是我知道生命有限，只能读人类历史上大浪淘沙的作品。</p><p>我所读的作品的创作年代越来越早，因为我觉得越是早期的人，他们写下的文字越是生命的写照。</p><p>读一流的书就要衡量这个作家进入书前的状态是什么。他是为满足市场的需要而写，还是倾其鲜血、生命和经历而写。如果你读的不是真文字，遇到的不是真语言，那么最后见到的也一定是虚幻的世界，不是真实的世界。</p><p>读书真正对读者产生作用的时候，就是读者和真正的生命融汇在一起的时候。千百年来，没有被淘汰的著作是人类一代又一代人选择的结果，而不是现在市场的选择，更不是广告词的选择，这是非常关键的。</p><p>为什么读经典能改变我们的生命呢？文学的功能是什么？在我看来，文学的功能就是：真正有力量的文字，一定能够对我们的审美进行奇异的再造，在我们对“真善美”的追求上有奇异的启示，有充电的感觉。</p><p>所以那些人类最高的价值，真的、善的、美的东西就会融入我们的血液。一旦人的身体里有这三样东西，在现实社会中就不会轻易被世俗的、流行的、暂时的甚至非常糟糕的价值观扭转。</p><p>读那些经典的、人类熟悉的甚至很多人因为追求时髦而不屑一读的文字吧。这些文字使我们对生命、审美、真理、语言与世界的关系有了更直接的感觉。我认为我人生最大的捷径就是，用时间和生命阅读和拥抱了世上一流的书。</p><p>一流不是意味着思想绝对超前，而是一个作家的文字状态有多么纯粹。</p><h1 id="什么是一流书呢？"><a href="#什么是一流书呢？" class="headerlink" title="什么是一流书呢？"></a>什么是一流书呢？</h1><p>一手书。不读翻译过来的。</p><p>一流译作。翻译是对原书的再造，超越原书，值得一读。</p><p>创作年代早。经过时间的检验。</p><p>宗教，神学，哲学，历史，心理，文学，</p><p>科学领域</p><h1 id="不读什么"><a href="#不读什么" class="headerlink" title="不读什么"></a>不读什么</h1><p>畅销书</p><p>中国的典籍</p><p>悲惨世界</p>]]></content>
      
      
      <categories>
          
          <category> 语言之阅读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生活中的实用Python（三）</title>
      <link href="/2020/03/04/sheng-huo-zhong-de-shi-yong-python-san/"/>
      <url>/2020/03/04/sheng-huo-zhong-de-shi-yong-python-san/</url>
      
        <content type="html"><![CDATA[<p>去</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活中的实用Python（二）</title>
      <link href="/2020/03/04/sheng-huo-zhong-de-shi-yong-python-er/"/>
      <url>/2020/03/04/sheng-huo-zhong-de-shi-yong-python-er/</url>
      
        <content type="html"><![CDATA[<h1 id="用turtle画任何东西"><a href="#用turtle画任何东西" class="headerlink" title="用turtle画任何东西"></a>用turtle画任何东西</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> turtle <span class="token keyword">as</span> te<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> argparse  <span class="token comment" spellcheck="true">#argparse命令行参数解析包</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">import</span> os<span class="token keyword">from</span> win32<span class="token punctuation">.</span>win32api <span class="token keyword">import</span> GetSystemMetrics<span class="token comment" spellcheck="true">#GetSystemMetrics只有一个参数，称之为「索引」，这个索引有75个标识符，可以获取系统分辨率、窗体显示区域的宽度和高度、滚动条的宽度和高度。</span>WriteStep <span class="token operator">=</span> <span class="token number">15</span>  <span class="token comment" spellcheck="true"># 贝塞尔函数的取样次数</span>Speed <span class="token operator">=</span> <span class="token number">1000</span>Width <span class="token operator">=</span> <span class="token number">600</span>  <span class="token comment" spellcheck="true"># 界面宽度</span>Height <span class="token operator">=</span> <span class="token number">600</span>  <span class="token comment" spellcheck="true"># 界面高度</span>Xh <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 记录前一个贝塞尔函数的手柄</span>Yh <span class="token operator">=</span> <span class="token number">0</span>scale <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>first <span class="token operator">=</span> <span class="token boolean">True</span>K <span class="token operator">=</span> <span class="token number">32</span><span class="token keyword">def</span> <span class="token function">Bezier</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 一阶贝塞尔函数</span>    <span class="token keyword">return</span> p1 <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">+</span> p2 <span class="token operator">*</span> t<span class="token keyword">def</span> <span class="token function">Bezier_2</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 二阶贝塞尔函数</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> WriteStep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span>                   Bezier<span class="token punctuation">(</span>x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span>        y <span class="token operator">=</span> Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span>                   Bezier<span class="token punctuation">(</span>y2<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span>        te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Bezier_3</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> x4<span class="token punctuation">,</span> y4<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 三阶贝塞尔函数</span>    x1 <span class="token operator">=</span> <span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x1    y1 <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y1    x2 <span class="token operator">=</span> <span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x2    y2 <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y2    x3 <span class="token operator">=</span> <span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x3    y3 <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y3    x4 <span class="token operator">=</span> <span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x4    y4 <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y4  <span class="token comment" spellcheck="true"># 坐标变换</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> WriteStep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> Bezier<span class="token punctuation">(</span>x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span>                   Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> Bezier<span class="token punctuation">(</span>x3<span class="token punctuation">,</span> x4<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span>        y <span class="token operator">=</span> Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>y1<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> Bezier<span class="token punctuation">(</span>y2<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span>                   Bezier<span class="token punctuation">(</span>Bezier<span class="token punctuation">(</span>y2<span class="token punctuation">,</span> y3<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> Bezier<span class="token punctuation">(</span>y3<span class="token punctuation">,</span> y4<span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">/</span> WriteStep<span class="token punctuation">)</span>        te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Moveto</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 移动到svg坐标下（x，y）</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">,</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Moveto_r</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">:</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>te<span class="token punctuation">.</span>xcor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> dx<span class="token punctuation">,</span> te<span class="token punctuation">.</span>ycor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> dy<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">line</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 连接svg坐标下两点</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x1<span class="token punctuation">,</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y1<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x2<span class="token punctuation">,</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y2<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Lineto_r</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 连接当前点和相对坐标（dx，dy）的点</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>te<span class="token punctuation">.</span>xcor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> dx<span class="token punctuation">,</span> te<span class="token punctuation">.</span>ycor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> dy<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Lineto</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 连接当前点和svg坐标下（x，y）</span>    te<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">,</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> y<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Curveto</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 三阶贝塞尔曲线到（x，y）</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    X_now <span class="token operator">=</span> te<span class="token punctuation">.</span>xcor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Width <span class="token operator">/</span> <span class="token number">2</span>    Y_now <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> te<span class="token punctuation">.</span>ycor<span class="token punctuation">(</span><span class="token punctuation">)</span>    Bezier_3<span class="token punctuation">(</span>X_now<span class="token punctuation">,</span> Y_now<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token keyword">global</span> Xh    <span class="token keyword">global</span> Yh    Xh <span class="token operator">=</span> x <span class="token operator">-</span> x2    Yh <span class="token operator">=</span> y <span class="token operator">-</span> y2<span class="token keyword">def</span> <span class="token function">Curveto_r</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 三阶贝塞尔曲线到相对坐标（x，y）</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    X_now <span class="token operator">=</span> te<span class="token punctuation">.</span>xcor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Width <span class="token operator">/</span> <span class="token number">2</span>    Y_now <span class="token operator">=</span> Height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> te<span class="token punctuation">.</span>ycor<span class="token punctuation">(</span><span class="token punctuation">)</span>    Bezier_3<span class="token punctuation">(</span>X_now<span class="token punctuation">,</span> Y_now<span class="token punctuation">,</span> X_now <span class="token operator">+</span> x1<span class="token punctuation">,</span> Y_now <span class="token operator">+</span> y1<span class="token punctuation">,</span>             X_now <span class="token operator">+</span> x2<span class="token punctuation">,</span> Y_now <span class="token operator">+</span> y2<span class="token punctuation">,</span> X_now <span class="token operator">+</span> x<span class="token punctuation">,</span> Y_now <span class="token operator">+</span> y<span class="token punctuation">)</span>    <span class="token keyword">global</span> Xh    <span class="token keyword">global</span> Yh    Xh <span class="token operator">=</span> x <span class="token operator">-</span> x2    Yh <span class="token operator">=</span> y <span class="token operator">-</span> y2<span class="token keyword">def</span> <span class="token function">transform</span><span class="token punctuation">(</span>w_attr<span class="token punctuation">)</span><span class="token punctuation">:</span>    funcs <span class="token operator">=</span> w_attr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> func <span class="token keyword">in</span> funcs<span class="token punctuation">:</span>        func_name <span class="token operator">=</span> func<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> func<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> func_name <span class="token operator">==</span> <span class="token string">'scale'</span><span class="token punctuation">:</span>            <span class="token keyword">global</span> scale            scale <span class="token operator">=</span> <span class="token punctuation">(</span>float<span class="token punctuation">(</span>func<span class="token punctuation">[</span>func<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token operator">-</span>float<span class="token punctuation">(</span>func<span class="token punctuation">[</span>func<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">readPathAttrD</span><span class="token punctuation">(</span>w_attr<span class="token punctuation">)</span><span class="token punctuation">:</span>    ulist <span class="token operator">=</span> w_attr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ulist<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print("now cmd:", i)</span>        <span class="token keyword">if</span> i<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">or</span> i<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> float<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">yield</span> float<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> float<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> float<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawSVG</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> w_color<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> first    SVGFile <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    SVG <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>SVGFile<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    Height <span class="token operator">=</span> float<span class="token punctuation">(</span>SVG<span class="token punctuation">.</span>svg<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    Width <span class="token operator">=</span> float<span class="token punctuation">(</span>SVG<span class="token punctuation">.</span>svg<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    transform<span class="token punctuation">(</span>SVG<span class="token punctuation">.</span>g<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'transform'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> first<span class="token punctuation">:</span>        te<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>height<span class="token operator">=</span>Height<span class="token punctuation">,</span> width<span class="token operator">=</span>Width<span class="token punctuation">)</span>        te<span class="token punctuation">.</span>setworldcoordinates<span class="token punctuation">(</span><span class="token operator">-</span>Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> Width <span class="token operator">-</span>                               Width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span>Height <span class="token operator">+</span> <span class="token number">300</span><span class="token punctuation">)</span>        first <span class="token operator">=</span> <span class="token boolean">False</span>    te<span class="token punctuation">.</span>tracer<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>speed<span class="token punctuation">(</span>Speed<span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>color<span class="token punctuation">(</span>w_color<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> SVG<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        attr <span class="token operator">=</span> i<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span>        f <span class="token operator">=</span> readPathAttrD<span class="token punctuation">(</span>attr<span class="token punctuation">)</span>        lastI <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span>                te<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>                Moveto<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                te<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'m'</span><span class="token punctuation">:</span>                te<span class="token punctuation">.</span>end_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>                Moveto_r<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                te<span class="token punctuation">.</span>begin_fill<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>                Curveto<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                lastI <span class="token operator">=</span> i            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">:</span>                Curveto_r<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                lastI <span class="token operator">=</span> i            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">:</span>                Lineto<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'l'</span><span class="token punctuation">:</span>                Lineto_r<span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                lastI <span class="token operator">=</span> i            <span class="token keyword">elif</span> lastI <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">:</span>                Curveto<span class="token punctuation">(</span>i <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> lastI <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">:</span>                Curveto_r<span class="token punctuation">(</span>i <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> lastI <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">:</span>                Lineto<span class="token punctuation">(</span>i <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> lastI <span class="token operator">==</span> <span class="token string">'l'</span><span class="token punctuation">:</span>                Lineto_r<span class="token punctuation">(</span>i <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">*</span> scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    SVGFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawBitmap</span><span class="token punctuation">(</span>w_image<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'减少了颜色…'</span><span class="token punctuation">)</span>    Z <span class="token operator">=</span> w_image<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 转换为np.float32</span>    Z <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span>Z<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 定义 迭代终止准则, 需要的聚类的数量(K) 和使用KMeans聚类函数()</span>    criteria <span class="token operator">=</span> <span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>TERM_CRITERIA_EPS<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> K    ret<span class="token punctuation">,</span> label<span class="token punctuation">,</span> center <span class="token operator">=</span> cv2<span class="token punctuation">.</span>kmeans<span class="token punctuation">(</span>Z<span class="token punctuation">,</span> K<span class="token punctuation">,</span> None<span class="token punctuation">,</span> criteria<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>KMEANS_RANDOM_CENTERS<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 现在转换回uint8，并导出原始图像</span>    center <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span>center<span class="token punctuation">)</span>    res <span class="token operator">=</span> center<span class="token punctuation">[</span>label<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> res<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>w_image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    no <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> center<span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\rDrawing: %.2f%% ['</span> <span class="token operator">%</span> <span class="token punctuation">(</span>            no <span class="token operator">/</span> K <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#'</span> <span class="token operator">*</span> no <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">*</span> <span class="token punctuation">(</span>K <span class="token operator">-</span> no<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">)</span>        no <span class="token operator">+=</span> <span class="token number">1</span>        res2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>inRange<span class="token punctuation">(</span>res<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        res2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bitwise_not<span class="token punctuation">(</span>res2<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'.tmp.bmp'</span><span class="token punctuation">,</span> res2<span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'potrace.exe .tmp.bmp -s --flat'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用potrace工具将位图转换为矢量图形</span>        <span class="token comment" spellcheck="true"># print(i)</span>        drawSVG<span class="token punctuation">(</span><span class="token string">'.tmp.svg'</span><span class="token punctuation">,</span> <span class="token string">'#%02x%02x%02x'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'.tmp.bmp'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'.tmp.svg'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n\r完成后，关闭窗口退出。'</span><span class="token punctuation">)</span>    te<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    paser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>        description<span class="token operator">=</span><span class="token string">"将位图转换为SVG并使用turtle libray来绘制它。"</span><span class="token punctuation">)</span>    paser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span>                       help<span class="token operator">=</span><span class="token string">'该文件(*.jpg, *.png, *.bmp) 要转换的文件的名称。'</span><span class="token punctuation">)</span>    paser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>        <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"--color"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"你想要画多少种颜色。(如果数字太大，程序可能会很慢。)有32、64种"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> paser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    K <span class="token operator">=</span> args<span class="token punctuation">.</span>color    <span class="token keyword">try</span><span class="token punctuation">:</span>        bitmapFile <span class="token operator">=</span> open<span class="token punctuation">(</span>args<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>__file__ <span class="token operator">+</span> <span class="token string">': 错误:文件不存在。'</span><span class="token punctuation">)</span>        quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>args<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span> <span class="token string">'.bmp'</span><span class="token punctuation">,</span> <span class="token string">'.png'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>__file__ <span class="token operator">+</span> <span class="token string">': 错误:该文件不是位图文件。'</span><span class="token punctuation">)</span>        quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    bitmap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>args<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>    <span class="token keyword">if</span> bitmap<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> GetSystemMetrics<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bitmap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>bitmap<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>            <span class="token punctuation">(</span>GetSystemMetrics<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">/</span> bitmap<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GetSystemMetrics<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    drawBitmap<span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python draw_anything.py [xxxx].jpg即可运行</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用C++只要两大步就画好正方形的方法，你确定不来试试吗？</title>
      <link href="/2020/03/03/c-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/"/>
      <url>/2020/03/03/c-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>//准备工作<img src="http://q6mgt5ib5.bkt.clouddn.com/C%2B%2B%E7%94%BB%E6%AD%A3%E6%96%B9%E5%BD%A2.png" alt></p><p>void initialize()<br>    {<br>        pen.cls();<br>        pen.showXY(100, 1, 2);<br>        pen.up();<br>        pen.moveTo(-150, -150);<br>        pen.setAngle(90);<br>        pen.down();<br>    }</p><h1 id="画正方形"><a href="#画正方形" class="headerlink" title="画正方形"></a>画正方形</h1><p>//画正方形<img src="http://q6mgt5ib5.bkt.clouddn.com/C%2B%2B%E7%94%BB%E6%AD%A3%E6%96%B9%E5%BD%A2%E6%88%90%E5%8A%9F.png" alt><br>void draw_square()<br>{<br>    pen.fd(300);<br>    pen.lt(90);<br>    pen.fd(300);<br>    pen.lt(90);<br>    pen.fd(300);<br>    pen.lt(90);<br>    pen.fd(300);<br>    pen.lt(90);<br>}</p><p>int main()<br>{<br>    initialize();<br>    draw_square();<br>    return 0;<br>}</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Python只要两大步就画好正方形的方法，你确定不来试试吗？</title>
      <link href="/2020/03/03/python-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/"/>
      <url>/2020/03/03/python-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p><img src="http://q6mgnrzz2.bkt.clouddn.com/Python%E7%94%BB%E6%AD%A3%E6%96%B9%E5%BD%A2.png" alt></p><p><code>import turtle as t</code><br><code>t.clear()</code><br><code>t.screensize(480,360)</code><br><code>t.pu()</code><br><code>t.goto(-150, -150)</code><br><code>t.pd()</code></p><h1 id="画正方形"><a href="#画正方形" class="headerlink" title="画正方形"></a>画正方形</h1><p><img src="http://q6mgnrzz2.bkt.clouddn.com/python%E7%94%BB%E6%AD%A3%E6%96%B9%E5%BD%A2%E6%88%90%E5%8A%9F.png" alt></p><p><code>t.title(&quot;画正方形&quot;)</code><br><code>t.forward(300)</code><br><code>t.left(90)</code><br><code>t.forward(300)</code><br><code>t.left(90)</code><br><code>t.forward(300)</code><br><code>t.left(90)</code><br><code>t.forward(300)</code><br><code>t.left(90)</code><br><code>t.done()</code></p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具系列</title>
      <link href="/2020/03/03/gong-ju-xi-lie/"/>
      <url>/2020/03/03/gong-ju-xi-lie/</url>
      
        <content type="html"><![CDATA[<p>工具就像我们手里的武器，工欲善其事，必先利其器，让我们准备好我们的工具踏上战场。</p><h4 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h4><p>马拉松pb</p><p>读一流书、做笔记和写作</p><p>少儿编程</p><h4 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h4><p>番茄ToDo</p><h4 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h4><p>To Do</p><h3 id="学习流水线"><a href="#学习流水线" class="headerlink" title="学习流水线"></a>学习流水线</h3><p>方法—逆向法重出江湖</p><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>Marginnote</p><h4 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h4><p>Xmind—发散思维</p><p>GoodNotes—电子记录</p><p>Evernote—电子记录</p><h4 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h4><p>Anki的极致记忆</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《信息学奥赛一本通》_算法</title>
      <link href="/2020/03/02/xin-xi-xue-ao-sai-yi-ben-tong-suan-fa/"/>
      <url>/2020/03/02/xin-xi-xue-ao-sai-yi-ben-tong-suan-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《信息学奥赛一本通》_程序</title>
      <link href="/2020/03/02/xin-xi-xue-ao-sai-yi-ben-tong-cheng-xu/"/>
      <url>/2020/03/02/xin-xi-xue-ao-sai-yi-ben-tong-cheng-xu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》（上册））_第6单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-6-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-6-dan-yuan/</url>
      
        <content type="html"><![CDATA[<p>###### </p><h3 id="第-6单元指针、类-323"><a href="#第-6单元指针、类-323" class="headerlink" title="第 6单元指针、类 323"></a>第 6单元指针、类 323</h3><h6 id="第-80课今雨新知—地址与指针-324"><a href="#第-80课今雨新知—地址与指针-324" class="headerlink" title="第 80课今雨新知—地址与指针      324"></a>第 80课今雨新知—地址与指针      324</h6><pre class="line-numbers language-language"><code class="language-language">*/ int main(){    int a, *p;   //定义一个指针变量p，p将指向一个内存单元。 *是指针操作符     a = 10;    p = &a;      //&取地址操作符     cout << *p << endl;       return 0;}//--------------------------------//10.//--------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-81课民主选举—指针与数组-327"><a href="#第-81课民主选举—指针与数组-327" class="headerlink" title="第 81课民主选举—指针与数组      327"></a>第 81课民主选举—指针与数组      327</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;const int MAX=5;      //候选人的人数int count(int b[],int n){  int x;  for(int i=1;i<=n;i++)  {    do     {      cout<<i<<':';      cin>>x;    }while(x<0||x>MAX);    b[x]++;  }}int main(){    int a[MAX+1],i,n ,*p;  //a[0]统计弃权的票数  cout<<"请输入实到人数：";  cin>>n;  for(p=a;p<=(a+MAX);p++)    *p=0;     p=a; //指针变量p重新指向数组首元素  count(p,n);  for(i=0;i<=MAX;i++)  {    switch(i)    {      case 0:cout<<"弃权:"<<a[i]<<endl;break;      default:cout<<i<<"号票数:"<<a[i]<<endl;break;    }  }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-82课编程是一门艺术—类与对象-331"><a href="#第-82课编程是一门艺术—类与对象-331" class="headerlink" title="第 82课编程是一门艺术—类与对象  331"></a>第 82课编程是一门艺术—类与对象  331</h6><p>#include <iostream><br>using namespace std;<br>/*<br> 第80课，今雨新知<br>  –地址与指针<br>  定义整型变量，在编译的时候，系统会开辟一块内存单元用来存放变量的值，<br>  对变量的存取操作就是直接到这个内存单元存取。<br>  内存单元的位置叫：地址<br>  存放a的值的地址可以用取地址操作符&amp;，对a运算得到：&amp;a<br>  在dev-c++中，为整形变量分配4个字节。 </iostream></p><pre class="line-numbers language-language"><code class="language-language">#include <iostream>using namespace std;/* 第81课，民主选举   --指针与数组  */ const int MAX = 5;           //候选人的人数 int count(int b[], int n){    int x;    for(int i=1; i<=n; i++)    {        do        {            cout << i << ":";            cin >> x;        } while(x < 0 || x > MAX);        b[x]++;    }}int main(){    int a[MAX+1], i, n, *p;   //a[0]统计弃权的票数    cout << "请输入实到人数：";    cin >> n;    for(p=a; p<=(a+MAX); p++)         *p = 0;    p = a;                    //指针变量p重新指向数组首元素    count(p, n);    for(i = 0; i<=MAX; i++)     {        switch(i)        {            case 0:  cout << "弃权：" << a[i] << endl; break;            default: cout << i << " 号票数： " << a[i] << endl; break;        }    }    return 0;}//--------------------------------//请输入实到人数：010//1:3//2:4//3:5//4:3//5:2//6:1//7:4//8:5//9:5//10:3//弃权：0//1 号票数： 1//2 号票数： 1//3 号票数： 3//4 号票数： 2//5 号票数： 3//--------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="拓展阅读：求伯君-335"><a href="#拓展阅读：求伯君-335" class="headerlink" title="拓展阅读：求伯君   335"></a>拓展阅读：求伯君   335</h6><h6 id="参考答案（下册）-337"><a href="#参考答案（下册）-337" class="headerlink" title="参考答案（下册）  337"></a>参考答案（下册）  337</h6><h6 id="参考文献-340"><a href="#参考文献-340" class="headerlink" title="参考文献    340"></a>参考文献    340</h6><h6 id="附录A-字符集-341"><a href="#附录A-字符集-341" class="headerlink" title="附录A 字符集    341"></a>附录A 字符集    341</h6><h6 id="附录B-奖励积分卡—比特童币-342-language"><a href="#附录B-奖励积分卡—比特童币-342-language" class="headerlink" title="附录B 奖励积分卡—比特童币       342```language"></a>附录B 奖励积分卡—比特童币       342```language</h6><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》（上册））_第5单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-5-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-5-dan-yuan/</url>
      
        <content type="html"><![CDATA[<p>###### </p><h3 id="第-7单元函数-287"><a href="#第-7单元函数-287" class="headerlink" title="第 7单元函数    287"></a>第 7单元函数    287</h3><pre class="line-numbers language-language"><code class="language-language"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="第-71课一见如故—函数-288"><a href="#第-71课一见如故—函数-288" class="headerlink" title="第 71课一见如故—函数   288"></a>第 71课一见如故—函数   288</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;void show(int geshu){  int i;  for(i=1;i<=geshu;i++)    cout<<"*";  cout<<endl;}int main(){  int i, n;       cout<<"лл╩§Б║";  cin>>n;   for(i=1;i<=n;i++)    show(i);  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-72课函数与最大值—局部变量与全局变量-293"><a href="#第-72课函数与最大值—局部变量与全局变量-293" class="headerlink" title="第 72课函数与最大值—局部变量与全局变量       293"></a>第 72课函数与最大值—局部变量与全局变量       293</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int max(int x,int y){}int main(){  int i,ans,a[5];  for(i=0;i<5;i++)    cin>>a[i];  return 0;}#include<iostream>using namespace std;int ans;      //全局变量，此位置后面的函数都可以使用它int max(int x,int y){  if(x>y) return x;  else return y;}void fun1(void){  int i,a[5];  for(i=0;i<5;i++)    cin>>a[i];  ans=a[0];  for(i=1;i<5;i++)    ans=max(ans,a[i]);}int main(){  fun1();  cout<<ans<<endl;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-73课丑数—函数的应用-297"><a href="#第-73课丑数—函数的应用-297" class="headerlink" title="第 73课丑数—函数的应用 297"></a>第 73课丑数—函数的应用 297</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>#include<iomanip>using namespace std;bool choushu(int n){}int main(){   int num=0;   cout<<endl;   cout<<"个数："<<num<<endl;    return 0;}#include<iostream>#include<iomanip>using namespace std;bool choushu(int n){  while(n%2==0)    n/=2;  while(n%3==0)    n/=3;  while(n%5==0)    n/=5;  return (n==1);                  }int main(){  int num=0;  for(int i=1;i<=100;i++)    if(choushu(i))    {      cout<<setw(6)<<i;          num++;      if(!(num%10)) cout<<endl;        }   cout<<endl;  cout<<"个数："<<num<<endl;   return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第74课哥德巴赫猜想—函数的应用-300"><a href="#第74课哥德巴赫猜想—函数的应用-300" class="headerlink" title="第74课哥德巴赫猜想—函数的应用  300"></a>第74课哥德巴赫猜想—函数的应用  300</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int sushu(int x){  if(x<1) return 0;  if(x==2) return 1;  for(int i=2;i<=x-1;i++)    if(x%i==0) return 0;  return 1;}int main(){  int i,j;  for(i=4;i<=10;i+=2)  {    for(j=2;j<i;j++)      if(sushu(j))        if(sushu(i-j))        {          cout<<i<<'='<<j<<'+'<<i-j<<endl;          break;        }    if(i==j) cout<<i<<"验证失败！"<<endl;  }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-75课第-n个大的数—数组名作为实参-304"><a href="#第-75课第-n个大的数—数组名作为实参-304" class="headerlink" title="第 75课第 n个大的数—数组名作为实参  304"></a>第 75课第 n个大的数—数组名作为实参  304</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int maxn(int b[],int m){  bool p=true;  int x,num,i=0;  while(p)  {    x=b[i];    num=0;    for(int j=0;j<10;j++)      if(x<b[j]) num++;    if(num==m-1)       p=false;    else      i++;  }  return x;}int main(){  int n,a[10]={99,200,95,87,98,-12,30,87,75,-25};  do  {    cin>>n;   }while(n<1||n>10);  cout<<maxn(a,n)<<endl;  //数组名作为实参  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-76课猜猜乐—二分法查找-308"><a href="#第-76课猜猜乐—二分法查找-308" class="headerlink" title="第 76课猜猜乐—二分法查找        308"></a>第 76课猜猜乐—二分法查找        308</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int search(int b[],int len,int key){  int high,low;  high=len-1;  low=0;  int mid=len/2;  while(high>=low)  {    mid=(high+low)/2;    cout<<b[mid]<<endl;    if(b[mid]==key)      return mid;    else if(b[mid]>key)           high=mid-1;                  else            low=mid+1;  }  return 0;}main(){  const int max=100;  int a[max],n;  for(int i=0;i<max;i++)    a[i]=i+1;  do  {    cin>>n;      }while(n<1||n>100);  if(search(a,max,n))     cout<<"成功！";  else    cout<<"失败！";  return 0; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-77课交作业啦—递归算法-312"><a href="#第-77课交作业啦—递归算法-312" class="headerlink" title="第 77课交作业啦—递归算法        312"></a>第 77课交作业啦—递归算法        312</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>                      using namespace std;   int zuoye(int n){    if(n==7)    return 1;  else    return zuoye(n+1)+1;}int main(){  cout<<zuoye(1)<<endl;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-78课通力合作的-100个数—递归算法及子函数的声明-316"><a href="#第-78课通力合作的-100个数—递归算法及子函数的声明-316" class="headerlink" title="第 78课通力合作的 100个数—递归算法及子函数的声明      316"></a>第 78课通力合作的 100个数—递归算法及子函数的声明      316</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>#include<iomanip>using namespace std;void show(int n); int main(){  int n=100;  show(n);  return 0;}void show(int n){  if(n!=1) show(n-1);        cout<<setw(5)<<n;  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-79课谁是老大—递归求最大值-319"><a href="#第-79课谁是老大—递归求最大值-319" class="headerlink" title="第 79课谁是老大—递归求最大值    319"></a>第 79课谁是老大—递归求最大值    319</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int max(int a[],int n){  int t;  if(n==1)    t=a[1];  else    if(max(a,n-1)>a[n])      t=max(a,n-1);    else      t=a[n];      return t;}int main(){  int a[6];   //为了便于理解，a[0]不用。  cout<<"请输入5个数："<<endl;   for(int i=1;i<=5;++i)    cin>>a[i];  cout<<"最大的数是："<<max(a,5)<<endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="拓展阅读：世界上第一个微处理器-322"><a href="#拓展阅读：世界上第一个微处理器-322" class="headerlink" title="拓展阅读：世界上第一个微处理器 322"></a>拓展阅读：世界上第一个微处理器 322</h6>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》（上册））_第4单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-4-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-4-dan-yuan/</url>
      
        <content type="html"><![CDATA[<p>###### </p><h3 id="第-6单元数组-24"><a href="#第-6单元数组-24" class="headerlink" title="第 6单元数组    24"></a>第 6单元数组    24</h3><pre class="line-numbers language-language"><code class="language-language"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="第-61课查分程序—数组-244"><a href="#第-61课查分程序—数组-244" class="headerlink" title="第 61课查分程序—数组   244"></a>第 61课查分程序—数组   244</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  int a[6],n,i;     //为了使用a[5]  for(i=1;i<=5;i++)  {    cout<<i<<"号成绩:";    cin>>a[i];  }  cout<<"输入学号1-5:";  cin>>n;  if(n>=1&&n<=5)    cout<<a[n];   else    cout<<"输入的学号不存在！";   return  0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-62课捉迷藏—数组越界-248"><a href="#第-62课捉迷藏—数组越界-248" class="headerlink" title="第 62课捉迷藏—数组越界 248"></a>第 62课捉迷藏—数组越界 248</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  bool a[11];     int i,cishu;  for(i=1;i<=10;i++)    a[i]=true;  i=0;  cishu=1;  while(cishu<=1000)  {    i=(i+cishu)%10;     if(i==0) i=10;    a[i]=false;     cishu++;  }  for(i=1;i<=10;i++)    if(a[i]) cout<<i<<endl;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-63课老鹰捉小鸡—循环移位-252"><a href="#第-63课老鹰捉小鸡—循环移位-252" class="headerlink" title="第 63课老鹰捉小鸡—循环移位      252"></a>第 63课老鹰捉小鸡—循环移位      252</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  int i,j,a[6],n;  for(i=1;i<6;i++)    a[i]=i;  //输出第1次的位置  i=1;  cout<<i<<":  ";   for(j=1;j<6;j++)     cout<<a[j]<<"  ";      cout<<endl;  for(i=2;i<=10;i++)  {    //移动位置    for(j=0;j<=4;j++)      a[j]=a[j+1];    a[5]=a[0];    //输出位置    cout<<i<<":  ";     for(j=1;j<=5;j++)      cout<<a[j]<<"  ";    cout<<endl;    }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-64课跳绳比赛—排序-256"><a href="#第-64课跳绳比赛—排序-256" class="headerlink" title="第 64课跳绳比赛—排序   256"></a>第 64课跳绳比赛—排序   256</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  int a[6],i,j,t;    cout<<"输入5个整数:"<<endl;   for(i=1;i<=5;i++)    cin>>a[i];   for(i=1;i<=4;i++)    for(j=i+1;j<=5;j++)      if(a[j]>a[i])      {                                       t=a[i];        a[i]=a[j];            a[j]=t;            }  for(i=1;i<=5;i++)    cout<<a[i]<<"  ";  return  0; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-65课采访报道—字符数组的输入与输出-261"><a href="#第-65课采访报道—字符数组的输入与输出-261" class="headerlink" title="第 65课采访报道—字符数组的输入与输出 261"></a>第 65课采访报道—字符数组的输入与输出 261</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std; int main(){   char str[2000];    int i,num,numa;   num=numa=0;   cout<<"字符个数 ："<<num<<endl;   cout<<".的个数："<<numa<<endl;     return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-66课恺撒加密术—字符串的输入与输出-265"><a href="#第-66课恺撒加密术—字符串的输入与输出-265" class="headerlink" title="第 66课恺撒加密术—字符串的输入与输出 265"></a>第 66课恺撒加密术—字符串的输入与输出 265</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>#include<string>using namespace std;  int  main(){  char s;  string str1,str2;  getline(cin,str1);  int i;  str2="";  for(i=0;i<str1.size();i++) //str1.szie()返回str1中字符个数  {        s=str1[i];    if((s>='a'&&s<='z')||(s>='A'&&s<='Z'))     {       s++;      if((s>'Z'&&s<'a')||s>'z')        s-=26;    }    str2+=s;   }  cout<<str2;  return  0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-67课快速求素数—筛选法-269"><a href="#第-67课快速求素数—筛选法-269" class="headerlink" title="第 67课快速求素数—筛选法        269"></a>第 67课快速求素数—筛选法        269</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream> #include<iomanip>using namespace std;int main(){  int a[101];  int i,j,num;  for(i=2;i<=100;i++)    a[i]=true;  a[0]=a[1]=false;   i=1;   do  {    i++;    if(a[i])    {      for(j=2;j<=100/i;j++)        a[i*j]=false;    }  }while(i<100);   num=0;  for(i=1;i<=100;i++)  {      if(a[i])    {      cout<<setw(6)<<i;       num++;      if(num%10==0) cout<<endl;        }   }  cout<<endl;  cout<<"100以内素数个数："<<num<<endl;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-68课谁大谁小—逻辑判断与推理-273"><a href="#第-68课谁大谁小—逻辑判断与推理-273" class="headerlink" title="第 68课谁大谁小—逻辑判断与推理  273"></a>第 68课谁大谁小—逻辑判断与推理  273</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  int make,boli,mani,nike;  bool tj[4];  for(make=1;make<=4;make++)    for(boli=1;boli<=4;boli++)      for(mani=1;mani<=4;mani++)      {        nike=10-make-boli-mani;        if(make*boli*mani*nike==1*2*3*4)        {          tj[0]=((make==1)+(boli==4)+(mani==3)+(nike==2)==2);          tj[1]=((boli==1)+(make==4)+(mani==2)+(nike==3)==2);          tj[2]=((boli==4)+(make==3)==1);          tj[3]=((make==1)+(nike==4)+(boli==3)+(mani==2)==2);          if(tj[0]&&tj[1]&&tj[2]&&tj[3])          {            cout<<"马克："<<make<<endl;            cout<<"波力："<<boli<<endl;            cout<<"马尼："<<mani<<endl;            cout<<"尼克："<<nike<<endl;            break;               }                   }      }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-69课胡萝卜与骨头—模拟法-276"><a href="#第-69课胡萝卜与骨头—模拟法-276" class="headerlink" title="第 69课胡萝卜与骨头—模拟法      276"></a>第 69课胡萝卜与骨头—模拟法      276</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  int i,a[31],num=0,k=0;  for(i=1;i<=30;i++)    a[i]=0;  while(num<15)   {                                for(i=1;i<=30;i++)    {      if(a[i]==1) continue;      k++;      if(k==9)      {        a[i]=1;        k=0;        num++;        if(num==15) break;      }    }  }  cout<<"骨头所在的位置：";   for(i=1;i<=30;i++)    if(a[i]==0) cout<<i<<"  ";   return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-70课读心术—二进制数的应用-280"><a href="#第-70课读心术—二进制数的应用-280" class="headerlink" title="第 70课读心术—二进制数的应用    280"></a>第 70课读心术—二进制数的应用    280</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>#include<string>using namespace std;int main(){  int i,a[4],ans;  string t[4];  t[0]="1,2,3,4,5,6,7";  t[1]="1,3,5,7";  t[2]="2,3,6,7";  t[3]="4,5,6,7";  cout<<"读心术猜数"<<endl;   cout<<"请你在下面7个数中，选一个并记在心里。"<<endl;   cout<<t[0]<<endl;  system("pause");    //暂停   for(i=1;i<=3;i++)  {    system("cls");  //清屏     cout<<i<<"问：下面的数中有吗? 0:没有, 1:有"<<endl;     cout<<t[i]<<endl;        do    {      cin>>a[i];    }while(a[i]<0||a[i]>1);  }  ans=4*a[3]+2*a[2]+a[1];  system("cls");  cout<<"你心中想的数是:" ;  cout<<ans<<endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="拓展阅读：数据结构-286"><a href="#拓展阅读：数据结构-286" class="headerlink" title="拓展阅读：数据结构  286"></a>拓展阅读：数据结构  286</h6>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》（上册））_第3单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-3-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-3-dan-yuan/</url>
      
        <content type="html"><![CDATA[<p>###### </p><h3 id="第-3单元-循环结构"><a href="#第-3单元-循环结构" class="headerlink" title="第 3单元 循环结构"></a>第 3单元 循环结构</h3><h6 id="第-27课老狼老狼几点钟—for语句-108"><a href="#第-27课老狼老狼几点钟—for语句-108" class="headerlink" title="第 27课老狼老狼几点钟—for语句 108"></a>第 27课老狼老狼几点钟—for语句 108</h6><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  cout &lt;&lt; &quot;老狼老狼几点钟?  1点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  2点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  3点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  4点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  5点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  6点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  7点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  8点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  9点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  10点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  11点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;老狼老狼几点钟?  12点钟。&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;狼来了，快跑！&quot; &lt;&lt; endl;  return  0;}</code></pre><h6 id="第-28课叮叮当当—for语句与-if语句的结合-113"><a href="#第-28课叮叮当当—for语句与-if语句的结合-113" class="headerlink" title="第 28课叮叮当当—for语句与 if语句的结合  113"></a>第 28课叮叮当当—for语句与 if语句的结合  113</h6><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int i;  for(i=1;i&lt;20;i++)  {    cout &lt;&lt; i &lt;&lt; &#39; &#39;;            //&#39; &#39;中有1个空格        if(i%2==0) cout &lt;&lt; &quot;叮叮&quot; &lt;&lt; endl;    if(i%3==0) cout &lt;&lt; &quot;当当&quot; &lt;&lt; endl;    if(i%2==0||i%3==0) cout &lt;&lt; endl;   }      return 0;}</code></pre><h6 id="第-29课布纳特老师出的难题—累加求和-117"><a href="#第-29课布纳特老师出的难题—累加求和-117" class="headerlink" title="第 29课布纳特老师出的难题—累加求和 117"></a>第 29课布纳特老师出的难题—累加求和 117</h6><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int i,sum=0;  for(i=1;i&lt;=100;i++)    sum+=i;  cout &lt;&lt; &quot;1+2+3+...+100=&quot;;  cout  &lt;&lt; sum &lt;&lt; endl;  return 0;}</code></pre><h6 id="第-30课棋盘上的学问—超长整型与数据溢出-120"><a href="#第-30课棋盘上的学问—超长整型与数据溢出-120" class="headerlink" title="第 30课棋盘上的学问—超长整型与数据溢出  120"></a>第 30课棋盘上的学问—超长整型与数据溢出  120</h6><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  long long sum,n;   // long long为长整型  int i;  sum=0;  n=1;  for(i=1;i&lt;=64;i++)  {     n*=2;       sum+=n;     cout &lt;&lt; i &lt;&lt; &quot;   &quot; &lt;&lt; n &lt;&lt; endl;  }  cout &lt;&lt; &quot;总数：&quot; &lt;&lt; sum &lt;&lt; endl;  return 0;}</code></pre><h6 id="第-31课-3721数—continue语句-125"><a href="#第-31课-3721数—continue语句-125" class="headerlink" title="第 31课 3721数—continue语句 125"></a>第 31课 3721数—continue语句 125</h6><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int i;  for(i=1;i&lt;=200;++i)   {    if(i%3!=2||i%7!=1)       continue;     cout &lt;&lt; i &lt;&lt; &#39; &#39; ;  }  return 0;}</code></pre><h6 id="第-32课-26个兄弟姐妹—循环变量为字符型-128"><a href="#第-32课-26个兄弟姐妹—循环变量为字符型-128" class="headerlink" title="第 32课 26个兄弟姐妹—循环变量为字符型   128"></a>第 32课 26个兄弟姐妹—循环变量为字符型   128</h6><pre><code>#include&lt;iostream&gt; using namespace std; int main(){  char i;  for(i=&#39;a&#39;;i&lt;=&#39;z&#39;;i++)    cout &lt;&lt; i &lt;&lt; &#39; &#39;;  cout &lt;&lt; endl;  for(i=&#39;Z&#39;;i&gt;=&#39;A&#39;;i--)    cout &lt;&lt; i &lt;&lt; &#39; &#39;;  return 0;}</code></pre><h6 id="第-33课打擂台—for语句的另一种形式-132"><a href="#第-33课打擂台—for语句的另一种形式-132" class="headerlink" title="第 33课打擂台—for语句的另一种形式  132"></a>第 33课打擂台—for语句的另一种形式  132</h6><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  float max,x;  int i;  cout &lt;&lt; &quot;请输入第1个数:&quot;;               cin&gt;&gt;x;  max=x;  i=2;  for(;i&lt;=10;i++)  {    cout &lt;&lt; &quot;请输入第&quot; &lt;&lt; i &lt;&lt; &quot;个数:&quot;;       cin&gt;&gt;x;    if(x&gt;max) max=x;  }  cout &lt;&lt; &quot;最大的数：&quot; &lt;&lt; max;   return 0;}</code></pre><h6 id="第-34课生命周期与素数—break语句-136"><a href="#第-34课生命周期与素数—break语句-136" class="headerlink" title="第 34课生命周期与素数—break语句    136"></a>第 34课生命周期与素数—break语句    136</h6><pre><code>#include&lt;iostream&gt;using namespace std; int main(){  long long i,n;   bool flag;  cout &lt;&lt; &quot;n=&quot;;   //是素数  //不是素数  return 0;}</code></pre><h6 id="第-35课水仙花数—数位分离-140"><a href="#第-35课水仙花数—数位分离-140" class="headerlink" title="第 35课水仙花数—数位分离   140"></a>第 35课水仙花数—数位分离   140</h6><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int ge,shi,bai,i;  cout &lt;&lt; &quot;水仙花数&quot; &lt;&lt; endl;   for(i=100;i&lt;1000;i++)  {    bai=i/100;      shi=(i/10)%10;      ge=i%10;      if (bai*bai*bai+shi*shi*shi+ge*ge*ge==i)       cout &lt;&lt; i &lt;&lt; &quot;     &quot;;   }  return 0; }</code></pre><h6 id="第-36课天连碧水碧连天—回文数-144"><a href="#第-36课天连碧水碧连天—回文数-144" class="headerlink" title="第 36课天连碧水碧连天—回文数  144"></a>第 36课天连碧水碧连天—回文数  144</h6><pre><code>#include&lt;iostream&gt;    using namespace std;int main(){  int i,num,n,m;  //是回文数  //不是回文数  return 0;}</code></pre><h6 id="第-37课神奇的大自然—斐波那契数列及长整型-long-148"><a href="#第-37课神奇的大自然—斐波那契数列及长整型-long-148" class="headerlink" title="第 37课神奇的大自然—斐波那契数列及长整型 long  148"></a>第 37课神奇的大自然—斐波那契数列及长整型 long  148</h6><pre><code>#include&lt;iostream&gt;#include&lt;iomanip&gt;using namespace std;int main(){  long i,a1,a2,a3;  a2=a1=1;  cout &lt;&lt; setw(5) &lt;&lt; a1;  cout &lt;&lt; setw(5) &lt;&lt; a2;   for(i=3;i&lt;=10;i++)  {    a3=a1+a2;    cout &lt;&lt; setw(5) &lt;&lt; a3;    a1=a2;    a2=a3;  }   return 0;}</code></pre><h6 id="第-38课-警察抓小偷—逻辑判断与推理-152"><a href="#第-38课-警察抓小偷—逻辑判断与推理-152" class="headerlink" title="第 38课 警察抓小偷—逻辑判断与推理   152"></a>第 38课 警察抓小偷—逻辑判断与推理   152</h6><pre><code>#include&lt;iostream&gt;      using namespace std;   int main(){  int x;  char xiaotou;  for(x=1;x&lt;=4;x++)    if((x!=1)+(x==3)+(x==4)+(x!=4)==3)    {      xiaotou=64+x;      cout &lt;&lt; &quot;С͵ˇú&quot; &lt;&lt; xiaotou;      break;    }  return 0; }</code></pre><h6 id="第-39课-口算大师—for语句的应用-156"><a href="#第-39课-口算大师—for语句的应用-156" class="headerlink" title="第 39课 口算大师—for语句的应用 156"></a>第 39课 口算大师—for语句的应用 156</h6><pre><code>#include &lt;iostream&gt;  #include&lt;ctime&gt;  #include&lt;cstdlib&gt;  using namespace std;  int main()  {    srand(time(0));  int x,y,symbol,ans;  int n,temp,sum=0;     for(int i=0; i&lt;10; i++)    {      x=rand()%9+1;      y=rand()%9+1;      symbol=rand()%2;      if(x&lt;y&amp;&amp;symbol==1)     {           temp=x;        x=y;        y=temp;      }      switch(symbol)      {        case 0:          ans=x+y;          cout &lt;&lt; x &lt;&lt; &#39;+&#39; &lt;&lt; y &lt;&lt; &#39;=&#39;;          break;        case 1:          ans=x-y;          cout &lt;&lt; x &lt;&lt;  &#39;-&#39; &lt;&lt; y &lt;&lt; &#39;=&#39;;          break;      }      cin&gt;&gt;n;      if(n==ans)     {      sum+=10;       cout &lt;&lt; &quot;    对! &quot; &lt;&lt; endl;            }    else        cout &lt;&lt; &quot;    错! &quot; &lt;&lt; endl;    }    cout &lt;&lt; &quot;得分：&quot; &lt;&lt; sum &lt;&lt; endl;    return 0;  }  </code></pre><h6 id="拓展阅读：神奇的二进制数-161"><a href="#拓展阅读：神奇的二进制数-161" class="headerlink" title="拓展阅读：神奇的二进制数 161"></a>拓展阅读：神奇的二进制数 161</h6><h6 id="参考答案（上册）-163"><a href="#参考答案（上册）-163" class="headerlink" title="参考答案（上册）     163"></a>参考答案（上册）     163</h6><h1 id="while和do-while循环结构"><a href="#while和do-while循环结构" class="headerlink" title="while和do-while循环结构"></a>while和do-while循环结构</h1><h3 id="第-40课-儿歌《打老虎》—while语句"><a href="#第-40课-儿歌《打老虎》—while语句" class="headerlink" title="第 40课 儿歌《打老虎》—while语句"></a>第 40课 儿歌《打老虎》—while语句</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream>#include<iomanip>using namespace std;int main(){  int gongji,muji,xiaoji;  cout<<setw(5)<<"公鸡"<<setw(5)<<"母鸡"<<setw(5)<<"小鸡"<<endl;  for(gongji=1;gongji<=33;gongji++)    for(muji=1;muji<=50;muji++)    {      xiaoji=100-gongji-muji;      if(gongji*3+muji*2+xiaoji/3.0==100)        cout<<setw(5)<<gongji<<setw(5)<<muji<<setw(5)<<xiaoji<<endl;    }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-41课-蜗牛与葡萄树—死循环"><a href="#第-41课-蜗牛与葡萄树—死循环" class="headerlink" title="第 41课 蜗牛与葡萄树—死循环"></a>第 41课 蜗牛与葡萄树—死循环</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std; int main(){  int i,t;  t=i=0;  while(1)  {     t++;     i+=3;     if (i>=17) break;     t++;     i--;  }      cout<<"需"<<t<<"分钟"<<endl;  return 0; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-42课-最小公倍数—枚举算法"><a href="#第-42课-最小公倍数—枚举算法" class="headerlink" title="第 42课 最小公倍数—枚举算法"></a>第 42课 最小公倍数—枚举算法</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){    int x,y,temp,s,i=1;  cout<<"请输入两个自然数：";  cin>>x>>y;  if(x>y)  {    temp=x;    x=y;    y=temp;  }  s=y*i;  while(s%x!=0)  {    i++;    s=y*i;  }  cout<<"最小公倍数："<<s<<endl;   return 0; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-43课-最大公约数—辗转相除-175"><a href="#第-43课-最大公约数—辗转相除-175" class="headerlink" title="第 43课 最大公约数—辗转相除      175"></a>第 43课 最大公约数—辗转相除      175</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream> using namespace std;int main(){  long long  m,n,r;  cout<<"输入两个正整数：";  cin>>m>>n;   r=m%n;  while(r!=0)  {      m=n;      n=r;      r=m%n;  }  cout<<"最大公约数："<<n<<endl;  return 0; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-44课-角谷猜想—while语句的应用"><a href="#第-44课-角谷猜想—while语句的应用" class="headerlink" title="第 44课 角谷猜想—while语句的应用"></a>第 44课 角谷猜想—while语句的应用</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream> using namespace std; int main(){  long long  x,s=0;  cout<<"x=";  cin>>x;  while(x!=1)  {    cout<<x<<"---->";    if(x%2==1) x=x*3+1;    else x/=2;    s++;  }  cout<<x<<endl;  cout<<"步数:"<<s<<endl;  return 0;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-45课-蝴蝶效应—双精度实数-double及科学计数法"><a href="#第-45课-蝴蝶效应—双精度实数-double及科学计数法" class="headerlink" title="第 45课 蝴蝶效应—双精度实数 double及科学计数法"></a>第 45课 蝴蝶效应—双精度实数 double及科学计数法</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  int n,i;  double  n1,n2;  n=1;  n1=n-0.1;  n2=n+0.1;  cout<<"   "<<n1;  cout<<"   "<<n2<<endl;   i=1;  while(i<=10)  {    n1*=n1;    n2*=n2;    cout<<i<<"  "<<n1<<"   "<<n2<<endl;    i++;  }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-46课-精益求精—分数化为小数"><a href="#第-46课-精益求精—分数化为小数" class="headerlink" title="第 46课 精益求精—分数化为小数"></a>第 46课 精益求精—分数化为小数</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream> using namespace std;int main(){  int a,b,i;  cout<<"0.";  i=1;  a=1;  while(i<=100)  {    a*=10;    b=a/7;     cout<<b;    a%=7;    i++;  }   return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-47课-称心如意的输入—do-while语句"><a href="#第-47课-称心如意的输入—do-while语句" class="headerlink" title="第 47课 称心如意的输入—do-while语句"></a>第 47课 称心如意的输入—do-while语句</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  float x;   do  {      cout<<"请输入成绩:";    cin>>x;  }while(x<0||x>100);  cout<<"成绩:"<<x<<endl;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-48课-加加乐—各数位之和"><a href="#第-48课-加加乐—各数位之和" class="headerlink" title="第 48课 加加乐—各数位之和"></a>第 48课 加加乐—各数位之和</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  long long n;   int a,sum=0;   cout<<"n=";  cin>>n;  do  {    a=n%10;    sum+=a;    n=n/10;  }while(n!=0);  cout<<"各个数位之和："<<sum<<endl;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-49课-大大大—纯小数变整数"><a href="#第-49课-大大大—纯小数变整数" class="headerlink" title="第 49课 大大大—纯小数变整数"></a>第 49课 大大大—纯小数变整数</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream> using namespace std;int main(){  double x,y;  int num;  cout<<"请输入一个纯小数"<<endl;   do  {    cout<<"x=";    cin>>x;  }while(x>=1||x<=0);  num=1;  do  {    num*=10;    y=x*num;  }while(y!=(int)y);  cout<<(int)y<<endl;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-50课-书香阁的座位数—数学计算"><a href="#第-50课-书香阁的座位数—数学计算" class="headerlink" title="第 50课 书香阁的座位数—数学计算"></a>第 50课 书香阁的座位数—数学计算</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std; int main(){  int sum,p,x;  p=1;  x=15;  sum=x;    cout<<p<<"  "<<x;  cout<<"  "<<sum<<endl;   do   {    p++;    x+=2;    sum+=x;    cout<<p<<"  "<<x<<"  "<<sum<<endl;  }while(sum !=312);  cout<<"最后一排的座位数："<<x<<endl;  cout<<"排数："<<p<<endl;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-51课-拍手游戏—模拟法"><a href="#第-51课-拍手游戏—模拟法" class="headerlink" title="第 51课 拍手游戏—模拟法"></a>第 51课 拍手游戏—模拟法</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  int time, count,teacher,nike, glair;  bool flag;      time=0;  count=1;   teacher=nike=glair=0;  do  {    flag=0;      time++;      if(teacher<9)    {      flag=1;      teacher++;    }      if(nike<9&&time%2==0)    {      flag=1;      nike++;    }    if(glair<9&&time%4==0)    {      flag=1;          glair++;    }    if(flag) count++;  }while(teacher+nike+glair<9*3);  cout<<count<<endl;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-52课-报数游戏—模拟法"><a href="#第-52课-报数游戏—模拟法" class="headerlink" title="第 52课 报数游戏—模拟法"></a>第 52课 报数游戏—模拟法</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream> using namespace std;int main(){  int n,nike,glair,num=0;  nike=glair=0;  n=0;  do  {    nike++;    if(nike>20) nike=1;    glair++;    if(glair>30) glair=1;    if(nike==glair) num++;    n++;  }while(n<1000);  cout<<num;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-53课-化功大法—纯小数转化为最简分数"><a href="#第-53课-化功大法—纯小数转化为最简分数" class="headerlink" title="第 53课 化功大法—纯小数转化为最简分数"></a>第 53课 化功大法—纯小数转化为最简分数</h3><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  double x,y;  int a,b,i,j;  cout<<"请输入一个纯小数"<<endl;  do  {    cout<<"x=";    cin>>x;  }while(x>=1||x<=0);  a=1;  while(y!=(int)y)   //纯小数化成整数  {    a*=10;    y=x*a;  }  b=y;  cout<<b<<'/'<<a<<endl;  for(i=b;i>=1;i--)  //求出a和b的最大公约    if(b%i==0&&a%i==0)     {      j=i;   //找出最大公约数后，赋值给j      break; //退出循环    }  cout<<"最简分数为：";  cout<<b/j<<'/'<<a/j<<endl;       return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拓展阅读：计算机系统"><a href="#拓展阅读：计算机系统" class="headerlink" title="拓展阅读：计算机系统"></a>拓展阅读：计算机系统</h3><h3 id="第-5单元-多重循环-213"><a href="#第-5单元-多重循环-213" class="headerlink" title="第 5单元 多重循环 213"></a>第 5单元 多重循环 213</h3><h6 id="第-54课-有规律的图形—循环的嵌套-214"><a href="#第-54课-有规律的图形—循环的嵌套-214" class="headerlink" title="第 54课 有规律的图形—循环的嵌套  214"></a>第 54课 有规律的图形—循环的嵌套  214</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  int i,j;  for(i=1;i<=3;i++)  {    for(j=1;j<=5;j++)       cout<<'*';    cout<<endl;       }   return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-55课-图形的窍门—双重循环的应用-219"><a href="#第-55课-图形的窍门—双重循环的应用-219" class="headerlink" title="第 55课 图形的窍门—双重循环的应用    219"></a>第 55课 图形的窍门—双重循环的应用    219</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>#include<iomanip>    //为了使用setw()来设置域宽using namespace std;int main(){  int i,j;  for(i=1;i<=5;i++)            //外循环控制行数  {     cout<<setw(41-i) <<' ';    //占位，右对齐，每行位置    for(j=1;j<=i*2-1;j++)     //内层循环控制每行的个数      cout<<'*';             //输出的内容    cout<<endl;              //换行  }   return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-56课-九九乘法表—双重循环的应用-223"><a href="#第-56课-九九乘法表—双重循环的应用-223" class="headerlink" title="第 56课 九九乘法表—双重循环的应用    223"></a>第 56课 九九乘法表—双重循环的应用    223</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream> #include<iomanip>using namespace std;int main(){  int i,j;  for(i=1;i<=9;i++)  {    for(j=1;j<=i;j++)      cout<<i<<'*'<<j<<'='<<setw(2)<<i*j<<"  ";    cout<<endl;  }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-57课-鸡兔同笼—双重循环的应用-226"><a href="#第-57课-鸡兔同笼—双重循环的应用-226" class="headerlink" title="第 57课 鸡兔同笼—双重循环的应用  226"></a>第 57课 鸡兔同笼—双重循环的应用  226</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream> using namespace std;int main(){  int ji,tu;  for(ji=1;ji<=34;ji++)    for(tu=1;tu<=23;tu++)    {      if(ji+tu==35)        if(ji*2+tu*4==94)          cout<<"ผฆฃบ"<<ji<<"  อรฃบ"<<tu<<endl;    }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-58课-百钱买百鸡—三重循环与程序的优化-229"><a href="#第-58课-百钱买百鸡—三重循环与程序的优化-229" class="headerlink" title="第 58课 百钱买百鸡—三重循环与程序的优化       229"></a>第 58课 百钱买百鸡—三重循环与程序的优化       229</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>#include<iomanip>using namespace std;int main(){  int gongji,muji,xiaoji;  cout<<setw(5)<<"公鸡"<<setw(5)<<"母鸡"<<setw(5)<<"小鸡"<<endl;  for(gongji=1;gongji<=33;gongji++)    for(muji=1;muji<=50;muji++)    {      xiaoji=100-gongji-muji;      if(gongji*3+muji*2+xiaoji/3.0==100)        cout<<setw(5)<<gongji<<setw(5)<<muji<<setw(5)<<xiaoji<<endl;    }  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-59课-比特童币—四重循环-233"><a href="#第-59课-比特童币—四重循环-233" class="headerlink" title="第 59课 比特童币—四重循环        233"></a>第 59课 比特童币—四重循环        233</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream> using namespace std;int main(){  int a1,a2,a3,a4,n;  for(a4=0;a4<=1;a4++)    for(a3=0;a3<=1;a3++)          for(a2=0;a2<=1;a2++)        for(a1=0;a1<=1;a1++)        {           n=a4*8+a3*4+a2*2+a1*1;           cout<<a4<<a3<<a2<<a1<<"B    "<<n<<endl;        }  return 0;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="第-60课-比特超市—超市收费程序-237"><a href="#第-60课-比特超市—超市收费程序-237" class="headerlink" title="第 60课 比特超市—超市收费程序    237"></a>第 60课 比特超市—超市收费程序    237</h6><pre class="line-numbers language-language"><code class="language-language">#include<iostream>using namespace std;int main(){  int num=0;  float n,sumone,sum;  bool  flag;   flag=true;  sum=0.0;    //当前顾客应付的货款:  cout<<"今天的营业额："<<sum<<endl;  cout<<"今天的顾客人数："<<num<<endl;  return 0;}#include<iostream>using namespace std;int main(){  int num=0;  float n,sumone,sum;  bool  flag;   flag=true;  sum=0.0;  while(flag)  {     sumone=0.0;      do      {      cin>>n;       if(n==-1)      {          n=0;          flag=false;      }        sumone+=n;    }while(n!=0&&flag);    cout<<"当前顾客应付的货款:" ;    cout <<sumone<<endl;    num++;    sum+=sumone;  }  cout<<"今天的营业额："<<sum<<endl;  cout<<"今天的顾客人数："<<num<<endl;  return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="拓展阅读：因特网-241"><a href="#拓展阅读：因特网-241" class="headerlink" title="拓展阅读：因特网   241"></a>拓展阅读：因特网   241</h6>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》（上册））_第1单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-1-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-1-dan-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="第1单元-顺序结构"><a href="#第1单元-顺序结构" class="headerlink" title="第1单元 顺序结构"></a>第1单元 顺序结构</h1><h3 id="第-1课编程是一门技术"><a href="#第-1课编程是一门技术" class="headerlink" title="第 1课编程是一门技术"></a>第 1课编程是一门技术</h3><h6 id="——认识-Dev-C"><a href="#——认识-Dev-C" class="headerlink" title="——认识 Dev-C++"></a>——认识 Dev-C++</h6><p>对于编程，学习者首先接触到就是编译器</p><p><strong>编译器</strong></p><p>DEV-C++，折腾少<br>language</p><p><strong>集成开发环境</strong></p><p>Code Blocks，麻烦</p><p>Visual Studio，开发工具集，全面</p><p>Vim + gcc 推荐</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习</p><p>1.C++编写的源程序扩展名为<u>.cpp</u></p><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-2课春晓"><a href="#第-2课春晓" class="headerlink" title="第 2课春晓"></a>第 2课春晓</h3><h6 id="——cout语句"><a href="#——cout语句" class="headerlink" title="——cout语句"></a>——cout语句</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout  <span class="token operator">&lt;&lt;</span>  <span class="token string">"春 晓"</span>  <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>     cout  <span class="token operator">&lt;&lt;</span>  <span class="token string">"春眠不觉晓，"</span>  <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>    cout  <span class="token operator">&lt;&lt;</span>  <span class="token string">"处处蚊子咬。"</span>  <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>    cout  <span class="token operator">&lt;&lt;</span>  <span class="token string">"夜来嗡嗡声，"</span>  <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>    cout  <span class="token operator">&lt;&lt;</span>  <span class="token string">"脓包知多少。"</span>  <span class="token operator">&lt;&lt;</span>  endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编码问题还是要注意到</p><p>然后编写程序的时候，一定要注意格式，注意分行，注意空格，注意程序的美观。</p><p>写完要拿笔拿纸自己重新默写</p><p>课后练习</p><p>1.计算机系统由<u>硬件系统和软件系统组成</u></p><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"99 + 1 = "</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"大家好!我是大钧老师,很高兴认识你们!"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-3课天安门广场"><a href="#第-3课天安门广场" class="headerlink" title="第 3课天安门广场"></a>第 3课天安门广场</h3><h6 id="——变量、表达式与赋值语句"><a href="#——变量、表达式与赋值语句" class="headerlink" title="——变量、表达式与赋值语句"></a>——变量、表达式与赋值语句</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>  a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">880</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"天安门广场面积："</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">"平方米"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习</p><p>1.<u>3y</u>是非法的标识符</p><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-4课列朋波骨"><a href="#第-4课列朋波骨" class="headerlink" title="第 4课列朋波骨"></a>第 4课列朋波骨</h3><h6 id="——计数器"><a href="#——计数器" class="headerlink" title="——计数器"></a>——计数器</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习<br>1.x = ++b; 等价于<br><u>x = b;</u><br><u>++x;</u></p><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token operator">--</span>i<span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">++</span>i<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*尼克爷爷的岁数、爸爸的岁数和他自己的岁数是3个等差的自然数，每两个数相差25.已知尼克是11岁，那么请输出他们的岁数。 output:113661 */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//爸爸的 </span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">25</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//爷爷的 </span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-5课-雪花"><a href="#第-5课-雪花" class="headerlink" title="第 5课 雪花"></a>第 5课 雪花</h3><h6 id="——累加器"><a href="#——累加器" class="headerlink" title="——累加器"></a>——累加器</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1 + 2 + 3 + 4 = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习</p><p>1.</p><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: output:s = 18*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> s <span class="token operator">+</span> a<span class="token punctuation">;</span>    s <span class="token operator">=</span> s <span class="token operator">+</span> b<span class="token punctuation">;</span>    s <span class="token operator">=</span> s <span class="token operator">+</span> c<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s = "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: 向日葵班43人，苹果班42人，草莓班45人，问共多少人？ output:sum = 130*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化 </span>    n <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sum = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-6课-细胞分裂"><a href="#第-6课-细胞分裂" class="headerlink" title="第 6课 细胞分裂"></a>第 6课 细胞分裂</h3><h6 id="——复合运算符"><a href="#——复合运算符" class="headerlink" title="——复合运算符"></a>——复合运算符</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>  n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: output:i = 16, sum = 31*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sum = 1, i = 1</span>    i <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// i = 2</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sum = 3</span>    i <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// i = 4</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sum = 7</span>    i <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// i = 8</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sum = 15</span>    i <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// i = 16</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sum = 31</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"i = "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">", sum = "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: 格莱尔买来30根骨头，第一天吃掉一半后又吃了一根， 第二天吃掉一半后又吃了一根，第三天仍然如此。 问第三天吃完后还剩下多少根骨头？ output:2*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//14 </span>    n <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//6 </span>    n <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//2 </span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第三天吃完后还剩下 = "</span> <span class="token operator">&lt;&lt;</span> n  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-7课-阿布拉卡达布拉"><a href="#第-7课-阿布拉卡达布拉" class="headerlink" title="第 7课 阿布拉卡达布拉"></a>第 7课 阿布拉卡达布拉</h3><h6 id="——交换两个变量的值及注释符"><a href="#——交换两个变量的值及注释符" class="headerlink" title="——交换两个变量的值及注释符"></a>——交换两个变量的值及注释符</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">"  b="</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出交换前a、b的值</span>    t<span class="token operator">=</span>a<span class="token punctuation">;</span>    a<span class="token operator">=</span>b<span class="token punctuation">;</span>    b<span class="token operator">=</span>t<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a="</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">"  b="</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出交换后a、b的值</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习</p><p>1.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: output:a = 200, b = 100*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//a = 100, b = 200</span>    b <span class="token operator">-</span><span class="token operator">=</span> a<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//b = 100, a = 100</span>    a <span class="token operator">+</span><span class="token operator">=</span> b<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//a = 200, b = 100</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">", b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: output:数 = 438*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ge<span class="token punctuation">,</span> shi<span class="token punctuation">,</span> bai<span class="token punctuation">,</span> shu<span class="token punctuation">;</span>    shi <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    bai <span class="token operator">=</span> shi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//百位 </span>    ge <span class="token operator">=</span> bai <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//个位 </span>    shu <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> bai <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> shi <span class="token operator">+</span> ge<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"数 = "</span> <span class="token operator">&lt;&lt;</span> shu <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-8课-竖式计算"><a href="#第-8课-竖式计算" class="headerlink" title="第 8课 竖式计算"></a>第 8课 竖式计算</h3><h6 id="——设置域宽-setw"><a href="#——设置域宽-setw" class="headerlink" title="——设置域宽 setw"></a>——设置域宽 setw</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>  a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">870</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'+'</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">" -----------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课后练习</p><p>1.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: output:数 = 438*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ge<span class="token punctuation">,</span> shi<span class="token punctuation">,</span> bai<span class="token punctuation">,</span> shu<span class="token punctuation">;</span>    shi <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    bai <span class="token operator">=</span> shi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//百位 </span>    ge <span class="token operator">=</span> bai <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//个位 </span>    shu <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> bai <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> shi <span class="token operator">+</span> ge<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"数 = "</span> <span class="token operator">&lt;&lt;</span> shu <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.</p><h3 id="第-9课-植树造林"><a href="#第-9课-植树造林" class="headerlink" title="第 9课 植树造林"></a>第 9课 植树造林</h3><h6 id="——cin语句"><a href="#——cin语句" class="headerlink" title="——cin语句"></a>——cin语句</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span>  a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入人数和平均每人种的棵数:"</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token punctuation">;</span>   cin<span class="token operator">>></span>b<span class="token punctuation">;</span>   sum<span class="token operator">=</span>a<span class="token operator">*</span>b<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"总的棵数:"</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: cin >> 流提取运算符，使用cin重新编写了“阿布拉卡达布拉” output:a, b = 34 76a = 34, b = 76a = 76, b = 34*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a, b = "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">", b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出交换前a,b的值 </span>    t <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> t<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a = "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">", b = "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出交换后a,b的值 </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-10课-古埃及金字塔"><a href="#第-10课-古埃及金字塔" class="headerlink" title="第 10课 古埃及金字塔"></a>第 10课 古埃及金字塔</h3><h6 id="——单精度实数-float"><a href="#——单精度实数-float" class="headerlink" title="——单精度实数 float"></a>——单精度实数 float</h6><p>第一种解法</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>h<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a, h ="</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> h<span class="token punctuation">;</span>    s <span class="token operator">=</span> a <span class="token operator">*</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s="</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种解法</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*description: 单精度实数 float output:a, h = 3 5s = 7.5*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> h<span class="token punctuation">;</span>    <span class="token keyword">float</span> s<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a, h = "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> h<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> h<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//这里要写成实数2.0，不能写成整数2 </span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s = "</span> <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-11课-尼克与强盗"><a href="#第-11课-尼克与强盗" class="headerlink" title="第 11课 尼克与强盗"></a>第 11课 尼克与强盗</h3><h6 id="——整除及整除求余运算符的应用"><a href="#——整除及整除求余运算符的应用" class="headerlink" title="——整除及整除求余运算符的应用"></a>——整除及整除求余运算符的应用</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">,</span>ge<span class="token punctuation">,</span>shi<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入一个两位数："</span><span class="token punctuation">;</span>   cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  shi<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>  ge<span class="token operator">=</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>  n<span class="token operator">=</span>ge<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>shi<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第-12课-小写变大写"><a href="#第-12课-小写变大写" class="headerlink" title="第 12课 小写变大写"></a>第 12课 小写变大写</h3><h6 id="——ASCII码与字符型"><a href="#——ASCII码与字符型" class="headerlink" title="——ASCII码与字符型"></a>——ASCII码与字符型</h6><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span>  n<span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入a~z:"</span><span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  n<span class="token operator">=</span>n<span class="token number">-32</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小学生C++趣味编程》（上册））_第2单元</title>
      <link href="/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-2-dan-yuan/"/>
      <url>/2020/03/02/xiao-xue-sheng-c-qu-wei-bian-cheng-di-2-dan-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2单元-选择结构"><a href="#第-2单元-选择结构" class="headerlink" title="第 2单元 选择结构"></a>第 2单元 选择结构</h1><h3 id="第-13课-智商问题—if语句"><a href="#第-13课-智商问题—if语句" class="headerlink" title="第 13课 智商问题—if语句"></a>第 13课 智商问题—if语句</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int iq;   cout &lt;&lt; &quot;IQ:&quot;;                           cin&gt;&gt;iq;  if (iq&gt;140) cout &lt;&lt; &quot;天才&quot;;     return 0;}</code></pre><h3 id="第-14课跳绳达人—if-else语句"><a href="#第-14课跳绳达人—if-else语句" class="headerlink" title="第 14课跳绳达人—if-else语句"></a>第 14课跳绳达人—if-else语句</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int n;  cout &lt;&lt; &quot;请输入1分钟跳绳次数：&quot;;  cin&gt;&gt;n;  if (n&gt;=200)     cout &lt;&lt; &quot;跳绳达人!&quot;;  else    cout &lt;&lt; &quot;继续努力！&quot;;      return 0;}</code></pre><h3 id="第-15课比尔庄园—if语句嵌套"><a href="#第-15课比尔庄园—if语句嵌套" class="headerlink" title="第 15课比尔庄园—if语句嵌套"></a>第 15课比尔庄园—if语句嵌套</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){    const int USER=201701,PSW=135790;     int user,psw;    cout &lt;&lt; &quot;Username：&quot;;    cin&gt;&gt;user;    cout &lt;&lt; &quot;Password：&quot;;    cin&gt;&gt;psw;    if(user==USER)        if(psw==PSW)            cout &lt;&lt; &quot;Welcome, My Dear Friends!&quot;;        else            cout &lt;&lt; &quot;Wrong Password!&quot;;     else        cout &lt;&lt; &quot;Wrong Username!&quot; ;    return 0;}</code></pre><h3 id="第-16课-开灯关灯—逻辑变量"><a href="#第-16课-开灯关灯—逻辑变量" class="headerlink" title="第 16课 开灯关灯—逻辑变量"></a>第 16课 开灯关灯—逻辑变量</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){    bool light=false;    light=!light;//true    light=!light;//false    light=!light;//true    light=!light;//false    light=!light;//true    if(light)        cout &lt;&lt; &quot;light on&quot;;    else        cout &lt;&lt; &quot;light off&quot;;    return 0;     } </code></pre><h3 id="第-17课-欧耶欧耶—逻辑运算符"><a href="#第-17课-欧耶欧耶—逻辑运算符" class="headerlink" title="第 17课 欧耶欧耶—逻辑运算符"></a>第 17课 欧耶欧耶—逻辑运算符</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int n;  cout &lt;&lt; &quot;请输入一个整数：&quot;;  cin&gt;&gt;n;  if(n%3==0)    if(n%5==0) cout &lt;&lt; &quot;欧耶欧耶&quot; &lt;&lt; endl;  return 0;}</code></pre><h3 id="第-18课闰年与平年—逻辑运算符的优先级"><a href="#第-18课闰年与平年—逻辑运算符的优先级" class="headerlink" title="第 18课闰年与平年—逻辑运算符的优先级"></a>第 18课闰年与平年—逻辑运算符的优先级</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  bool flag;  int year;  cout &lt;&lt; &quot;请输入一个年份：&quot;;  cin&gt;&gt;year;  if((year%4==0&amp;&amp;year%100!=0)||year%400==0)    flag=true;  else    flag=false;  if(flag)                  cout &lt;&lt; year &lt;&lt; &quot;是闰年&quot; &lt;&lt; endl;  else    cout &lt;&lt; year &lt;&lt; &quot;是平年&quot; &lt;&lt; endl;  return 0;} </code></pre><h3 id="第-19课比大小—复合语句"><a href="#第-19课比大小—复合语句" class="headerlink" title="第 19课比大小—复合语句"></a>第 19课比大小—复合语句</h3><pre><code>/*#include&lt;iostream&gt;using namespace std;int main(){  int a,b,t;  cout &lt;&lt; &quot;a,b=&quot;;  cin&gt;&gt;a&gt;&gt;b;  if(a&lt;=b)    cout &lt;&lt; a &lt;&lt; &quot;  &quot; &lt;&lt; b &lt;&lt; endl;   else    cout &lt;&lt; b &lt;&lt; &quot;  &quot; &lt;&lt; a &lt;&lt; endl;  return 0;} */#include&lt;iostream&gt;using namespace std;int main(){    int a,b,t;    cout &lt;&lt; &quot;a,b= &quot;;    cin&gt;&gt;a&gt;&gt;b;    if(a&gt;b)    {        t=a;        a=b;        b=t;    }    cout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; endl;    return 0;}</code></pre><h3 id="第-20课孔融让梨—求-3个整数中最小值"><a href="#第-20课孔融让梨—求-3个整数中最小值" class="headerlink" title="第 20课孔融让梨—求 3个整数中最小值"></a>第 20课孔融让梨—求 3个整数中最小值</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int a,b,c,min;  cout &lt;&lt; &quot;a b c=&quot;;  cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;  if(a&lt;b)  min=a;  else  min=b;  if(c&lt;min)  min=c;  cout &lt;&lt; &quot;min=&quot; &lt;&lt; min &lt;&lt; endl;  return  0;}</code></pre><h3 id="第-21课田忌赛马—3个数排序"><a href="#第-21课田忌赛马—3个数排序" class="headerlink" title="第 21课田忌赛马—3个数排序"></a>第 21课田忌赛马—3个数排序</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  float a,b,c,temp;  cout &lt;&lt; &quot;a,b,c=&quot;;  cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;  if(a&gt;b)  {    temp=a;              a=b;      b=temp;  }  if(a&gt;c)  {      temp=a;      a=c;      c=temp;   }  if(b&gt;c)   {      temp=b;      b=c;      c=temp;   }  cout &lt;&lt; a &lt;&lt; &#39; &#39; &lt;&lt; b &lt;&lt; &#39; &#39; &lt;&lt; c &lt;&lt; endl;    //&#39; &#39;中间有一个空格  return  0;}</code></pre><h3 id="第-22课抽奖—随机函数-rand"><a href="#第-22课抽奖—随机函数-rand" class="headerlink" title="第 22课抽奖—随机函数 rand()"></a>第 22课抽奖—随机函数 rand()</h3><pre><code>#include&lt;iostream&gt;#include&lt;ctime&gt;      //需要调用time()函数 #include&lt;cstdlib&gt;    //需要调用srand()和rand()函数using namespace std;int main(){  int n,a;  cout &lt;&lt; &quot;抽奖程序&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;请输入1-5:&quot;;  cin&gt;&gt;n;  srand(time(0));  //随机种子  a=rand()%+1;  //随机产生1至5的整数  if(n==a)    cout &lt;&lt; &quot;恭喜您，中奖了！奖金10元&quot; &lt;&lt; endl;  else    cout &lt;&lt; &quot;没中奖，请付费2元&quot;  &lt;&lt; endl;  cout &lt;&lt; &quot;中奖号码是&quot; &lt;&lt; a &lt;&lt; endl;  return  0;} </code></pre><h3 id="第-23课打车费用—if语句的应用"><a href="#第-23课打车费用—if语句的应用" class="headerlink" title="第 23课打车费用—if语句的应用"></a>第 23课打车费用—if语句的应用</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int lucheng,shijian;  float feiyong=0;   cin&gt;&gt;lucheng;  if(lucheng&gt;10)    feiyong=6+(10-2)*1.8+(lucheng-10)*1.8*1.5;   else if(lucheng&gt;2) feiyong=6+(lucheng-2)*1.8;        else  feiyong=6;  cin&gt;&gt;shijian;  feiyong+=(shijian/3)*1;  cout &lt;&lt; feiyong &lt;&lt; endl;  }</code></pre><h3 id="第-24课体质指数-BMI—bug与-debug"><a href="#第-24课体质指数-BMI—bug与-debug" class="headerlink" title="第 24课体质指数 BMI—bug与 debug"></a>第 24课体质指数 BMI—bug与 debug</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  float height,weight,bmi;  cout &lt;&lt; &quot;身体(米)：&quot;;  cin&gt;&gt;height;  cout &lt;&lt; &quot;体重(公斤)：&quot;;  cin&gt;&gt;weight;  bmi=weight/(height*height);  if(bmi&lt;18.5)      cout &lt;&lt; &quot;偏瘦&quot;;  else if(bmi&lt;24)          cout &lt;&lt; &quot;正常&quot;;       else if(bmi&lt;28)               cout &lt;&lt; &quot;偏胖&quot;;            else if(bmi&lt;40)                    cout &lt;&lt; &quot;肥胖&quot;;                  else                     cout &lt;&lt; &quot;极重度肥胖&quot;;   return 0;}</code></pre><h3 id="第-25课成绩等级—switch语句"><a href="#第-25课成绩等级—switch语句" class="headerlink" title="第 25课成绩等级—switch语句"></a>第 25课成绩等级—switch语句</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int  n;  char score;  cout &lt;&lt; &quot;请输入分数：&quot;;  cin&gt;&gt;n;  if(n&gt;=90)  score=&#39;A&#39;;  else if(n&gt;=70) score=&#39;B&#39;;       else if(n&gt;=60) score=&#39;C&#39;;            else  score=&#39;D&#39;;  cout &lt;&lt; score;  return  0;} </code></pre><h3 id="第-26课王宅六味—switch语句的应用"><a href="#第-26课王宅六味—switch语句的应用" class="headerlink" title="第 26课王宅六味—switch语句的应用"></a>第 26课王宅六味—switch语句的应用</h3><pre><code>#include&lt;iostream&gt;using namespace std;int main(){  int n;  cout &lt;&lt; &quot;请输入编号：&quot;;  cin&gt;&gt;n;  switch(n)  {    case 1: cout &lt;&lt; &quot;寿仙菇&quot; &lt;&lt; endl;break;    case 2: cout &lt;&lt; &quot;酒糟芋&quot; &lt;&lt; endl;break;    case 3: cout &lt;&lt; &quot;下山笋&quot; &lt;&lt; endl;break;    case 4: cout &lt;&lt; &quot;太师豆腐&quot; &lt;&lt; endl;break;        case 5: cout &lt;&lt; &quot;孝子鱼&quot; &lt;&lt; endl;break;        case 6: cout &lt;&lt; &quot;猪全福&quot; &lt;&lt; endl;break;        default: cout &lt;&lt; &quot;无此编号的菜&quot; &lt;&lt; endl; break;      }  return 0;}</code></pre><h3 id="101-拓展阅读：冯·诺依曼"><a href="#101-拓展阅读：冯·诺依曼" class="headerlink" title="101 拓展阅读：冯·诺依曼"></a>101 拓展阅读：冯·诺依曼</h3>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读一流书之《The C++ Programming Language》(Fourth Edition)</title>
      <link href="/2020/03/01/du-yi-liu-shu-zhi-the-c-programming-language-fourth-edition/"/>
      <url>/2020/03/01/du-yi-liu-shu-zhi-the-c-programming-language-fourth-edition/</url>
      
        <content type="html"><![CDATA[<p>测试</p>]]></content>
      
      
      <categories>
          
          <category> 语言之阅读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《深入浅出程序设计竞赛》</title>
      <link href="/2020/03/01/shen-ru-qian-chu-cheng-xu-she-ji-jing-sai/"/>
      <url>/2020/03/01/shen-ru-qian-chu-cheng-xu-she-ji-jing-sai/</url>
      
        <content type="html"><![CDATA[<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><h2 id="第一章-简简单单写程序"><a href="#第一章-简简单单写程序" class="headerlink" title="第一章 简简单单写程序"></a>第一章 简简单单写程序</h2><h2 id="第二章-顺序结构程序设计"><a href="#第二章-顺序结构程序设计" class="headerlink" title="第二章 顺序结构程序设计"></a>第二章 顺序结构程序设计</h2><h2 id="第三章-分支结构程序设计"><a href="#第三章-分支结构程序设计" class="headerlink" title="第三章 分支结构程序设计"></a>第三章 分支结构程序设计</h2><h2 id="第四章-循环结构程序设计"><a href="#第四章-循环结构程序设计" class="headerlink" title="第四章 循环结构程序设计"></a>第四章 循环结构程序设计</h2><h2 id="第五章-数组与数据批量存储"><a href="#第五章-数组与数据批量存储" class="headerlink" title="第五章 数组与数据批量存储"></a>第五章 数组与数据批量存储</h2><h2 id="第六章-字符串与文件操作"><a href="#第六章-字符串与文件操作" class="headerlink" title="第六章 字符串与文件操作"></a>第六章 字符串与文件操作</h2><h2 id="第七章-函数与结构体"><a href="#第七章-函数与结构体" class="headerlink" title="第七章 函数与结构体"></a>第七章 函数与结构体</h2><p>开始简单介绍了数学运算，常量变量；然后就到了语法结构，无外乎顺序、分支和循环三种；数据多了要用数组来处理；然后要处理一下简单的字符串以及整体的文件；最后就到了一个一个功能的函数与结构体。</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>生活中的实用C++</title>
      <link href="/2020/03/01/sheng-huo-zhong-de-shi-yong-c/"/>
      <url>/2020/03/01/sheng-huo-zhong-de-shi-yong-c/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活中的实用Python（一）</title>
      <link href="/2020/03/01/sheng-huo-zhong-de-shi-yong-python-yi/"/>
      <url>/2020/03/01/sheng-huo-zhong-de-shi-yong-python-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="做一个软件-恋爱纪念日"><a href="#做一个软件-恋爱纪念日" class="headerlink" title="做一个软件-恋爱纪念日"></a>做一个软件-恋爱纪念日</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token punctuation">,</span> timeturtle<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"恋爱纪念日"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawGap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#绘制数码管间隔</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawLine</span><span class="token punctuation">(</span>draw<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#绘制单段数码管</span>    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> draw <span class="token keyword">else</span> turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>    drawGap<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawDigit</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#根据数字绘制七段数码管</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    drawLine<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> d <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token keyword">else</span> drawLine<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">drawDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> date<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'年'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"green"</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'月'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>            turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'日'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            drawDigit<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">all</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'总共'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> day<span class="token punctuation">:</span>        drawDigit<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'天'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">)</span><span class="token punctuation">:</span>    t<span class="token operator">=</span>t1<span class="token operator">*</span><span class="token number">365</span>    <span class="token keyword">if</span> t2 <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span>t2<span class="token operator">*</span><span class="token number">30</span>    <span class="token keyword">if</span> t2 <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        t<span class="token operator">=</span>t<span class="token operator">+</span><span class="token number">91</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">122</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">152</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">183</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">213</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">8</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">244</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">275</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">303</span>    <span class="token keyword">if</span> t2<span class="token operator">==</span><span class="token number">11</span><span class="token punctuation">:</span>        t<span class="token operator">+=</span><span class="token number">334</span>    t<span class="token operator">+=</span>t3    <span class="token keyword">return</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">370</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'今天是：'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    drawDate<span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m=%d+'</span><span class="token punctuation">,</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'大钧和琦悦在一起：'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    drawDate<span class="token punctuation">(</span><span class="token string">'2019-11=3+'</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'我们一起度过了：'</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    text<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">350</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#    drawDate('2019-10=10+')</span>    t1<span class="token operator">=</span>time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span>    t2<span class="token operator">=</span>t1<span class="token punctuation">.</span>tm_year<span class="token number">-2019</span>    t3<span class="token operator">=</span>t1<span class="token punctuation">.</span>tm_mon<span class="token number">-11</span>    <span class="token keyword">if</span> t3<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>        t2<span class="token operator">-=</span><span class="token number">1</span>        t3<span class="token operator">+=</span><span class="token number">12</span>    t4<span class="token operator">=</span>t1<span class="token punctuation">.</span>tm_mday<span class="token number">-3</span>    <span class="token keyword">if</span> t4<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>        t3<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">if</span> t1<span class="token punctuation">.</span>tm_mon<span class="token number">-1</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            t4<span class="token operator">+=</span><span class="token number">31</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            t4<span class="token operator">+=</span><span class="token number">30</span>    total<span class="token operator">=</span>count<span class="token punctuation">(</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">,</span>t4<span class="token punctuation">)</span>    drawDate<span class="token punctuation">(</span>str<span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>t4<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'+'</span><span class="token punctuation">)</span>    all<span class="token punctuation">(</span>total<span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-在命令行用pip安装-pyinstaller包"><a href="#1-在命令行用pip安装-pyinstaller包" class="headerlink" title="1. 在命令行用pip安装 pyinstaller包"></a>1. 在命令行用pip安装 pyinstaller包</h2><pre class="line-numbers language-python"><code class="language-python">pip install pyinstaller<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-下载安装pyinstaler运行时所需要的windows扩展pywin32"><a href="#2-下载安装pyinstaler运行时所需要的windows扩展pywin32" class="headerlink" title="2.下载安装pyinstaler运行时所需要的windows扩展pywin32"></a>2.下载安装pyinstaler运行时所需要的windows扩展pywin32</h2><p><a href="https://github.com/mhammond/pywin32/releases" target="_blank" rel="noopener">mhammond/pywin32</a></p><p>选择最新版的下载，<strong>注意要选择对应的python版本(version)和python位数(bittedness)</strong></p><p>通过在命令行输入python查看python版本和位数</p><p>如下所示为python3.7的64位，需要下载<a href="https://github.com/mhammond/pywin32/releases/download/b227/pywin32-227.win32-py3.7.exe" target="_blank" rel="noopener">pywin32-227.win32-py3.7.exe</a></p><pre class="line-numbers language-text"><code class="language-text">Python 3.7.3 ... [MSC v.1900 64 bit (AMD64)] on win32<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-在命令行中直接输入下面的指令即可"><a href="#3-在命令行中直接输入下面的指令即可" class="headerlink" title="3.在命令行中直接输入下面的指令即可"></a>3.在命令行中直接输入下面的指令即可</h2><pre class="line-numbers language-python"><code class="language-python">pyinstaller <span class="token punctuation">[</span>opts<span class="token punctuation">]</span> yourprogram<span class="token punctuation">.</span>py <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数opts含义</p><p>-D –onedir 创建一个目录，包含exe文件，但会依赖很多文件（默认）</p><p>-c –console, –nowindowed 使用控制台，无界面(默认)</p><p>-F 指定打包后只生成一个exe格式的文件(必备)</p><p>-w –windowed, –noconsole 使用窗口，无控制台</p><p>-p 添加搜索路径，让其找到对应的库。</p><p>-i 改变生成程序的icon图标 </p><p>准备好图片，打开制作ico的网站<a href="http://www.bitbug.net/" target="_blank" rel="noopener">ico</a></p><h2 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h2><ul><li>比如你有个python程序叫test.py，绝对路径在[D:\project]，一行命令，软件做好</li></ul><pre class="line-numbers language-text"><code class="language-text">pyinstaller -F D:\project\test.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果希望更换程序图标</li></ul><pre class="line-numbers language-python"><code class="language-python">pyinstaller <span class="token operator">-</span>F <span class="token operator">-</span>w <span class="token operator">-</span>i       D<span class="token punctuation">:</span>\project\test<span class="token punctuation">.</span>ico        D<span class="token punctuation">:</span>\project\test<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><p>然后就会生成<strong>build</strong>和<strong>dist</strong>文件夹，如果是选择了-F参数，那么dist文件夹下就是你要的程序，<del>build文件夹可以删除</del></p><p><strong>注意</strong>，路径用英文，不要中文。</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活中的实用Scratch</title>
      <link href="/2020/03/01/sheng-huo-zhong-de-shi-yong-scratch/"/>
      <url>/2020/03/01/sheng-huo-zhong-de-shi-yong-scratch/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scratch,Python,C++里的数学奥妙</title>
      <link href="/2020/03/01/scratch-python-c-li-de-shu-xue-ao-miao/"/>
      <url>/2020/03/01/scratch-python-c-li-de-shu-xue-ao-miao/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷新手村</title>
      <link href="/2020/03/01/luo-gu-xin-shou-cun/"/>
      <url>/2020/03/01/luo-gu-xin-shou-cun/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Scratch,Python,C++串联</title>
      <link href="/2020/03/01/scratch-python-c-chuan-lian/"/>
      <url>/2020/03/01/scratch-python-c-chuan-lian/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scratch打怪升级之高级</title>
      <link href="/2020/03/01/scratch-da-guai-sheng-ji-zhi-gao-ji/"/>
      <url>/2020/03/01/scratch-da-guai-sheng-ji-zhi-gao-ji/</url>
      
        <content type="html"><![CDATA[<p>面向过程编程的程序设计方法：消息的广播和接收、分治法、自顶向下、自底向上</p><p>变量</p><p>字符比较、字符串处理</p><p>列表：动态列表、数字列表</p><p>算法：线性搜索、冒泡排序</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scratch打怪升级之中级</title>
      <link href="/2020/03/01/scratch-da-guai-sheng-ji-zhi-zhong-ji/"/>
      <url>/2020/03/01/scratch-da-guai-sheng-ji-zhi-zhong-ji/</url>
      
        <content type="html"><![CDATA[<p>中级任务：认识认识算数运算符、函数、变量、坐标</p><p>比较运算符：比较、逻辑</p><p>程序结构：顺序、分支、循环</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scratch打怪升级之初级</title>
      <link href="/2020/03/01/scratch-da-guai-sheng-ji-zhi-chu-ji/"/>
      <url>/2020/03/01/scratch-da-guai-sheng-ji-zhi-chu-ji/</url>
      
        <content type="html"><![CDATA[<p>初级任务：认识Scratch3.0软件的各个部分，能够制作简单的动画和游戏</p><p>代码标签页、造型标签页、声音标签页、背景标签页</p><p>舞台区、角色区、积木区、代码区</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程百例</title>
      <link href="/2020/03/01/c-bian-cheng-bai-li/"/>
      <url>/2020/03/01/c-bian-cheng-bai-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程百例</title>
      <link href="/2020/03/01/python-bian-cheng-bai-li/"/>
      <url>/2020/03/01/python-bian-cheng-bai-li/</url>
      
        <content type="html"><![CDATA[<p>无</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Scratch只要两大步就画好正方形的方法，你确定不来试试吗？</title>
      <link href="/2020/03/01/scratch-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/"/>
      <url>/2020/03/01/scratch-zhi-yao-liang-da-bu-jiu-hua-hao-zheng-fang-xing-de-fang-fa-ni-que-ding-bu-lai-shi-shi-ma/</url>
      
        <content type="html"><![CDATA[<p><img src="http://q6lsd5k7n.bkt.clouddn.com/scratch%E7%94%BB%E5%9B%BE40%E5%85%B3.jpg" alt="开始闯关吧!"></p><p>先来看看Figura 1，正方形。先自顶向下分析一遍，正方形的四个角都是90°，那就是四个角加四条边。</p><p>准备好了以后就开始拿笔画，擦干净黑板，提笔和落笔都算做一种工作。</p><p>那就可以分为两步，一步是“初始化”，另外一步是“画正方形”。那么我们就可以找到更多积木，先从语义上确定好两个步骤。</p><h3 id="【材料】"><a href="#【材料】" class="headerlink" title="【材料】"></a>【材料】</h3><p><strong>“画笔”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E7%94%BB%E7%AC%94.png" alt></p><p><strong>“白板”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E7%99%BD%E6%9D%BF.png" alt></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h3 id="【准备工作】"><a href="#【准备工作】" class="headerlink" title="【准备工作】"></a>【准备工作】<img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C.png" alt></h3><p><strong>“擦干净白板”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E6%93%A6%E5%B9%B2%E5%87%80%E7%99%BD%E6%9D%BF.png" alt></p><p><strong>“抬笔”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E6%8A%AC%E7%AC%94.png" alt></p><p><strong>“移到开始的位置”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E7%A7%BB%E5%88%B0%E5%BC%80%E5%A7%8B%E7%9A%84%E4%BD%8D%E7%BD%AE.png" alt></p><p><strong>“转90度”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%B7%A6%E8%BD%AC90%E5%BA%A6.png" alt></p><p><strong>“落笔”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E8%90%BD%E7%AC%94.png" alt></p><p><strong>“准备工作连起来”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%E8%BF%9E%E8%B5%B7%E6%9D%A5.png" alt></p><h3 id="【画正方形】"><a href="#【画正方形】" class="headerlink" title="【画正方形】"></a>【画正方形】<img src="http://q6lsd5k7n.bkt.clouddn.com/%E7%94%BB%E6%AD%A3%E6%96%B9%E5%BD%A2.png" alt></h3><p><strong>“往前移动300步”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%BE%80%E5%89%8D%E7%A7%BB%E5%8A%A8300%E6%AD%A5.png" alt></p><p><strong>“左转90度”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%B7%A6%E8%BD%AC90%E5%BA%A6.png" alt></p><p><strong>“往前移动300步”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%BE%80%E5%89%8D%E7%A7%BB%E5%8A%A8300%E6%AD%A5.png" alt></p><p><strong>“左转90度”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%B7%A6%E8%BD%AC90%E5%BA%A6.png" alt></p><p><strong>“往前移动300步”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%BE%80%E5%89%8D%E7%A7%BB%E5%8A%A8300%E6%AD%A5.png" alt></p><p><strong>“左转90度”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%B7%A6%E8%BD%AC90%E5%BA%A6.png" alt></p><p><strong>“往前移动300步”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%BE%80%E5%89%8D%E7%A7%BB%E5%8A%A8300%E6%AD%A5.png" alt></p><p><strong>“左转90度”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E5%B7%A6%E8%BD%AC90%E5%BA%A6.png" alt></p><p><strong>“画正方形连起来”</strong><img src="http://q6lsd5k7n.bkt.clouddn.com/%E6%AD%A3%E6%96%B9%E5%BD%A2%E8%BF%9E%E8%B5%B7%E6%9D%A5.png" alt></p><h1 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图<img src="http://q6lsd5k7n.bkt.clouddn.com/%E8%A1%A8%E6%BC%94.png" alt></h1><h3 id="【画图成功】"><a href="#【画图成功】" class="headerlink" title="【画图成功】"></a>【画图成功】<img src="http://q6lsd5k7n.bkt.clouddn.com/%E8%A1%A8%E6%BC%94%E6%88%90%E5%8A%9F.png" alt></h3><p><img src="http://q6lsd5k7n.bkt.clouddn.com/%E6%80%BB.png" alt></p><p><strong>谢谢收看！撒花！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之GoC画图系列一</title>
      <link href="/2020/03/01/c-zhi-goc-hua-tu-xi-lie-yi/"/>
      <url>/2020/03/01/c-zhi-goc-hua-tu-xi-lie-yi/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之Turtle画图系列一</title>
      <link href="/2020/03/01/python-zhi-turtle-hua-tu-xi-lie-yi/"/>
      <url>/2020/03/01/python-zhi-turtle-hua-tu-xi-lie-yi/</url>
      
        <content type="html"><![CDATA[<p>1</p>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机科学速成课</title>
      <link href="/2020/03/01/ji-suan-ji-ke-xue-su-cheng-ke/"/>
      <url>/2020/03/01/ji-suan-ji-ke-xue-su-cheng-ke/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2091656333,1578141615&fm=15&gp=0.jpg" alt="img"></p><p><a href="https://www.bilibili.com/video/av21376839/?redirectFrom=h5" target="_blank" rel="noopener">https://www.bilibili.com/video/av21376839/?redirectFrom=h5</a></p><h2 id="第-1-集：计算机早期历史"><a href="#第-1-集：计算机早期历史" class="headerlink" title="第 1 集：计算机早期历史"></a>第 1 集：计算机早期历史</h2><p>提到的设备：算盘 → 步进计算器 → 差分机 → 分析机 → 打孔卡片制表机<br>提到的人名：Charles Babbage, Ada Lovelace</p><p>02:27 最早的计算设备是算盘，举例如何使用<br>04:31 Computer 从指代职业变成指代机器<br>04:57 机器里有名的是：步进计算器。第一个可以做加减乘除的机器<br>06:44 炮弹为了精准，要计算弹道，二战是查表来做。但每次改设计了就需要做一张新表<br>07:30 Charles Babbage 提出了 “差分机”, 在构造差分机期间，想出了分析机, 分析机是通用计算机<br>08:50 Lovelace 给分析机写了假想程序，因此成为了第一位程序员<br>09:25 人口普查 10 年一次. Herman Hollerith 的打孔卡片制表机大大提升了效率</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332470&idx=1&sn=81c3a54311c9cc9824127cbe64a9942e&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-2-集：电子计算机"><a href="#第-2-集：电子计算机" class="headerlink" title="第 2 集：电子计算机"></a>第 2 集：电子计算机</h2><p>提到的设备：继电器 → 真空管 → 晶体管</p><p>00:17 20世纪的发展要求更强的计算能力。柜子大小的计算机发展到房间大小<br>01:06 哈佛 Mark 1 号，IBM 1944 年做的<br>02:25 继电器，继电器一秒最多 50 次开关<br>03:24 继电器出 bug<br>03:49 1904 年，热电子管出现，第一个真空管。改进后变成和继电器的功能一样<br>05:34 “巨人1号” 计算机在英国 布莱切利园 首次大规模使用真空管。但编程麻烦，还要配置<br>06:40 1946 年，宾夕法尼亚大学的 ENIAC 是第一个通用可编程计算机<br>07:36 1947 年，贝尔实验室做出了晶体管，晶体管有诸多好处，IBM 很快全面转向晶体管<br>09:27 硅谷的典故：很多晶体管和半导体的开发都是这里做的。而生产半导体最常见的材料是硅<br>09:41 肖克利半导体 → 仙童半导体 → 英特尔</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332483&idx=1&sn=81b8c41e6aed65f3e1cf162ac43a4eb5&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-3-集：布尔逻辑和逻辑门"><a href="#第-3-集：布尔逻辑和逻辑门" class="headerlink" title="第 3 集：布尔逻辑和逻辑门"></a>第 3 集：布尔逻辑和逻辑门</h2><p>01:00 什么是二进制, 为什么用二进制, 布尔逻辑<br>02:46 3个基本操作：NOT，AND，OR<br>02:51 解释3个基本操作<br>07:11 XOR 异或</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332495&idx=1&sn=e8158a0af256d87941faf64a2046f8fd&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-4-集：二进制"><a href="#第-4-集：二进制" class="headerlink" title="第 4 集：二进制"></a>第 4 集：二进制</h2><p>00:46 用十进制举例二进制的原理，演示二进制加法。存储单位 MB GB TB 等<br>05:30 正数，负数，整数，浮点数的表示<br>07:20 美国信息交换标准代码 - ASCII, 用来表示字符<br>09:00 UNICODE 1992 年诞生，是字符编码标准， 解决 ASCII 不够表达所有语言的问题</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332499&idx=1&sn=50d16e626d3105f923ed35e066b0957a&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-5-集：算数逻辑单元-ALU"><a href="#第-5-集：算数逻辑单元-ALU" class="headerlink" title="第 5 集：算数逻辑单元 - ALU"></a>第 5 集：算数逻辑单元 - ALU</h2><p>00:03 简单介绍 ALU ，英特尔 74181<br>01:24 ALU 有 2 个单元，1 个算术单元和 1 个逻辑单元</p><p>01:32 算术单元<br>半加器 (处理1个 bit，2个输入)<br>全加器 (处理1个 bit，3个输入)<br>8 bit 加法 (1个半加器，7个全加器）<br>溢出的概念，吃豆人的例子<br>乘法除法</p><p>07:32 逻辑单元<br>检测数字是否为 0 的电路（一堆 OR 门最后加个 NOT 门）<br>ALU 抽象成一个 V 符号<br>Flag 标志（是否相等，是否小于，是否溢出等等）</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332508&idx=1&sn=468c6039ec2024a1912cea410c6a242a&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-6-集：寄存器和内存"><a href="#第-6-集：寄存器和内存" class="headerlink" title="第 6 集：寄存器和内存"></a>第 6 集：寄存器和内存</h2><p>本集重点是 Memory （存储 / 内存 两种含义）</p><p>03:30 存 1 位 (Gated Latch - 锁存器）<br>04:48 存 8 位 (Register - 寄存器)</p><p>05:46 16x16 的矩阵存 256 位<br>数据选择器/多路复用器 (Multiplexer) 解码 8 位地址，定位到单个锁存器</p><p>07:38 4 位代表行， 4 位代表列</p><p>08:16 组合 256 位内存 + 多路复用器<br>09:01 可寻址的 256 字节 内存<br>一条1980年代的内存，1M 大小</p><p>10:14 8个模块，每个模块有32个小方块，<br>每个小方块有 4 个小块，每个小块是 128 位 x 64 位</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332546&idx=1&sn=04731d656e147fcf28a86aefca6fc783&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-7-集：中央处理器（CPU"><a href="#第-7-集：中央处理器（CPU" class="headerlink" title="第 7 集：中央处理器（CPU)"></a>第 7 集：中央处理器（CPU)</h2><p>重点</p><ol><li>拼个 CPU 出来</li><li>CPU 怎么执行命令</li></ol><p>01:00 RAM + 寄存器 + ALU 做个 CPU<br>04:00 解释 “取指令→解释→执行” 这个循环<br>08:00 时钟是什么, 时钟速度和赫兹<br>10:00 超频提升性能, 降频省电</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332548&idx=1&sn=cee51da6b285df82093a5b3f0f85e52e&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-8-集：指令和程序"><a href="#第-8-集：指令和程序" class="headerlink" title="第 8 集：指令和程序"></a>第 8 集：指令和程序</h2><p>本集重点：一步步带你运行一遍程序</p><p>00:45 回顾上集的例子程序，一步步讲解。介绍”指令集”的概念<br>LOAD_A，LOAD_B，SUB，JUMP，ADD，HALT 等指令<br>05:16 带条件跳转，JUMP NEGATIVE 是负数才跳转，还有其他类型的 JUMP<br>08:00 真正现代 CPU 用更多指令集。位数更长。<br>09:07 1971年的英特尔 4004 处理器，有 46 个指令<br>09:36 如今英特尔酷睿 i7, 有上千条指令</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332550&idx=1&sn=95ca6367fd33be3345872ed05f5f09a8&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-9-集：高级-CPU-设计"><a href="#第-9-集：高级-CPU-设计" class="headerlink" title="第 9 集：高级 CPU 设计"></a>第 9 集：高级 CPU 设计</h2><p>00:24 早期是加快晶体管切换速度，来提升 CPU 速度<br>01:20 给 CPU 专门的除法电路 + 其他电路来做复杂操作，比如游戏，视频解码<br>02:28 给 CPU 加缓存，提高数据存取速度，更快喂给 CPU，用计算餐馆销售额举例<br>05:13 脏位 - Dirty bit<br>05:33 流水线设计，用 1 个洗衣机和 1 个干燥机举例<br>06:01 并行处理 - parallelize<br>07:33 乱序执行 - out-of-order execution<br>08:21 推测执行 - speculative execution<br>08:50 分支预测 - branch prediction<br>09:34 多个 ALU<br>09:54 多核 (Core)<br>10:11 多个独立 CPU<br>10:52 超级计算机，中国的”神威 太湖之光”</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=1&sn=45df22c5b11c5855ae8422b774810310&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-10-集：早期的编程方式"><a href="#第-10-集：早期的编程方式" class="headerlink" title="第 10 集：早期的编程方式"></a>第 10 集：早期的编程方式</h2><p>本集重点：早期计算机如何编程<br>打孔纸卡 → 插线板 → 面板拨开关</p><p>00:00 开头说本集重点：程序如何进入计算机<br>00:53 拿纺织业举例，给机器编程的需求远在计算机出现前就有了<br>01:41 打孔纸卡 - Punched card<br>02:36 插线板 - Plugboard<br>04:20 冯诺依曼架构 - Von Neumann Architecture<br>07:00 面板编程 - Panel programming<br>07:29 第一款取得商业成功的家用计算机: Altair 8800<br>08:15 编程依然很困难，人们需要更友好更简单的方式编程<br>08:44 下周主题：编程语言</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=2&sn=500b9c261b5ab97a86f336363acb4311&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-11-集：编程语言发展史"><a href="#第-11-集：编程语言发展史" class="headerlink" title="第 11 集：编程语言发展史"></a>第 11 集：编程语言发展史</h2><p>编程：二进制 → 助记符（汇编器）→ A-0（编译器）→ FORTRAIN</p><p>01:45 二进制写程序，先纸上写伪代码，手工转二进制，很快就烦了<br>02:28 用 “助记符” 写代码（LOAD_A 14）为了把助记符转二进制，汇编器诞生 (Assembler)<br>04:32 葛丽丝·霍普 (Grace Hopper) - 哈佛1号计算机首批程序员, 海军军官<br>05:13 Grace 设计了编程语言 A-0<br>05:29 Grace 1952 年做了第一个编译器 (Compiler)，实现 A-0<br>06:29 变量 (Variables)<br>07:01 FORTRAN<br>08:18 COBOL<br>09:25 新语言<br>1960 年代：ALGOL，LISP，BASIC<br>1970 年代：Pascal，C，Smalltalk<br>1980 年代：C++，Objective-C，Perl<br>1990 年代：Python，Ruby，Java</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=3&sn=2cf6960ed1e3509cf924d0bb0238b554&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-12-集：编程基础-语句和函数"><a href="#第-12-集：编程基础-语句和函数" class="headerlink" title="第 12 集：编程基础 - 语句和函数"></a>第 12 集：编程基础 - 语句和函数</h2><p>00:50 变量, 赋值语句<br>02:08 Grace Hopper 拍虫子游戏<br>02:52 if 判断<br>04:19 while 循环<br>05:48 for 循环<br>07:00 函数<br>11:11 下集介绍算法</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=4&sn=65357a1f0d58662fd065a2d557939e5f&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-13-集：算法入门"><a href="#第-13-集：算法入门" class="headerlink" title="第 13 集：算法入门"></a>第 13 集：算法入门</h2><p>03:00 选择排序 - Selection sort<br>03:52 大 O 表示法 - Big O notation<br>04:31 归并排序 - Merge sort<br>08:03 Dijkstra 算法</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=5&sn=7ef80af31708f62b0b436e9550510f09&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-14-集：数据结构"><a href="#第-14-集：数据结构" class="headerlink" title="第 14 集：数据结构"></a>第 14 集：数据结构</h2><p>00:39 数组 - Array<br>02:06 字符串 - String<br>03:12 矩阵 - Matrix<br>04:05 结构体 - Struct<br>04:46 指针 - Pointer<br>04:44 节点 - Node<br>04:53 链表 - Linked List<br>06:21 队列 - Queue<br>06:21 栈 - Stack<br>07:31 树 - Tree<br>08:01 二叉树 - Binary Tree<br>08:26 图 - Graph<br>08:50 没时间讲红黑树和堆, 不同数据结构适用不同场景</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=6&sn=5092a9435c9533cffd67e06e1ce5da52&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-15-集：阿兰·图灵"><a href="#第-15-集：阿兰·图灵" class="headerlink" title="第 15 集：阿兰·图灵"></a>第 15 集：阿兰·图灵</h2><p>00:33 介绍图灵<br>00:52 可判定性问题<br>01:14 阿隆佐·丘奇，Lambda 算子<br>01:38 图灵机<br>04:54 停机问题<br>08:09 破解德军英格玛加密机<br>10:40 图灵测试<br>11:18 图灵的个人生活<br>12:07 图灵奖</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=7&sn=e9515c7da4f57ac35ea7fa300b239268&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-16-集：软件工程"><a href="#第-16-集：软件工程" class="headerlink" title="第 16 集：软件工程"></a>第 16 集：软件工程</h2><p>01:31 对象 Object<br>02:39 面向对象编程 Object Oriented Programming.<br>03:55 API Application Programming Interface<br>04:33 public, private<br>05:36 集成开发环境, IDE - Integrated Development Environments<br>06:09 调试 debugging<br>06:31 文档和注释 - readme, comment<br>07:33 版本控制 Version control<br>08:50 质量控制 Quality Assurance testing，QA<br>09:21 Beta, Alpha</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332551&idx=8&sn=923cba8109aa2a1eb05c234a21c8fe2c&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-17-集：集成电路与摩尔定律"><a href="#第-17-集：集成电路与摩尔定律" class="headerlink" title="第 17 集：集成电路与摩尔定律"></a>第 17 集：集成电路与摩尔定律</h2><p>本集重点：晶圆的制作流程：光刻 (04:21~07:42)</p><p>00:51 分立元件 Discrete components<br>01:09 数字暴政 Tyranny of Numbers - 是 1960 年代工程师碰到的问题<br>意思是如果想加强电脑性能，就要更多部件，这导致更多线路，更复杂。所以很难做<br>04:21 光刻 Photolithography<br>04:26 晶圆 Wafer<br>04:57 光刻胶 Photoresist<br>05:08 光掩膜 Photomask<br>06:00 掺杂 Doping<br>09:09 摩尔定律 Moore’s Law.<br>09:38 英特尔 Intel<br>10:20 晶体管数量大幅度增长, 1980年三万个，1990年一百万个，2000年三千万个，2010年十亿个<br>11:44 进一步小型化会碰到 2 个问题 1. 光的波长不足以制作更精细的设计 2. 量子隧穿效应</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=1&sn=a24c3b6816a7e3086a588b2e76ba7d0d&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-18-集：操作系统"><a href="#第-18-集：操作系统" class="headerlink" title="第 18 集：操作系统"></a>第 18 集：操作系统</h2><p>00:48 操作系统 Operating systems<br>01:34 批处理 Batch processing<br>01:58 计算机变便宜变多，有不同配置，写程序处理不同硬件细节很痛苦，因此操作系统负责抽象硬件<br>02:12 外部设备 Peripherals<br>02:48 设备驱动程序 Device drivers<br>04:43 多任务处理 Multitasking<br>05:54 虚拟内存 Virtual Memory<br>07:09 动态内存分配 Dynamic memory allocation<br>07:31 内存保护 Memory Protection<br>07:54 1970年代，计算机足够便宜，大学买了让学生用，多个学生用多个 “终端” 连接到主机<br>08:29 多用户分时操作系统，Multics<br>09:32 Unix<br>11:02 MS-DOS<br>12:09 下集是内存&amp;存储介质</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=2&sn=0534a2703dc2d70dd81b11e2ef58a721&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-19-集：内存-amp-储存介质"><a href="#第-19-集：内存-amp-储存介质" class="headerlink" title="第 19 集：内存&amp;储存介质"></a>第 19 集：内存&amp;储存介质</h2><p>本集重点：存储技术的发展</p><p>01:01 纸卡 Paper punch cards<br>02:01 延迟线存储器 Delay Line Memory<br>04:06 磁芯 Magnetic Core Memory<br>06:08 磁带 Magnetic Tape<br>07:08 磁鼓 Magnetic Drum Memory<br>07:43 硬盘 Hard Disk Drives<br>08:53 内存层次结构 Memory Hierarchy<br>09:36 软盘 Floppy Disk<br>10:09 光盘 Compact Disk<br>10:51 固态硬盘 Solid State Drives</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=3&sn=84dd99e5986fbdd69fc29dd8dd382cdc&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-20-集：文件系统"><a href="#第-20-集：文件系统" class="headerlink" title="第 20 集：文件系统"></a>第 20 集：文件系统</h2><p>00:47 文件格式：可以随便存文件数据，但按格式存会更方便<br>01:00 TXT 文本文件：ASCII<br>01:31 WAV 音频文件：每秒上千次的音频采样数字<br>02:47 BMP 图片文件：像素的红绿蓝 RGB 值<br>04:43 文件系统：很早期时空间小，整个存储器就像一整个文件。后来随容量增长，多文件非常必要<br>05:37 目录文件：用来解决多文件问题，存其他文件的信息，比如开头，结尾，创建时间等</p><p>06:39 平面文件系统 - Flat File System：文件都在同一个层次，早期空间小，只有十几个文件，平面系统够用</p><p>06:57 如果文件紧密的一个个前后排序会造成问题，所以文件系统会：1. 把空间划分成一块块 2. 文件拆分存在多个块里</p><p>08:30 文件的增删改查会不可避免的造成文件散落在各个块里，<br>如果是磁带这样的存储介质就会造成问题，所以做碎片整理</p><p>09:46 分层文件系统 - Hierarchical File System：有不同文件夹，文件夹可以层层嵌套</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=4&sn=c1aae0a42beba1e06dbaac6fd6298727&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-21-集：压缩"><a href="#第-21-集：压缩" class="headerlink" title="第 21 集：压缩"></a>第 21 集：压缩</h2><p>00:26 压缩的好处是能存更多文件，传输也更快<br>01:52 游程编码 Run-Length Encoding<br>02:45 无损压缩 Lossless compression<br>03:55 霍夫曼树 Huffman Tree<br>05:56 “消除冗余”和”用更紧凑的表示方法”，这两种方法通常会组合使用<br>06:07 字典编码 Dictionary coders, 游程编码 和 字典编码 都是无损压缩<br>08:03 感知编码 Perceptual coding<br>08:09 有损压缩 jpeg 格式<br>09:39 时间冗余 Temporal redundancy<br>10:30 MPEG-4 视频编码</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=5&sn=15db85347ba7350267398c6d808556d6&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-22-集：命令行界面"><a href="#第-22-集：命令行界面" class="headerlink" title="第 22 集：命令行界面"></a>第 22 集：命令行界面</h2><p>本集重点：计算机早期同时输入程序和数据（用纸卡/纸带）<br>运行开始直到结束，中间没有人类进行操作，<br>原因是计算机很贵，不能等人类慢慢输入，执行完结果打印到纸上 (02:34)</p><p>到1950年代，计算机足够便宜+快，人类和计算机交互式操作变得可行<br>为了让人类输入到计算机，改造之前就有的打字机，变成电传打字机 (02:44~05:38)</p><p>到1970年代末，屏幕成本足够低，屏幕代替电传打字机，屏幕成为标配 (07:24)</p><p>00:32 人机交互 Human-Computer Interaction<br>00:50 早期输出数据是打印到纸上，而输入是用纸卡/纸带一次性把程序和数据都给进去<br>03:00 QWERTY 打字机的发展，克里斯托弗·莱瑟姆·肖尔斯 发明于 1868 年<br>05:38 电传打字机 Teletype machine<br>06:32 命令行界面 Command line interface<br>06:38 ls 命令<br>08:22 早期文字游戏 Zork (1977年)<br>08:47 cd 命令</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=6&sn=f28a991af18239819e366685132db3ae&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-23-集：屏幕与-2D-图形显示"><a href="#第-23-集：屏幕与-2D-图形显示" class="headerlink" title="第 23 集：屏幕与 2D 图形显示"></a>第 23 集：屏幕与 2D 图形显示</h2><p>00:05 PDP-1 计算机。键盘和显示器分开，屏幕显示临时值<br>01:14 阴极射线管 Cathode Ray Tube (CRT)<br>01:38 CRT 有两种绘图方式：<br>矢量扫描 Vector Scanning<br>光栅扫描 Raster Scanning</p><p>02:14 液晶显示器 Liquid Crystal Displays (LCD)，像素 (Pixel)<br>03:32 字符生成器 Character generator<br>03:45 屏幕缓冲区 Screen buffer<br>05:09 矢量命令画图<br>06:34 Sketchpad, 光笔 (Light pen)<br>09:00 函数画线，矩形</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=7&sn=6bf33eb1a6ad59844ab3a83abf8ad209&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-24-集：冷战和消费主义"><a href="#第-24-集：冷战和消费主义" class="headerlink" title="第 24 集：冷战和消费主义"></a>第 24 集：冷战和消费主义</h2><p>本集重点：冷战导致美国往计算机领域投入大量资源 (00:00~01:43)</p><p>范内瓦·布什 预见了计算机的潜力，提出假想机器 Memex<br>帮助建立 国家科学基金会，给科学研究提供资金 (01:43~03:43)</p><p>1950 年代消费者开始买晶体管设备，收音机大卖<br>日本取得晶体管授权后，索尼做了晶体管收音机，为日本半导体行业崛起埋下种子 (03:43~04:29）</p><p>苏联 1961 年把宇航员加加林送上太空，导致美国提出登月<br>NASA 预算大大增加，用集成电路来制作登月计算机 (04:29~06:27)</p><p>集成电路的发展实际上是由军事应用大大推进的，阿波罗登月毕竟只有 17 次<br>美国造超级计算机进一步推进集成电路 (04:29~07:11)</p><p>美国半导体行业一开始靠政府高利润合同活着，忽略消费者市场，1970年代冷战渐消，行业开始衰败<br>很多公司倒闭，英特尔转型处理器 (07:11~08:23)</p><p>末尾总结：政府和消费者推动了计算机的发展<br>早期靠政府资金，让技术发展到足够商用，然后消费者购买商用产品继续推动产品发展 (08:23~10:41)</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332575&idx=8&sn=194d09c419655694c7c9c06665b9333d&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-25-集：个人计算机革命"><a href="#第-25-集：个人计算机革命" class="headerlink" title="第 25 集：个人计算机革命"></a>第 25 集：个人计算机革命</h2><p>本集：全是历史故事<br>00:18 1970年代初成本下降，个人计算机变得可行<br>01:51 Altair 8800<br>02:32 比尔·盖茨 和 保罗·艾伦写 BASIC 解释器<br>03:45 乔布斯提议卖组装好的计算机，Apple-I 诞生<br>04:40 1977年出现3款开箱即用计算机：<br>“Apple-II”，”TRS-80 Model I”，”Commodore PET 2001”</p><p>06:26 IBM 意识到个人计算机市场<br>IBM PC 发布，采用开放架构，兼容的机器都叫 IBM Compatible (IBM 兼容)<br>生态系统产生雪球效应：<br>因为用户多，软硬件开发人员更愿意花精力在这个平台<br>因为软硬件多，用户也更乐意买 “IBM 兼容” 的计算机</p><p>08:44 苹果选封闭架构，一切都自己来，只有苹果在非 “IBM 兼容” 下保持了足够市场份额</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=1&sn=cf11b7f28a6d2da2821c4eb85fa94ba3&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-26-集：图形用户界面-GUI"><a href="#第-26-集：图形用户界面-GUI" class="headerlink" title="第 26 集：图形用户界面 (GUI)"></a>第 26 集：图形用户界面 (GUI)</h2><p>01:10 图形界面先驱：道格拉斯·恩格尔巴特（Douglas Engelbart）<br>03:20 1970年成立 帕洛阿尔托研究中心（Palo Alto Research Center）<br>03:29 1973年完成 Xerox Alto(施乐奥托) 计算机<br>04:42 举例：写一个简单的 GUI 程序<br>06:38 1981年的 Xerox Star system(施乐之星系统)<br>08:18 史蒂夫·乔布斯去施乐参观<br>07:45 所见即所得 WYSIWYG<br>09:15 1983年推出 Apple Lisa<br>09:31 1984年推出 Macintosh<br>10:12 1985年推出 Windows 1.0，之后出到 3.1<br>10:43 1995年推出 Windows 95 提供图形界面<br>11:08 1995年微软做失败的 Microsoft Bob</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=2&sn=27c8e90c107b36488428b3c658b05606&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-27-集：3D-图形"><a href="#第-27-集：3D-图形" class="headerlink" title="第 27 集：3D 图形"></a>第 27 集：3D 图形</h2><p>01:15 线框渲染 Wireframe Rendering<br>01:39 正交投影 Orthographic Projection<br>01:50 透视投射 Perspective Projection<br>02:14 网格 Mesh<br>02:37 三角形更常用因为能定义唯一的平面<br>03:09 扫描线渲染 Scanline Rendering<br>05:04 遮挡 Occlusion<br>05:19 画家算法 Painter’s Algorithm<br>06:09 深度缓冲 Z Buffering<br>07:45 Z Fighting 错误<br>07:51 背面剔除 Back Face Culling<br>08:53 表面法线 Surface Normal<br>09:33 平面着色 Flat Shading<br>09:43 高洛德着色 Gouraud shading, 冯氏着色 Phong Shading<br>10:06 纹理映射 Texture Mapping<br>11:24 图形处理单元 GPU, Graphics Processing Unit</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=3&sn=1d89424d005bf9e9e517428ee8c51898&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-28-集：计算机网络"><a href="#第-28-集：计算机网络" class="headerlink" title="第 28 集：计算机网络"></a>第 28 集：计算机网络</h2><p>02:05 局域网 Local Area Networks - LAN<br>02:36 媒体访问控制地址 Media Access Control address - MAC<br>02:55 载波侦听多路访问 Carrier Sense Multiple Access - CSMA<br>05:18 指数退避 Exponential Backoff<br>05:36 冲突域 Collision Domain<br>07:08 电路交换 Circuit Switching<br>07:36 报文交换 Message Switching<br>10:20 分组交换 Packet Switching</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=4&sn=54e4857e78c0bc4d4eea7e28544a8274&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-29-集：互联网"><a href="#第-29-集：互联网" class="headerlink" title="第 29 集：互联网"></a>第 29 集：互联网</h2><p>02:23 IP - 互联网协议 - Internet Protocol<br>03:00 UDP - 用户数据报协议 - User Datagram Protocol<br>03:41 校验和 - Checksum<br>05:26 TCP - 传输控制协议 - Transmission Control Protocol<br>08:21 DNS - 域名系统 - Domain Name System<br>10:47 OSI - 开放式系统互联通信参考模型 - Open System Interconnection</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=5&sn=f9b9e92e1e143fb9bb0dfcafcb89b3fe&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-30-集：万维网"><a href="#第-30-集：万维网" class="headerlink" title="第 30 集：万维网"></a>第 30 集：万维网</h2><p>01:01 超链接 Hyperlinks<br>02:20 URL - 统一资源定位器 - Uniform Resource Locator<br>03:01 HTTP - 超文本传输协议 - HyperText Transfer Protocol<br>04:13 HTML - 超文本标记语言 - HyperText Markup Language<br>04:24 写一个简单网页，用到了 </p><h1> <a> <h2> <ol> <li> 标签<br>06:04 第一个浏览器和服务器是 Tim Berners-Lee 花了 2 个月在 CERN 写的<br>06:32 1991年正式发布，万维网就此诞生<br>07:19 开始讲搜索引擎的故事<br>07:40 Jerry 和 David 的万维网指南 后来改名成 Yahoo<br>07:52 搜索引擎 JumpStation<br>09:07 搜索引擎 Google<br>09:20 网络中立性<p></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=6&sn=fceb1f237508e4c5ca5bcf4adfde0b02&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-31-集：计算机安全"><a href="#第-31-集：计算机安全" class="headerlink" title="第 31 集：计算机安全"></a>第 31 集：计算机安全</h2><p>01:00 Secrecy, Integrity, Availability<br>保密性, 完整性, 可用性<br>01:49 Threat Model 威胁模型</p><p>03:14 身份验证 (Authentication) 的三种方式：<br>What you know, 你知道什么<br>What you have, 你有什么<br>What you are, 你是什么</p><p>07:34 访问控制 Access Control<br>08:48 Bell LaPadula model 不能向上读取，不能向下写入<br>11:00 隔离 Isolation, 沙盒 Sandbox</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=7&sn=7d37278bf449da76a277d6074372a927&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-32-集：黑客与攻击"><a href="#第-32-集：黑客与攻击" class="headerlink" title="第 32 集：黑客与攻击"></a>第 32 集：黑客与攻击</h2><p>01:28 社会工程学 Social Engineering<br>01:38 钓鱼 Phishing<br>02:06 假托 Pretexting<br>02:50 木马 Trojan Horses<br>03:32 NAND镜像 NAND Mirroring<br>04:12 漏洞利用 Exploit<br>04:16 缓冲区溢出 Buffer Overflow<br>05:45 边界检查 Bounds Checking<br>06:16 代码注入 Code Injection<br>09:32 零日漏洞 Zero Day Vulnerability<br>09:53 计算机蠕虫 Worms<br>09:58 僵尸网络 Botnet<br>10:11 拒绝服务攻击 DDoS</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332576&idx=8&sn=f998cdfd5db8942aa6702a844d657a3a&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-33-集：加密"><a href="#第-33-集：加密" class="headerlink" title="第 33 集：加密"></a>第 33 集：加密</h2><p>00:16 多层防御 Defence in depth<br>01:00 加密 - Encryption，解密 - Decryption<br>01:11 凯撒加密 Caesar cipher<br>01:27 替换加密 Substitution cipher<br>01:59 移位加密 Permutation cipher<br>02:03 列移位加密 Columnar transposition cipher<br>02:37 德国 Enigma 加密机<br>04:54 1977年”数据加密标准” - Data Encryption Standard (DES)<br>05:24 2001年”高级加密标准” - Advanced Encryption Standard (AES)<br>07:06 密钥交换 - Key exchange<br>07:33 用颜色来举例”单向函数”和”密钥加密”的原理<br>08:24 迪菲-赫尔曼密钥交换 - Diffie-Hellman Key Exchange<br>10:18 非对称加密 - Asymmetric encryption<br>11:22 非对称加密算法 RSA</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=1&sn=79010cc0f310a8e35d87493470bd033a&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-34-集：机器学习与人工智能"><a href="#第-34-集：机器学习与人工智能" class="headerlink" title="第 34 集：机器学习与人工智能"></a>第 34 集：机器学习与人工智能</h2><p>01:23 分类 Classification<br>01:25 分类器 Classifier<br>01:34 特征 Feature<br>02:03 标记数据 Labeled data<br>02:38 决策边界 Decision boundaries<br>03:00 混淆矩阵 Confusion matrix<br>03:39 未标签数据 Unlabeled data<br>03:49 决策树 Decision tree<br>04:25 支持向量机 Support Vector Machines<br>05:52 人工神经网络 Artificial Neural Network<br>08:34 深度学习 Deep learning<br>09:21 弱AI, 窄AI Weak AI, Narrow AI<br>09:43 强AI Strong AI<br>10:42 强化学习 Reinforcement Learning</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=2&sn=fa75d481b03123eb08d4f79a7cf8ba46&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-35-集：计算机视觉"><a href="#第-35-集：计算机视觉" class="headerlink" title="第 35 集：计算机视觉"></a>第 35 集：计算机视觉</h2><p>02:41 检测垂直边缘的算法<br>03:26 核/过滤器 kernel or filter<br>03:56 卷积 convolution<br>04:23 Prewitt 算子 Prewitt Operators<br>05:34 维奥拉·琼斯 人脸检测 Viola-Jones Face Detection<br>05:35 卷积神经网络 Convolutional Neural Networks<br>07:33 识别出脸之后，可以进一步用其他算法定位面部标志，如眼睛和眉毛具体位置，从而判断心情等信息<br>08:52 跟踪全身的标记点，如肩部，手臂等</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=3&sn=248eb9f5a97465c466364145217f8109&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-36-集：自然语言处理"><a href="#第-36-集：自然语言处理" class="headerlink" title="第 36 集：自然语言处理"></a>第 36 集：自然语言处理</h2><p>01:50 词性 Parts of speech<br>02:15 短语结构规则 Phrase structure rules<br>02:32 分析树 Parse tree<br>05:30 语音识别 Speech recognition<br>07:26 谱图 Spectrogram<br>07:44 快速傅立叶变换 Fast Fourier Transform<br>08:42 音素 Phonemes<br>09:29 语音合成 Speech Synthesis</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=4&sn=66ce52c92b9ffcaa7edbfeee25798a0c&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-37-集：机器人"><a href="#第-37-集：机器人" class="headerlink" title="第 37 集：机器人"></a>第 37 集：机器人</h2><p>02:08 法国吃饭鸭 - Digesting Duck, Canard Digerateur<br>02:23 土耳其行棋傀儡, 下国际象棋<br>02:43 第一台计算机控制的机器出现在1940年代晚期，叫数控机器, Computer Numerical Control(CNC)<br>03:32 1960年 Unimate，第一个商业贩卖的 可编程工业机器人<br>03:47 简单控制回路 simple control loop<br>04:08 负反馈回路 negative feedback loop<br>05:17 比例-积分-微分控制器 Proportional–Integral–Derivative controller PID 控制器<br>10:48 机器人三定律 Three Laws of Robotics</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=5&sn=b323f8ad0e5bb934edf0da32c8e21451&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-38-集：计算机心理学"><a href="#第-38-集：计算机心理学" class="headerlink" title="第 38 集：计算机心理学"></a>第 38 集：计算机心理学</h2><p>00:45 我们需要了解人类心理学，做出更好的计算机<br>01:12 易用度 - Usability<br>01:31 颜色强度排序 和 颜色排序<br>02:30 分组更好记，电话号码 317-555-3897 比 3175553897 好记<br>03:25 直观功能 - Affordances<br>04:33 认出 vs 回想 Recognition vs Recall<br>05:45 让机器有一定情商以及 Facebook 的研究<br>08:40 用软件修正注视位置。让视频通话时看起来像盯着对方，而不是盯着下方<br>09:58 把机器人做的像人，恐怖谷理论<br>11:35 有很多开放式的问题，心理学帮助我们明白不同选择可能带来的影响</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=6&sn=038ee84642f021ee686b618a26c93d07&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-39-集：教育科技"><a href="#第-39-集：教育科技" class="headerlink" title="第 39 集：教育科技"></a>第 39 集：教育科技</h2><p>02:15 通过调速，暂停等技巧，加强学习效率<br>03:15 大型开放式在线课程 - Massive Open Online Courses (MOOC)<br>05:08 智能辅导系统 - Intelligent Tutoring Systems<br>05:22 判断规则 - Production rule<br>06:10 域模型 - Domain Model<br>06:46 贝叶斯知识追踪 Bayesian knowledge tracing</p><ol><li><p>学生已经学会的概率</p></li><li><p>瞎猜的概率</p></li><li><p>失误的概率</p></li><li><p>做题过程中学会的概率<br>09:27 教育数据挖掘 Educational Data Mining</p></li></ol><p>   <a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=7&sn=7504c049625737c4c670bfa1e923fde7&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a></p><h2 id="第-40-集：奇点，天网，计算机的未来"><a href="#第-40-集：奇点，天网，计算机的未来" class="headerlink" title="第 40 集：奇点，天网，计算机的未来"></a>第 40 集：奇点，天网，计算机的未来</h2><p>01:21 普适计算 Ubiquitous Computing<br>04:55 奇点 Singularity<br>06:51 把工作分为4个象限，讨论自动化带来的影响<br>10:15 机器人的存在时间可能长过人类，可以长时间探索宇宙</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&mid=2458332577&idx=8&sn=95e969c4ae14e015977eb0b804804d88&scene=21#wechat_redirect" target="_blank" rel="noopener">&gt;&gt;&gt;点击观看视频&lt;&lt;&lt;</a>](<a href="https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&amp;mid=2458332470&amp;idx=1&amp;sn=81c3a54311c9cc9824127cbe64a9942e&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzA5NzAzNzg1Nw==&amp;mid=2458332470&amp;idx=1&amp;sn=81c3a54311c9cc9824127cbe64a9942e&amp;scene=21#wechat_redirect</a>)</p></li></ol></h2></a></h1>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一文讲通少儿编程</title>
      <link href="/2020/03/01/yi-wen-jiang-tong-shao-er-bian-cheng/"/>
      <url>/2020/03/01/yi-wen-jiang-tong-shao-er-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、编程语言"><a href="#一、编程语言" class="headerlink" title="一、编程语言"></a>一、编程语言</h2><p>小朋友最先接触的编程是语言，使用母语进行日常生活的交流，课里课外学习着第二语言——英语。除了这两门语言之外，在信息时代，小朋友有必要学习第三门语言，编程语言。进入信息时代，免不了跟计算机打交道，而编程语言就是跟电脑交流的语言。</p><p>小朋友最适合学习图像类的编程语言，调动起丰富的想象力的同时，也锻炼了逻辑思维能力，这背后我们把它归结为计算思维与形象思维这两种能力。计算思维让我们用人类的理性面对这个世界，形象思维让我们可以脱离这个世界到想象的时空遨游。家里有不听话的小孩，让他来学编程吧。</p><p>学习编程语言首当其冲的就是遇到工具的选择，每种工具有其特定的场景和使用范围，入门陪小猫玩Scratch，提高找蟒蛇Python，上战场竞赛找C++。从蒟蒻到神犇，编程语言带你走进神奇的计算机科学世界。</p><p>我们需要定义少儿的年龄范围，从六岁到十八岁是一个合理的范围。</p><p>根据少儿的思维发展特性来看，很适合从画图切入，形象生动，可以和同伴互相比较。Scratch以下统称sc，sc可以练经典40图；Python以下统称py，py可以练turtle画图；C++以下统称cpp，cpp可以练goc画图。一旦小朋友学了一遍以后，就会很快理解语言这是外壳，用数据结构组织的内在的算法都是相通的。</p><h2 id="二、算法"><a href="#二、算法" class="headerlink" title="二、算法"></a>二、算法</h2><p>通过锻炼虚拟世界问题的方法，来解决现实世界问题的方法</p><h2 id="三、数据结构"><a href="#三、数据结构" class="headerlink" title="三、数据结构"></a>三、数据结构</h2><p>生命是非平衡系统并以负熵为生</p><h2 id="四、数学"><a href="#四、数学" class="headerlink" title="四、数学"></a>四、数学</h2><p>万道归一</p>]]></content>
      
      
      <categories>
          
          <category> 语言之创业 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>慧通教育C++闯关第4关</title>
      <link href="/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-4-guan/"/>
      <url>/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-4-guan/</url>
      
        <content type="html"><![CDATA[<p>for循环二，数学知识，贪心，模拟</p><h3 id="926-最大值"><a href="#926-最大值" class="headerlink" title="926.最大值"></a><strong>926.</strong>最大值</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入N个整数，求其中最大值。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行1个整数N：范围在[1,200]。<br> 第二行N个整数：每个整数范围在[-10000000,100000000]。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个整数。</p><h3 id="输入-输出例子1"><a href="#输入-输出例子1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4<br>3  6  1  9</p><p>输出：</p><p>9</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;limits.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxVal <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>        cin <span class="token operator">>></span> num<span class="token punctuation">;</span>        maxVal <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">max</span><span class="token punctuation">(</span>maxVal<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> maxVal <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慧通教育C++闯关第3关</title>
      <link href="/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-3-guan/"/>
      <url>/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-3-guan/</url>
      
        <content type="html"><![CDATA[<h3 id="912-买水果"><a href="#912-买水果" class="headerlink" title="912.买水果"></a><strong>912.</strong>买水果</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>萌萌和瞳瞳各拿N元去买苹果和西瓜，已知每个苹果的价格是a、每个西瓜的价格是b。萌萌要求N元买苹果全部正好用完；瞳瞳的要求N元买西瓜后正好剩3元作为请人运输的费用。<br>如果N至少是100，请问N最少是多少？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行2个正整数：a和b，a范围在[1,20], b范围在[4,20]</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个不小于100的正整数。</p><h3 id="输入-输出例子1"><a href="#输入-输出例子1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>7  13</p><p>输出：</p><p>133</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> b <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="913-1或2"><a href="#913-1或2" class="headerlink" title="913.1或2"></a><strong>913.</strong>1或2</h3><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>萌萌才2岁，观看NBA时，对队员身上的号码感兴趣，可她只认识数字’1’和’2’，如果号码中有数字’1’或数字’2’，萌萌就会兴奋的大叫。现在，萌萌看到电视画面上有N个队员的号码，请问哪些号码会让萌萌大叫？</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行1个正整数：N，范围在[1,10]。<br> 第二行N个整数：每个整数范围在[1,99]</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行，包含’1’或’2’的整数。</p><h3 id="输入-输出例子1-1"><a href="#输入-输出例子1-1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>5<br>3  11  4  44  25</p><p>输出：</p><p>11  25</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n为n个正整数 //i为遍历n个正整数 //m为接受输入的n个正整数</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> m<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> m <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> m <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> m <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="914-and和or"><a href="#914-and和or" class="headerlink" title="914.and和or"></a><strong>914.</strong>and和or</h3><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入2个正整数a和b。如果a和b都是偶数，或者a和b都是3的倍数，就输出’1’；否则输出’0’。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行2个正整数：a和b，范围在[1,100]。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行，1或0。</p><h3 id="输入-输出例子1-2"><a href="#输入-输出例子1-2" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 24  7</p><p>输出：</p><p>0</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="915-在区间里"><a href="#915-在区间里" class="headerlink" title="915.在区间里"></a><strong>915.</strong>在区间里</h3><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个正整数a、b和c，如果c在区间[a, b]内输出”in”，否则输出”out”。<br>注意：方括号表示的是闭区间，[a, b]是包括a和b的。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、b和c，范围在[1, 1000000]，a ≤ b。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p> in或out。</p><h3 id="输入-输出例子1-3"><a href="#输入-输出例子1-3" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4  8  5</p><p>输出：</p><p>in</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span>b<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"in"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"out"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="916-区间交集"><a href="#916-区间交集" class="headerlink" title="916.区间交集"></a><strong>916.</strong>区间交集</h3><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入5个正整数a1、b1、a2、b2和c，如果c在区间[a1, b1]内 并且 c也在区间[a2, b2]内 输出”in”，否则输出”out”。<br>注意：方括号表示的是闭区间，[a, b]是包括a和b的。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行5个正整数：a1、b1、a2、b2和c，范围在[1, 1000000]，a1 ≤ b1，a2 ≤ b2。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p>in或out。</p><h3 id="输入-输出例子1-4"><a href="#输入-输出例子1-4" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4  8  6  10  5</p><p>输出：</p><p>out</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a1 <span class="token operator">>></span> b1 <span class="token operator">>></span> a2 <span class="token operator">>></span> b2 <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> a1 <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> b1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> a2 <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> b2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"in"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"out"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="917-区间并集"><a href="#917-区间并集" class="headerlink" title="917.区间并集"></a><strong>917.</strong>区间并集</h3><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入5个正整数a1、b1、a2、b2和c，如果c在区间[a1, b1]内 或者 在区间[a2, b2]内 输出”in”，否则输出”out”。<br>注意：方括号表示的是闭区间，[a, b]是包括a和b的。</p><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行5个正整数：a1、b1、a2、b2和c，范围在[1, 1000000]，a1 ≤ b1，a2 ≤ b2。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p>in或out。</p><h3 id="输入-输出例子1-5"><a href="#输入-输出例子1-5" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 4  8  6  10  5</p><p>输出：</p><p>in</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a1 <span class="token operator">>></span> b1 <span class="token operator">>></span> a2 <span class="token operator">>></span> b2 <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> a1 <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> b1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> a2 <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> b2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"in"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"out"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="918-最大值"><a href="#918-最大值" class="headerlink" title="918.最大值"></a><strong>918.</strong>最大值</h3><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个整数a、b和c，输出其中的最大值。</p><h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行3个正整数：a、b和c，范围在[1,10000]。</p><h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个正整数。</p><h3 id="输入-输出例子1-6"><a href="#输入-输出例子1-6" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 5  10  6</p><p>输出：</p><p>10</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> max<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        max <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        max <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">></span> max<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        max <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> max<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="919-3数排序"><a href="#919-3数排序" class="headerlink" title="919.3数排序"></a><strong>919.</strong>3数排序</h3><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个整数a、b和c，按从大到小输出。</p><h3 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行3个正整数：a、b和c，范围在[1,10000]。</p><h3 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h3><p>排序后的3个数。</p><h3 id="输入-输出例子1-7"><a href="#输入-输出例子1-7" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>5  10  6</p><p>输出：</p><p>10  6  5</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> temp <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> c<span class="token punctuation">,</span> c <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span>  b <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="920-求最小值"><a href="#920-求最小值" class="headerlink" title="920.求最小值"></a><strong>920.</strong>求最小值</h3><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入 4 个整数，求它们之中最小的。</p><h3 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行4个整数，范围在[1,30]。</p><h3 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h3><p>只一个整数。</p><h3 id="输入-输出例子1-8"><a href="#输入-输出例子1-8" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>12  8  5  6</p><p>输出：</p><p>5</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> min<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c <span class="token operator">>></span> d<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> min <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            min <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> min<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="921-排名"><a href="#921-排名" class="headerlink" title="921.排名"></a><strong>921.</strong>排名</h3><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个整数a、b和c表示3名运动员操场跑3圈用的时间，按到达的先后，输出这3个数。</p><h3 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、b和c，范围在[1,10000]。</p><h3 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h3><p>排序后的3个数。</p><h3 id="输入-输出例子1-9"><a href="#输入-输出例子1-9" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>500  1000  600</p><p>输出：</p><p>500  600  1000</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">></span> c<span class="token punctuation">)</span> temp <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> c<span class="token punctuation">,</span> c <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span>  b <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="922-中间数"><a href="#922-中间数" class="headerlink" title="922.中间数"></a><strong>922.</strong>中间数</h3><h3 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个不同的整数a、b和c，输出中间大小的数。</p><h3 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行3个正整数：a、b和c，范围在[1,10000]。</p><h3 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出中间大小的数</p><h3 id="输入-输出例子1-10"><a href="#输入-输出例子1-10" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>500  1000  600</p><p>输出：</p><p>600</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> temp <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> c<span class="token punctuation">,</span> c <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> temp <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="923-判断闰年"><a href="#923-判断闰年" class="headerlink" title="923.判断闰年"></a><strong>923.</strong>判断闰年</h3><h3 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h3><p>闰年(Leap Year)是为了弥补因人为历法规定造成的年度天数与地球实际公转周期的时间<br>差而设立的。补上时间差的年份为闰年。闰年有 366 天!<br>闰年计算<br>① 普通年能被 4 整除且不能被 100 整除的为闰年。<br>② 世纪年（整百年）能被 400 整除的是闰年。(如 2000 年是闰年，1900 年不是闰年)<br>现在输入一个表示年的整数 y，判断是不是闰年。是输出“yes” ，不是输出“no” 。</p><h3 id="输入格式-11"><a href="#输入格式-11" class="headerlink" title="输入格式"></a>输入格式</h3><p>一行 1 个正整数：y，范围在[1,100000000]。</p><h3 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式"></a>输出格式</h3><p>yes 或 no。</p><h3 id="输入-输出例子1-11"><a href="#输入-输出例子1-11" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>3512</p><p>输出：</p><p>yes</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>  <span class="token keyword">int</span> year<span class="token punctuation">;</span>  cin<span class="token operator">>></span>year<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>                  cout<span class="token operator">&lt;&lt;</span><span class="token string">"yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"no"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="924-天数"><a href="#924-天数" class="headerlink" title="924.天数"></a><strong>924.</strong>天数</h3><h3 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h3><p>每年的12月份，因为到年底，大家就想知道今年已经度过了多少天(包括d号)。<br>输入2 个正整数y、和d，表示y年12月d日，问这个日期是当年的第几天？</p><h3 id="输入格式-12"><a href="#输入格式-12" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行1个整数y，范围在[1,100000000]。<br> 第二行1个整数d，范围在[1,31]。</p><h3 id="输出格式-12"><a href="#输出格式-12" class="headerlink" title="输出格式"></a>输出格式</h3><p>只一个整数。</p><h3 id="输入-输出例子1-12"><a href="#输入-输出例子1-12" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>2016  17</p><p>输出：</p><p>352</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>  <span class="token keyword">int</span> year<span class="token punctuation">,</span> day<span class="token punctuation">;</span>  cin <span class="token operator">>></span> year <span class="token operator">>></span> day<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>      day <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">335</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>      day <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">334</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> day<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慧通教育C++闯关第2关</title>
      <link href="/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-2-guan/"/>
      <url>/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-2-guan/</url>
      
        <content type="html"><![CDATA[<p>for循环一，循环变量的应用</p><h3 id="897-a到b"><a href="#897-a到b" class="headerlink" title="897.a到b"></a><strong>897.</strong>a到b</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入2个1000以内的正整数a和b，a &lt; b，输出从a到b的所有整数，数字之间留一个空格。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行2个正整数：a和b，a &lt; b，范围在[1,1000]。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行，从a到b的正整数。</p><h3 id="输入-输出例子1"><a href="#输入-输出例子1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 4  6</p><p>输出：</p><p> 4 5 6</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="898-2位偶数"><a href="#898-2位偶数" class="headerlink" title="898.2位偶数"></a><strong>898.</strong>2位偶数</h3><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>输出所有的2位偶数，数字之间留一个空格。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行，所有2位数偶数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">98</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="899-从0开始"><a href="#899-从0开始" class="headerlink" title="899.从0开始"></a>899.从0开始</h3><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>C语言编程中，数数喜欢从0开始。比如数数5次为: 0,1,2,3,4，其中的妙处只有高级的C程序员知道。<br>现在输入n，要你按照C程序员的方式数数。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行1个正整数：n，范围在[1,1000]。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行n个整数：0 1 2…。</p><h3 id="输入-输出例子1-1"><a href="#输入-输出例子1-1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4</p><p>输出：</p><p> 0 1 2 3</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">long</span> n<span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="900-前面数"><a href="#900-前面数" class="headerlink" title="900.前面数"></a><strong>900.</strong>前面数</h3><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>如果你知道一个整数a，想输出a前面的N个数，怎么办？</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行2个正整数：a和N，范围在[1,10000]。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>一行n个整数：……a-2  a-1</p><h3 id="输入-输出例子1-2"><a href="#输入-输出例子1-2" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 10  5</p><p>输出：</p><p> 5 6 7 8 9</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>N<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>N<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>a<span class="token operator">-</span>N<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="901-奇数"><a href="#901-奇数" class="headerlink" title="901.奇数"></a><strong>901.</strong>奇数</h3><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定N，输出1到N之间的奇数。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行1个正整数：N，范围在[1,10000]。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p> [1…N]内的正奇数。</p><h3 id="输入-输出例子1-3"><a href="#输入-输出例子1-3" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>10</p><p>输出：</p><p> 1 3 5 7 9</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>  cin<span class="token operator">>></span>N<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="902-7的倍数"><a href="#902-7的倍数" class="headerlink" title="902.7的倍数"></a><strong>902.</strong>7的倍数</h3><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>从小到大输出所有3位数中7的倍数的数。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行整数，之间用空格隔开。</p><h3 id="输入-输出例子1-4"><a href="#输入-输出例子1-4" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>输出：</p><p> 105  112……</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">999</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">7</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>      cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="903-k的幂"><a href="#903-k的幂" class="headerlink" title="903.k的幂"></a><strong>903.</strong>k的幂</h3><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个正整数k，输出:k  k<em>k  k</em>k*k……，当超过8位数时停止。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行1个整数k，范围在[2,15]。</p><h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行，多个k的幂。</p><h3 id="输入-输出例子1-5"><a href="#输入-输出例子1-5" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>15</p><p>输出：</p><p> 15  225  3375  50625  759375  11390625</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> k<span class="token punctuation">;</span>  cin<span class="token operator">>></span>k<span class="token punctuation">;</span>  <span class="token keyword">long</span> result<span class="token operator">=</span>k<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>result<span class="token operator">&lt;</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//超过8位数，即变成9位数或以上</span>  <span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>result<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    result<span class="token operator">*</span><span class="token operator">=</span>k<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="904-等差数列"><a href="#904-等差数列" class="headerlink" title="904.等差数列"></a><strong>904.</strong>等差数列</h3><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>一列数，如果相邻2个的差都相等，就叫等差数列。例如：2,5,8,11,14….。<br>现在给定开始数a和差d，输出第n项。</p><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、d和n，范围在[-100,100]。</p><h3 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行n个整数。</p><h3 id="输入-输出例子1-6"><a href="#输入-输出例子1-6" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4 5 6</p><p>输出：</p><p>29</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>d<span class="token operator">>></span>n<span class="token punctuation">;</span>  <span class="token keyword">long</span> result<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token operator">+</span><span class="token operator">=</span>d<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="905-双等差数列"><a href="#905-双等差数列" class="headerlink" title="905.双等差数列"></a><strong>905.</strong>双等差数列</h3><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>求下列双等差数列的第N项。<br>1 2 4 7 11 16 22…</p><h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行1个正整数：N，范围在[1,100]。</p><h3 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h3><p> 1个整数。</p><h3 id="输入-输出例子1-7"><a href="#输入-输出例子1-7" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4</p><p>输出：</p><p>7</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>  cin<span class="token operator">>></span>N<span class="token punctuation">;</span>  <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token operator">+</span><span class="token operator">=</span>d<span class="token punctuation">;</span>    d<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="906-打印数列1"><a href="#906-打印数列1" class="headerlink" title="906.打印数列1"></a><strong>906.</strong>打印数列1</h3><h3 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h3><p>打印下面数列的前N项。<br>1  4  10  19  31  46….</p><h3 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h3><p> 第一行1个整数n，范围在[1,100]。</p><h3 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一行，N个整数。</p><h3 id="输入-输出例子1-8"><a href="#输入-输出例子1-8" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>4</p><p>输出：</p><p> 1  4  10  19</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>  cin<span class="token operator">>></span>N<span class="token punctuation">;</span>  <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token operator">+</span><span class="token operator">=</span>d<span class="token punctuation">;</span>    d<span class="token operator">+</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慧通教育C++闯关第1关</title>
      <link href="/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-1-guan/"/>
      <url>/2020/03/01/hui-tong-jiao-yu-c-chuang-guan-di-1-guan/</url>
      
        <content type="html"><![CDATA[<h3 id="第1关"><a href="#第1关" class="headerlink" title="第1关"></a>第1关</h3><p>余数和条件语句的应用</p><h3 id="888-哪个大？"><a href="#888-哪个大？" class="headerlink" title="888.哪个大？"></a>888.哪个大？</h3><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入2个1000000以内的正整数a和b，输出它们中的较大的数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行2个正整数：a和b，范围在[1,1000000]。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一个正整数。</p><h3 id="输入-输出例子1"><a href="#输入-输出例子1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>5    6</p><p>输出：</p><p>6</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="889-余数大小"><a href="#889-余数大小" class="headerlink" title="889.余数大小"></a><strong>889.</strong>余数大小</h3><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个1000000以内的正整数a、b和c，输出a%c和b%c中的较小的数。</p><h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、b和c，范围在[1,1000000]。</p><h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一个整数。</p><h3 id="输入-输出例子1-1"><a href="#输入-输出例子1-1" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>5  6  3</p><p>输出：</p><p>0</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> c <span class="token operator">></span> b <span class="token operator">%</span> c<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">%</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">%</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="890-三角形判断"><a href="#890-三角形判断" class="headerlink" title="890.三角形判断"></a><strong>890.</strong>三角形判断</h3><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入3个1000000以内的正整数a、b和c（a&lt; b &lt; c），判断能否以a、b和c为长度画出一个三角形？可以输出“yes”，否则输出“no”。</p><h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、b和c，范围在[1,1000000]。</p><h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p> yes或no。</p><h3 id="输入-输出例子1-2"><a href="#输入-输出例子1-2" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>5  6  10</p><p>输出：</p><p>yes</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">></span> c<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="891-数的奇偶"><a href="#891-数的奇偶" class="headerlink" title="891.数的奇偶"></a><strong>891.</strong>数的奇偶</h3><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入1个正整数a，如果是奇数打印1，是偶数打印0。</p><h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行1个正整数：a，范围在[1,100000000]。</p><h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>1个整数：1或0。</p><h3 id="输入-输出例子1-3"><a href="#输入-输出例子1-3" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>430512</p><p>输出：</p><p>0</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="892-同奇偶"><a href="#892-同奇偶" class="headerlink" title="892.同奇偶"></a><strong>892.</strong>同奇偶</h3><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入2个1000000以内的正整数a和b，如果a和b的奇偶性相同输出“yes”，否则输出“no”。</p><h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行2个正整数：a和b，范围在[1,1000000]。</p><h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p> yes或no。</p><h3 id="输入-输出例子1-4"><a href="#输入-输出例子1-4" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 6  10</p><p>输出：</p><p>yes</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> b <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"no"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="893-奇数个数"><a href="#893-奇数个数" class="headerlink" title="893.奇数个数"></a><strong>893.</strong>奇数个数</h3><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入4个1000000以内的正整数，统计其中奇数的个数。</p><h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行4个正整数：范围在[1,1000000]。</p><h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一个整数。</p><h3 id="输入-输出例子1-5"><a href="#输入-输出例子1-5" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 6  7  10  121</p><p>输出：</p><p>2</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> num<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>num<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>       cnt<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>cnt<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="894-数的因子"><a href="#894-数的因子" class="headerlink" title="894.数的因子"></a><strong>894.</strong>数的因子</h3><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入2个正整数a和b，如果a是b的因子打印”yes”，否则打印”no”。</p><h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行2个正整数：a和b，范围在[1,100000000]。</p><h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><p>yes或no。</p><h3 id="输入-输出例子1-6"><a href="#输入-输出例子1-6" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 6  120</p><p>输出：</p><p>yes</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span>b<span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"no"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="895-地砖"><a href="#895-地砖" class="headerlink" title="895.地砖"></a><strong>895.</strong>地砖</h3><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>有个房间，a公分长，b公分宽，现在地砖是边长c公分的正方形，问能不能在不切割地砖的情况下，正好铺满这个房间。能打印”yes”，否则打印”no”。<br>注：不考虑地砖的缝隙问题。</p><h3 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：a、b和c，范围在[1,1000000]。</p><h3 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h3><p>yes或no。</p><h3 id="输入-输出例子1-7"><a href="#输入-输出例子1-7" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p> 320  1024  8</p><p>输出：</p><p> yes</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>  cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">%</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">%</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"no"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="896-糖果分堆"><a href="#896-糖果分堆" class="headerlink" title="896.糖果分堆"></a><strong>896.</strong>糖果分堆</h3><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p>有N颗相同的糖果要分成几堆相同个数的。小明希望每堆是a颗糖，小丁希望每堆是b颗糖。但只有一种方案是成立的，请问正确的方案能分成几堆？</p><h3 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h3><p> 一行3个正整数：n、a和b，范围在[1,1000000]。</p><h3 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h3><p> 一个整数。</p><h3 id="输入-输出例子1-8"><a href="#输入-输出例子1-8" class="headerlink" title="输入/输出例子1"></a>输入/输出例子1</h3><p>输入：</p><p>30  7  6</p><p>输出：</p><p>5</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">long</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>n<span class="token punctuation">;</span>  cin<span class="token operator">>></span>n<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">/</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">/</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 语言之编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到这里!</title>
      <link href="/2020/02/28/huan-ying-lai-dao-zhe-li/"/>
      <url>/2020/02/28/huan-ying-lai-dao-zhe-li/</url>
      
        <content type="html"><![CDATA[<h3 id="闲谈"><a href="#闲谈" class="headerlink" title="闲谈"></a>闲谈</h3><p>有些事情当时做的时候，并不理解。比如两年前我就会建立自己的网站，可是当时并没有坚持下来，以至于今天看来自己仿佛都忘记了全部，可做过的事情怎么可能忘记。大脑有两种路径模式，一种是形成具体清晰的路径，一种是模糊不清的路径。前者成为我们谋生的技能，后者进入我们的知识库里面成为可以快速检索，再次建立联系的技能。</p><p>对于我来说，搜索技能是我的核心技能之一。在初阶的时候，搜索只是一种工具，慢慢上升为一种技能，最后变成一种思想。对于这个技能的学习，我主要从虫部落的课程中学习。网络上的主要工具还是Google。开始我还是要认真地对搜索运算符进行记忆，然后多加练习。本地的主要工具还是Everything。有时精通一种技能，强过熟悉十种技能。既然现在已经知道这一点，我就不希望下一次检索记忆的时候还会花费很多的时间，那便需要采用记录的方式进行。</p><p>写文章的记录方式很不错，可大多时候适用于对于生活和学习的反思，而且这属于单向的记录方式。首先有更简单的记录方式的时候就不用难的，我们趋利避害的本能总是在大脑中喊，“好累”，“休息一下”，简单的记录方式我当然推荐便签类的APP，这是对于短内容记忆的，对于长内容的记忆推荐语音输入自动转文字。当然上述提到的两类工具还是单向记录的，什么是双向呢？第一种就是对话式的记录，比如微信聊天，第二种就是邮件，email承载的内容更多。</p><p>记录下成长历程的好处很多，我们与时间为伴的时候，相信时间的力量的时候，很多个人品质就显山露水。比如长久的耐心，比如良好的习惯。</p><p>这个博客主要是记录我的学习和生活，有些时候心里面有很多话想说出来，可又不知到哪里表达，公众号是表达的好地方，博客也是。学习上主要是继续钻研Scratch，Python，C++三门语言。Scratch侧重于计算机科学的启蒙和制作动画游戏；Python侧重于Turtle的画图；C++从GoC画图切入侧,重于信息学奥林匹克竞赛的题目练习。各有侧重点，风帆已挂，势必踏破那万重山。</p><p>一开始还不清楚博客的主要定位，但我心里已经有大致的方向，相信再多写一些文字我就可以做成型。这些文章我会同步到微信公众号。</p><h3 id="个人主要技能"><a href="#个人主要技能" class="headerlink" title="个人主要技能"></a>个人主要技能</h3><ul><li>科学上网</li><li>超级搜索术</li><li>马拉松选手</li><li>写作</li><li>创新</li><li>编程</li><li>逆向法</li><li>ANKI</li><li>XMIND</li><li>读一流书</li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
